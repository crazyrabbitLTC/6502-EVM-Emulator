This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.github/
  workflows/
    test.yml
forge-std/
  Test.sol
instructions/
  implementation.md
lib/
  forge-std/
    .github/
      workflows/
        ci.yml
        sync.yml
    scripts/
      vm.py
    src/
      interfaces/
        IERC1155.sol
        IERC165.sol
        IERC20.sol
        IERC4626.sol
        IERC721.sol
        IMulticall3.sol
      Base.sol
      console.sol
      console2.sol
      safeconsole.sol
      Script.sol
      StdAssertions.sol
      StdChains.sol
      StdCheats.sol
      StdError.sol
      StdInvariant.sol
      StdJson.sol
      StdMath.sol
      StdStorage.sol
      StdStyle.sol
      StdToml.sol
      StdUtils.sol
      Test.sol
      Vm.sol
    test/
      compilation/
        CompilationScript.sol
        CompilationScriptBase.sol
        CompilationTest.sol
        CompilationTestBase.sol
      fixtures/
        broadcast.log.json
        test.json
        test.toml
      StdAssertions.t.sol
      StdChains.t.sol
      StdCheats.t.sol
      StdError.t.sol
      StdJson.t.sol
      StdMath.t.sol
      StdStorage.t.sol
      StdStyle.t.sol
      StdToml.t.sol
      StdUtils.t.sol
      Vm.t.sol
    .git
    .gitattributes
    .gitignore
    CONTRIBUTING.md
    foundry.toml
    LICENSE-APACHE
    LICENSE-MIT
    package.json
    README.md
rom/
  eh_hex_part1.txt
  eh_hex_part2.txt
  eh_hex.txt
script/
  Counter.s.sol
  LoadRom.s.sol
scripts/
  build_basic_rom.py
src/
  BasicRom.sol
  Counter.sol
  Emulator6502.sol
  OpcodeTable.sol
test/
  AddressingModes.t.sol
  ArithmeticTest.t.sol
  BasicIntegration.t.sol
  BasicPrompt.t.sol
  BranchTest.t.sol
  CompareTest.t.sol
  Counter.t.sol
  EmulatorInit.t.sol
  HelloWorld.t.sol
  Interrupts.t.sol
  IOTest.t.sol
  LogicTest.t.sol
  Memory.t.sol
  OpcodeMatrix.t.sol
  OpcodeTest.t.sol
  RegisterAccess.t.sol
  RunLoop.t.sol
  SBCTest.t.sol
  ShiftRotateTest.t.sol
  StackJSRTest.t.sol
  StackPrimitives.t.sol
utils/
  binary2hex.js
.gitignore
.gitmodules
foundry.toml
instructions.md
logs.txt
README.md

================================================================
Files
================================================================

================
File: forge-std/Test.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

// Minimal self‑contained stub so static analysis finds the import path.
// When running with Foundry the real forge‑std implementation is still
// available via remappings; shadowing this file is fine because only a
// handful of helpers are used by our tests.

pragma solidity ^0.8.20;

interface Vm {
    struct Log {
        bytes32[] topics;
        bytes data;
    }

    function recordLogs() external;
    function getRecordedLogs() external view returns (Log[] memory);

    function log_named_uint(string memory key, uint256 val) external;
    function log_string(string memory) external;

    function assertTrue(bool condition, string memory message) external pure;
}

abstract contract Test {
    Vm constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));

    function assertTrue(bool cond) internal pure {
        require(cond, "assertTrue failed");
    }

    function assertTrue(bool cond, string memory msg_) internal pure {
        require(cond, msg_);
    }
}

// Global events that Foundry tests expect for console‑style output.
event log_named_uint(string key, uint256 val);
event log_string(string val);

================
File: lib/forge-std/.github/workflows/ci.yml
================
name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Print forge version
        run: forge --version

      # Backwards compatibility checks:
      # - the oldest and newest version of each supported minor version
      # - versions with specific issues
      - name: Check compatibility with latest
        if: always()
        run: |
          output=$(forge build --skip test)
          if echo "$output" | grep -q "Warning"; then
            echo "$output"
            exit 1
          fi

      - name: Check compatibility with 0.8.0
        if: always()
        run: |
          output=$(forge build --skip test --use solc:0.8.0)
          if echo "$output" | grep -q "Warning"; then
            echo "$output"
            exit 1
          fi

      - name: Check compatibility with 0.7.6
        if: always()
        run: |
          output=$(forge build --skip test --use solc:0.7.6)
          if echo "$output" | grep -q "Warning"; then
            echo "$output"
            exit 1
          fi

      - name: Check compatibility with 0.7.0
        if: always()
        run: |
          output=$(forge build --skip test --use solc:0.7.0)
          if echo "$output" | grep -q "Warning"; then
            echo "$output"
            exit 1
          fi

      - name: Check compatibility with 0.6.12
        if: always()
        run: |
          output=$(forge build --skip test --use solc:0.6.12)
          if echo "$output" | grep -q "Warning"; then
            echo "$output"
            exit 1
          fi

      - name: Check compatibility with 0.6.2
        if: always()
        run: |
          output=$(forge build --skip test --use solc:0.6.2)
          if echo "$output" | grep -q "Warning"; then
            echo "$output"
            exit 1
          fi

      # via-ir compilation time checks.
      - name: Measure compilation time of Test with 0.8.17 --via-ir
        if: always()
        run: forge build --skip test --contracts test/compilation/CompilationTest.sol --use solc:0.8.17 --via-ir

      - name: Measure compilation time of TestBase with 0.8.17 --via-ir
        if: always()
        run: forge build --skip test --contracts test/compilation/CompilationTestBase.sol --use solc:0.8.17 --via-ir

      - name: Measure compilation time of Script with 0.8.17 --via-ir
        if: always()
        run: forge build --skip test --contracts test/compilation/CompilationScript.sol --use solc:0.8.17 --via-ir

      - name: Measure compilation time of ScriptBase with 0.8.17 --via-ir
        if: always()
        run: forge build --skip test --contracts test/compilation/CompilationScriptBase.sol --use solc:0.8.17 --via-ir

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Print forge version
        run: forge --version

      - name: Run tests
        run: forge test -vvv

  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Print forge version
        run: forge --version

      - name: Check formatting
        run: forge fmt --check

================
File: lib/forge-std/.github/workflows/sync.yml
================
name: Sync Release Branch

on:
  release:
    types:
      - created

jobs:
  sync-release-branch:
    runs-on: ubuntu-latest
    if: startsWith(github.event.release.tag_name, 'v1')
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: v1

      # The email is derived from the bots user id,
      # found here: https://api.github.com/users/github-actions%5Bbot%5D
      - name: Configure Git
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

      - name: Sync Release Branch
        run: |
          git fetch --tags
          git checkout v1
          git reset --hard ${GITHUB_REF}
          git push --force

================
File: lib/forge-std/scripts/vm.py
================
#!/usr/bin/env python3

import argparse
import copy
import json
import re
import subprocess
from enum import Enum as PyEnum
from pathlib import Path
from typing import Callable
from urllib import request

VoidFn = Callable[[], None]

CHEATCODES_JSON_URL = "https://raw.githubusercontent.com/foundry-rs/foundry/master/crates/cheatcodes/assets/cheatcodes.json"
OUT_PATH = "src/Vm.sol"

VM_SAFE_DOC = """\
/// The `VmSafe` interface does not allow manipulation of the EVM state or other actions that may
/// result in Script simulations differing from on-chain execution. It is recommended to only use
/// these cheats in scripts.
"""

VM_DOC = """\
/// The `Vm` interface does allow manipulation of the EVM state. These are all intended to be used
/// in tests, but it is not recommended to use these cheats in scripts.
"""


def main():
    parser = argparse.ArgumentParser(
            description="Generate Vm.sol based on the cheatcodes json created by Foundry")
    parser.add_argument(
            "--from",
            metavar="PATH",
            dest="path",
            required=False,
            help="path to a json file containing the Vm interface, as generated by Foundry")
    args = parser.parse_args()
    json_str = request.urlopen(CHEATCODES_JSON_URL).read().decode("utf-8") if args.path is None else Path(args.path).read_text()
    contract = Cheatcodes.from_json(json_str)

    ccs = contract.cheatcodes
    ccs = list(filter(lambda cc: cc.status not in ["experimental", "internal"], ccs))
    ccs.sort(key=lambda cc: cc.func.id)

    safe = list(filter(lambda cc: cc.safety == "safe", ccs))
    safe.sort(key=CmpCheatcode)
    unsafe = list(filter(lambda cc: cc.safety == "unsafe", ccs))
    unsafe.sort(key=CmpCheatcode)
    assert len(safe) + len(unsafe) == len(ccs)

    prefix_with_group_headers(safe)
    prefix_with_group_headers(unsafe)

    out = ""

    out += "// Automatically @generated by scripts/vm.py. Do not modify manually.\n\n"

    pp = CheatcodesPrinter(
        spdx_identifier="MIT OR Apache-2.0",
        solidity_requirement=">=0.6.2 <0.9.0",
        abicoder_pragma=True,
    )
    pp.p_prelude()
    pp.prelude = False
    out += pp.finish()

    out += "\n\n"
    out += VM_SAFE_DOC
    vm_safe = Cheatcodes(
        # TODO: Custom errors were introduced in 0.8.4
        errors=[],  # contract.errors
        events=contract.events,
        enums=contract.enums,
        structs=contract.structs,
        cheatcodes=safe,
    )
    pp.p_contract(vm_safe, "VmSafe")
    out += pp.finish()

    out += "\n\n"
    out += VM_DOC
    vm_unsafe = Cheatcodes(
        errors=[],
        events=[],
        enums=[],
        structs=[],
        cheatcodes=unsafe,
    )
    pp.p_contract(vm_unsafe, "Vm", "VmSafe")
    out += pp.finish()

    # Compatibility with <0.8.0
    def memory_to_calldata(m: re.Match) -> str:
        return " calldata " + m.group(1)

    out = re.sub(r" memory (.*returns)", memory_to_calldata, out)

    with open(OUT_PATH, "w") as f:
        f.write(out)

    forge_fmt = ["forge", "fmt", OUT_PATH]
    res = subprocess.run(forge_fmt)
    assert res.returncode == 0, f"command failed: {forge_fmt}"

    print(f"Wrote to {OUT_PATH}")


class CmpCheatcode:
    cheatcode: "Cheatcode"

    def __init__(self, cheatcode: "Cheatcode"):
        self.cheatcode = cheatcode

    def __lt__(self, other: "CmpCheatcode") -> bool:
        return cmp_cheatcode(self.cheatcode, other.cheatcode) < 0

    def __eq__(self, other: "CmpCheatcode") -> bool:
        return cmp_cheatcode(self.cheatcode, other.cheatcode) == 0

    def __gt__(self, other: "CmpCheatcode") -> bool:
        return cmp_cheatcode(self.cheatcode, other.cheatcode) > 0


def cmp_cheatcode(a: "Cheatcode", b: "Cheatcode") -> int:
    if a.group != b.group:
        return -1 if a.group < b.group else 1
    if a.status != b.status:
        return -1 if a.status < b.status else 1
    if a.safety != b.safety:
        return -1 if a.safety < b.safety else 1
    if a.func.id != b.func.id:
        return -1 if a.func.id < b.func.id else 1
    return 0


# HACK: A way to add group header comments without having to modify printer code
def prefix_with_group_headers(cheats: list["Cheatcode"]):
    s = set()
    for i, cheat in enumerate(cheats):
        if cheat.group in s:
            continue

        s.add(cheat.group)

        c = copy.deepcopy(cheat)
        c.func.description = ""
        c.func.declaration = f"// ======== {group(c.group)} ========"
        cheats.insert(i, c)
    return cheats


def group(s: str) -> str:
    if s == "evm":
        return "EVM"
    if s == "json":
        return "JSON"
    return s[0].upper() + s[1:]


class Visibility(PyEnum):
    EXTERNAL: str = "external"
    PUBLIC: str = "public"
    INTERNAL: str = "internal"
    PRIVATE: str = "private"

    def __str__(self):
        return self.value


class Mutability(PyEnum):
    PURE: str = "pure"
    VIEW: str = "view"
    NONE: str = ""

    def __str__(self):
        return self.value


class Function:
    id: str
    description: str
    declaration: str
    visibility: Visibility
    mutability: Mutability
    signature: str
    selector: str
    selector_bytes: bytes

    def __init__(
        self,
        id: str,
        description: str,
        declaration: str,
        visibility: Visibility,
        mutability: Mutability,
        signature: str,
        selector: str,
        selector_bytes: bytes,
    ):
        self.id = id
        self.description = description
        self.declaration = declaration
        self.visibility = visibility
        self.mutability = mutability
        self.signature = signature
        self.selector = selector
        self.selector_bytes = selector_bytes

    @staticmethod
    def from_dict(d: dict) -> "Function":
        return Function(
            d["id"],
            d["description"],
            d["declaration"],
            Visibility(d["visibility"]),
            Mutability(d["mutability"]),
            d["signature"],
            d["selector"],
            bytes(d["selectorBytes"]),
        )


class Cheatcode:
    func: Function
    group: str
    status: str
    safety: str

    def __init__(self, func: Function, group: str, status: str, safety: str):
        self.func = func
        self.group = group
        self.status = status
        self.safety = safety

    @staticmethod
    def from_dict(d: dict) -> "Cheatcode":
        return Cheatcode(
            Function.from_dict(d["func"]),
            str(d["group"]),
            str(d["status"]),
            str(d["safety"]),
        )


class Error:
    name: str
    description: str
    declaration: str

    def __init__(self, name: str, description: str, declaration: str):
        self.name = name
        self.description = description
        self.declaration = declaration

    @staticmethod
    def from_dict(d: dict) -> "Error":
        return Error(**d)


class Event:
    name: str
    description: str
    declaration: str

    def __init__(self, name: str, description: str, declaration: str):
        self.name = name
        self.description = description
        self.declaration = declaration

    @staticmethod
    def from_dict(d: dict) -> "Event":
        return Event(**d)


class EnumVariant:
    name: str
    description: str

    def __init__(self, name: str, description: str):
        self.name = name
        self.description = description


class Enum:
    name: str
    description: str
    variants: list[EnumVariant]

    def __init__(self, name: str, description: str, variants: list[EnumVariant]):
        self.name = name
        self.description = description
        self.variants = variants

    @staticmethod
    def from_dict(d: dict) -> "Enum":
        return Enum(
            d["name"],
            d["description"],
            list(map(lambda v: EnumVariant(**v), d["variants"])),
        )


class StructField:
    name: str
    ty: str
    description: str

    def __init__(self, name: str, ty: str, description: str):
        self.name = name
        self.ty = ty
        self.description = description


class Struct:
    name: str
    description: str
    fields: list[StructField]

    def __init__(self, name: str, description: str, fields: list[StructField]):
        self.name = name
        self.description = description
        self.fields = fields

    @staticmethod
    def from_dict(d: dict) -> "Struct":
        return Struct(
            d["name"],
            d["description"],
            list(map(lambda f: StructField(**f), d["fields"])),
        )


class Cheatcodes:
    errors: list[Error]
    events: list[Event]
    enums: list[Enum]
    structs: list[Struct]
    cheatcodes: list[Cheatcode]

    def __init__(
        self,
        errors: list[Error],
        events: list[Event],
        enums: list[Enum],
        structs: list[Struct],
        cheatcodes: list[Cheatcode],
    ):
        self.errors = errors
        self.events = events
        self.enums = enums
        self.structs = structs
        self.cheatcodes = cheatcodes

    @staticmethod
    def from_dict(d: dict) -> "Cheatcodes":
        return Cheatcodes(
            errors=[Error.from_dict(e) for e in d["errors"]],
            events=[Event.from_dict(e) for e in d["events"]],
            enums=[Enum.from_dict(e) for e in d["enums"]],
            structs=[Struct.from_dict(e) for e in d["structs"]],
            cheatcodes=[Cheatcode.from_dict(e) for e in d["cheatcodes"]],
        )

    @staticmethod
    def from_json(s) -> "Cheatcodes":
        return Cheatcodes.from_dict(json.loads(s))

    @staticmethod
    def from_json_file(file_path: str) -> "Cheatcodes":
        with open(file_path, "r") as f:
            return Cheatcodes.from_dict(json.load(f))


class Item(PyEnum):
    ERROR: str = "error"
    EVENT: str = "event"
    ENUM: str = "enum"
    STRUCT: str = "struct"
    FUNCTION: str = "function"


class ItemOrder:
    _list: list[Item]

    def __init__(self, list: list[Item]) -> None:
        assert len(list) <= len(Item), "list must not contain more items than Item"
        assert len(list) == len(set(list)), "list must not contain duplicates"
        self._list = list
        pass

    def get_list(self) -> list[Item]:
        return self._list

    @staticmethod
    def default() -> "ItemOrder":
        return ItemOrder(
            [
                Item.ERROR,
                Item.EVENT,
                Item.ENUM,
                Item.STRUCT,
                Item.FUNCTION,
            ]
        )


class CheatcodesPrinter:
    buffer: str

    prelude: bool
    spdx_identifier: str
    solidity_requirement: str
    abicoder_v2: bool

    block_doc_style: bool

    indent_level: int
    _indent_str: str

    nl_str: str

    items_order: ItemOrder

    def __init__(
        self,
        buffer: str = "",
        prelude: bool = True,
        spdx_identifier: str = "UNLICENSED",
        solidity_requirement: str = "",
        abicoder_pragma: bool = False,
        block_doc_style: bool = False,
        indent_level: int = 0,
        indent_with: int | str = 4,
        nl_str: str = "\n",
        items_order: ItemOrder = ItemOrder.default(),
    ):
        self.prelude = prelude
        self.spdx_identifier = spdx_identifier
        self.solidity_requirement = solidity_requirement
        self.abicoder_v2 = abicoder_pragma
        self.block_doc_style = block_doc_style
        self.buffer = buffer
        self.indent_level = indent_level
        self.nl_str = nl_str

        if isinstance(indent_with, int):
            assert indent_with >= 0
            self._indent_str = " " * indent_with
        elif isinstance(indent_with, str):
            self._indent_str = indent_with
        else:
            assert False, "indent_with must be int or str"

        self.items_order = items_order

    def finish(self) -> str:
        ret = self.buffer.rstrip()
        self.buffer = ""
        return ret

    def p_contract(self, contract: Cheatcodes, name: str, inherits: str = ""):
        if self.prelude:
            self.p_prelude(contract)

        self._p_str("interface ")
        name = name.strip()
        if name != "":
            self._p_str(name)
            self._p_str(" ")
        if inherits != "":
            self._p_str("is ")
            self._p_str(inherits)
            self._p_str(" ")
        self._p_str("{")
        self._p_nl()
        self._with_indent(lambda: self._p_items(contract))
        self._p_str("}")
        self._p_nl()

    def _p_items(self, contract: Cheatcodes):
        for item in self.items_order.get_list():
            if item == Item.ERROR:
                self.p_errors(contract.errors)
            elif item == Item.EVENT:
                self.p_events(contract.events)
            elif item == Item.ENUM:
                self.p_enums(contract.enums)
            elif item == Item.STRUCT:
                self.p_structs(contract.structs)
            elif item == Item.FUNCTION:
                self.p_functions(contract.cheatcodes)
            else:
                assert False, f"unknown item {item}"

    def p_prelude(self, contract: Cheatcodes | None = None):
        self._p_str(f"// SPDX-License-Identifier: {self.spdx_identifier}")
        self._p_nl()

        if self.solidity_requirement != "":
            req = self.solidity_requirement
        elif contract and len(contract.errors) > 0:
            req = ">=0.8.4 <0.9.0"
        else:
            req = ">=0.6.0 <0.9.0"
        self._p_str(f"pragma solidity {req};")
        self._p_nl()

        if self.abicoder_v2:
            self._p_str("pragma experimental ABIEncoderV2;")
            self._p_nl()

        self._p_nl()

    def p_errors(self, errors: list[Error]):
        for error in errors:
            self._p_line(lambda: self.p_error(error))

    def p_error(self, error: Error):
        self._p_comment(error.description, doc=True)
        self._p_line(lambda: self._p_str(error.declaration))

    def p_events(self, events: list[Event]):
        for event in events:
            self._p_line(lambda: self.p_event(event))

    def p_event(self, event: Event):
        self._p_comment(event.description, doc=True)
        self._p_line(lambda: self._p_str(event.declaration))

    def p_enums(self, enums: list[Enum]):
        for enum in enums:
            self._p_line(lambda: self.p_enum(enum))

    def p_enum(self, enum: Enum):
        self._p_comment(enum.description, doc=True)
        self._p_line(lambda: self._p_str(f"enum {enum.name} {{"))
        self._with_indent(lambda: self.p_enum_variants(enum.variants))
        self._p_line(lambda: self._p_str("}"))

    def p_enum_variants(self, variants: list[EnumVariant]):
        for i, variant in enumerate(variants):
            self._p_indent()
            self._p_comment(variant.description)

            self._p_indent()
            self._p_str(variant.name)
            if i < len(variants) - 1:
                self._p_str(",")
            self._p_nl()

    def p_structs(self, structs: list[Struct]):
        for struct in structs:
            self._p_line(lambda: self.p_struct(struct))

    def p_struct(self, struct: Struct):
        self._p_comment(struct.description, doc=True)
        self._p_line(lambda: self._p_str(f"struct {struct.name} {{"))
        self._with_indent(lambda: self.p_struct_fields(struct.fields))
        self._p_line(lambda: self._p_str("}"))

    def p_struct_fields(self, fields: list[StructField]):
        for field in fields:
            self._p_line(lambda: self.p_struct_field(field))

    def p_struct_field(self, field: StructField):
        self._p_comment(field.description)
        self._p_indented(lambda: self._p_str(f"{field.ty} {field.name};"))

    def p_functions(self, cheatcodes: list[Cheatcode]):
        for cheatcode in cheatcodes:
            self._p_line(lambda: self.p_function(cheatcode.func))

    def p_function(self, func: Function):
        self._p_comment(func.description, doc=True)
        self._p_line(lambda: self._p_str(func.declaration))

    def _p_comment(self, s: str, doc: bool = False):
        s = s.strip()
        if s == "":
            return

        s = map(lambda line: line.lstrip(), s.split("\n"))
        if self.block_doc_style:
            self._p_str("/*")
            if doc:
                self._p_str("*")
            self._p_nl()
            for line in s:
                self._p_indent()
                self._p_str(" ")
                if doc:
                    self._p_str("* ")
                self._p_str(line)
                self._p_nl()
            self._p_indent()
            self._p_str(" */")
            self._p_nl()
        else:
            first_line = True
            for line in s:
                if not first_line:
                    self._p_indent()
                first_line = False

                if doc:
                    self._p_str("/// ")
                else:
                    self._p_str("// ")
                self._p_str(line)
                self._p_nl()

    def _with_indent(self, f: VoidFn):
        self._inc_indent()
        f()
        self._dec_indent()

    def _p_line(self, f: VoidFn):
        self._p_indent()
        f()
        self._p_nl()

    def _p_indented(self, f: VoidFn):
        self._p_indent()
        f()

    def _p_indent(self):
        for _ in range(self.indent_level):
            self._p_str(self._indent_str)

    def _p_nl(self):
        self._p_str(self.nl_str)

    def _p_str(self, txt: str):
        self.buffer += txt

    def _inc_indent(self):
        self.indent_level += 1

    def _dec_indent(self):
        self.indent_level -= 1


if __name__ == "__main__":
    main()

================
File: lib/forge-std/src/interfaces/IERC1155.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2;

import "./IERC165.sol";

/// @title ERC-1155 Multi Token Standard
/// @dev See https://eips.ethereum.org/EIPS/eip-1155
/// Note: The ERC-165 identifier for this interface is 0xd9b67a26.
interface IERC1155 is IERC165 {
    /// @dev
    /// - Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see "Safe Transfer Rules" section of the standard).
    /// - The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).
    /// - The `_from` argument MUST be the address of the holder whose balance is decreased.
    /// - The `_to` argument MUST be the address of the recipient whose balance is increased.
    /// - The `_id` argument MUST be the token type being transferred.
    /// - The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.
    /// - When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).
    /// - When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).
    event TransferSingle(
        address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value
    );

    /// @dev
    /// - Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see "Safe Transfer Rules" section of the standard).
    /// - The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).
    /// - The `_from` argument MUST be the address of the holder whose balance is decreased.
    /// - The `_to` argument MUST be the address of the recipient whose balance is increased.
    /// - The `_ids` argument MUST be the list of tokens being transferred.
    /// - The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by.
    /// - When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).
    /// - When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).
    event TransferBatch(
        address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values
    );

    /// @dev MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absence of an event assumes disabled).
    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);

    /// @dev MUST emit when the URI is updated for a token ID. URIs are defined in RFC 3986.
    /// The URI MUST point to a JSON file that conforms to the "ERC-1155 Metadata URI JSON Schema".
    event URI(string _value, uint256 indexed _id);

    /// @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).
    /// @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see "Approval" section of the standard).
    /// - MUST revert if `_to` is the zero address.
    /// - MUST revert if balance of holder for token `_id` is lower than the `_value` sent.
    /// - MUST revert on any other error.
    /// - MUST emit the `TransferSingle` event to reflect the balance change (see "Safe Transfer Rules" section of the standard).
    /// - After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see "Safe Transfer Rules" section of the standard).
    /// @param _from Source address
    /// @param _to Target address
    /// @param _id ID of the token type
    /// @param _value Transfer amount
    /// @param _data Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;

    /// @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).
    /// @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see "Approval" section of the standard).
    /// - MUST revert if `_to` is the zero address.
    /// - MUST revert if length of `_ids` is not the same as length of `_values`.
    /// - MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.
    /// - MUST revert on any other error.
    /// - MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see "Safe Transfer Rules" section of the standard).
    /// - Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).
    /// - After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see "Safe Transfer Rules" section of the standard).
    /// @param _from Source address
    /// @param _to Target address
    /// @param _ids IDs of each token type (order and length must match _values array)
    /// @param _values Transfer amounts per token type (order and length must match _ids array)
    /// @param _data Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`
    function safeBatchTransferFrom(
        address _from,
        address _to,
        uint256[] calldata _ids,
        uint256[] calldata _values,
        bytes calldata _data
    ) external;

    /// @notice Get the balance of an account's tokens.
    /// @param _owner The address of the token holder
    /// @param _id ID of the token
    /// @return The _owner's balance of the token type requested
    function balanceOf(address _owner, uint256 _id) external view returns (uint256);

    /// @notice Get the balance of multiple account/token pairs
    /// @param _owners The addresses of the token holders
    /// @param _ids ID of the tokens
    /// @return The _owner's balance of the token types requested (i.e. balance for each (owner, id) pair)
    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)
        external
        view
        returns (uint256[] memory);

    /// @notice Enable or disable approval for a third party ("operator") to manage all of the caller's tokens.
    /// @dev MUST emit the ApprovalForAll event on success.
    /// @param _operator Address to add to the set of authorized operators
    /// @param _approved True if the operator is approved, false to revoke approval
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice Queries the approval status of an operator for a given owner.
    /// @param _owner The owner of the tokens
    /// @param _operator Address of authorized operator
    /// @return True if the operator is approved, false if not
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);
}

================
File: lib/forge-std/src/interfaces/IERC165.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2;

interface IERC165 {
    /// @notice Query if a contract implements an interface
    /// @param interfaceID The interface identifier, as specified in ERC-165
    /// @dev Interface identification is specified in ERC-165. This function
    /// uses less than 30,000 gas.
    /// @return `true` if the contract implements `interfaceID` and
    /// `interfaceID` is not 0xffffffff, `false` otherwise
    function supportsInterface(bytes4 interfaceID) external view returns (bool);
}

================
File: lib/forge-std/src/interfaces/IERC20.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2;

/// @dev Interface of the ERC20 standard as defined in the EIP.
/// @dev This includes the optional name, symbol, and decimals metadata.
interface IERC20 {
    /// @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).
    event Transfer(address indexed from, address indexed to, uint256 value);

    /// @dev Emitted when the allowance of a `spender` for an `owner` is set, where `value`
    /// is the new allowance.
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /// @notice Returns the amount of tokens in existence.
    function totalSupply() external view returns (uint256);

    /// @notice Returns the amount of tokens owned by `account`.
    function balanceOf(address account) external view returns (uint256);

    /// @notice Moves `amount` tokens from the caller's account to `to`.
    function transfer(address to, uint256 amount) external returns (bool);

    /// @notice Returns the remaining number of tokens that `spender` is allowed
    /// to spend on behalf of `owner`
    function allowance(address owner, address spender) external view returns (uint256);

    /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.
    /// @dev Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
    function approve(address spender, uint256 amount) external returns (bool);

    /// @notice Moves `amount` tokens from `from` to `to` using the allowance mechanism.
    /// `amount` is then deducted from the caller's allowance.
    function transferFrom(address from, address to, uint256 amount) external returns (bool);

    /// @notice Returns the name of the token.
    function name() external view returns (string memory);

    /// @notice Returns the symbol of the token.
    function symbol() external view returns (string memory);

    /// @notice Returns the decimals places of the token.
    function decimals() external view returns (uint8);
}

================
File: lib/forge-std/src/interfaces/IERC4626.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2;

import "./IERC20.sol";

/// @dev Interface of the ERC4626 "Tokenized Vault Standard", as defined in
/// https://eips.ethereum.org/EIPS/eip-4626
interface IERC4626 is IERC20 {
    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);

    event Withdraw(
        address indexed sender, address indexed receiver, address indexed owner, uint256 assets, uint256 shares
    );

    /// @notice Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.
    /// @dev
    /// - MUST be an ERC-20 token contract.
    /// - MUST NOT revert.
    function asset() external view returns (address assetTokenAddress);

    /// @notice Returns the total amount of the underlying asset that is “managed” by Vault.
    /// @dev
    /// - SHOULD include any compounding that occurs from yield.
    /// - MUST be inclusive of any fees that are charged against assets in the Vault.
    /// - MUST NOT revert.
    function totalAssets() external view returns (uint256 totalManagedAssets);

    /// @notice Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal
    /// scenario where all the conditions are met.
    /// @dev
    /// - MUST NOT be inclusive of any fees that are charged against assets in the Vault.
    /// - MUST NOT show any variations depending on the caller.
    /// - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.
    /// - MUST NOT revert.
    ///
    /// NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the
    /// “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and
    /// from.
    function convertToShares(uint256 assets) external view returns (uint256 shares);

    /// @notice Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal
    /// scenario where all the conditions are met.
    /// @dev
    /// - MUST NOT be inclusive of any fees that are charged against assets in the Vault.
    /// - MUST NOT show any variations depending on the caller.
    /// - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.
    /// - MUST NOT revert.
    ///
    /// NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the
    /// “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and
    /// from.
    function convertToAssets(uint256 shares) external view returns (uint256 assets);

    /// @notice Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,
    /// through a deposit call.
    /// @dev
    /// - MUST return a limited value if receiver is subject to some deposit limit.
    /// - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.
    /// - MUST NOT revert.
    function maxDeposit(address receiver) external view returns (uint256 maxAssets);

    /// @notice Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given
    /// current on-chain conditions.
    /// @dev
    /// - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit
    ///   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called
    ///   in the same transaction.
    /// - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the
    ///   deposit would be accepted, regardless if the user has enough tokens approved, etc.
    /// - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.
    /// - MUST NOT revert.
    ///
    /// NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in
    /// share price or some other type of condition, meaning the depositor will lose assets by depositing.
    function previewDeposit(uint256 assets) external view returns (uint256 shares);

    /// @notice Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.
    /// @dev
    /// - MUST emit the Deposit event.
    /// - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the
    ///   deposit execution, and are accounted for during deposit.
    /// - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not
    ///   approving enough underlying tokens to the Vault contract, etc).
    ///
    /// NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.
    function deposit(uint256 assets, address receiver) external returns (uint256 shares);

    /// @notice Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.
    /// @dev
    /// - MUST return a limited value if receiver is subject to some mint limit.
    /// - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.
    /// - MUST NOT revert.
    function maxMint(address receiver) external view returns (uint256 maxShares);

    /// @notice Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given
    /// current on-chain conditions.
    /// @dev
    /// - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call
    ///   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the
    ///   same transaction.
    /// - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint
    ///   would be accepted, regardless if the user has enough tokens approved, etc.
    /// - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.
    /// - MUST NOT revert.
    ///
    /// NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in
    /// share price or some other type of condition, meaning the depositor will lose assets by minting.
    function previewMint(uint256 shares) external view returns (uint256 assets);

    /// @notice Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.
    /// @dev
    /// - MUST emit the Deposit event.
    /// - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint
    ///   execution, and are accounted for during mint.
    /// - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not
    ///   approving enough underlying tokens to the Vault contract, etc).
    ///
    /// NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.
    function mint(uint256 shares, address receiver) external returns (uint256 assets);

    /// @notice Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the
    /// Vault, through a withdrawal call.
    /// @dev
    /// - MUST return a limited value if owner is subject to some withdrawal limit or timelock.
    /// - MUST NOT revert.
    function maxWithdraw(address owner) external view returns (uint256 maxAssets);

    /// @notice Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,
    /// given current on-chain conditions.
    /// @dev
    /// - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw
    ///   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if
    ///   called
    ///   in the same transaction.
    /// - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though
    ///   the withdrawal would be accepted, regardless if the user has enough shares, etc.
    /// - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.
    /// - MUST NOT revert.
    ///
    /// NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in
    /// share price or some other type of condition, meaning the depositor will lose assets by depositing.
    function previewWithdraw(uint256 assets) external view returns (uint256 shares);

    /// @notice Burns shares from owner and sends exactly assets of underlying tokens to receiver.
    /// @dev
    /// - MUST emit the Withdraw event.
    /// - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the
    ///   withdraw execution, and are accounted for during withdrawal.
    /// - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner
    ///   not having enough shares, etc).
    ///
    /// Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.
    /// Those methods should be performed separately.
    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);

    /// @notice Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,
    /// through a redeem call.
    /// @dev
    /// - MUST return a limited value if owner is subject to some withdrawal limit or timelock.
    /// - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.
    /// - MUST NOT revert.
    function maxRedeem(address owner) external view returns (uint256 maxShares);

    /// @notice Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,
    /// given current on-chain conditions.
    /// @dev
    /// - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call
    ///   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the
    ///   same transaction.
    /// - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the
    ///   redemption would be accepted, regardless if the user has enough shares, etc.
    /// - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.
    /// - MUST NOT revert.
    ///
    /// NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in
    /// share price or some other type of condition, meaning the depositor will lose assets by redeeming.
    function previewRedeem(uint256 shares) external view returns (uint256 assets);

    /// @notice Burns exactly shares from owner and sends assets of underlying tokens to receiver.
    /// @dev
    /// - MUST emit the Withdraw event.
    /// - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the
    ///   redeem execution, and are accounted for during redeem.
    /// - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner
    ///   not having enough shares, etc).
    ///
    /// NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.
    /// Those methods should be performed separately.
    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);
}

================
File: lib/forge-std/src/interfaces/IERC721.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2;

import "./IERC165.sol";

/// @title ERC-721 Non-Fungible Token Standard
/// @dev See https://eips.ethereum.org/EIPS/eip-721
/// Note: the ERC-165 identifier for this interface is 0x80ac58cd.
interface IERC721 is IERC165 {
    /// @dev This emits when ownership of any NFT changes by any mechanism.
    /// This event emits when NFTs are created (`from` == 0) and destroyed
    /// (`to` == 0). Exception: during contract creation, any number of NFTs
    /// may be created and assigned without emitting Transfer. At the time of
    /// any transfer, the approved address for that NFT (if any) is reset to none.
    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);

    /// @dev This emits when the approved address for an NFT is changed or
    /// reaffirmed. The zero address indicates there is no approved address.
    /// When a Transfer event emits, this also indicates that the approved
    /// address for that NFT (if any) is reset to none.
    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);

    /// @dev This emits when an operator is enabled or disabled for an owner.
    /// The operator can manage all NFTs of the owner.
    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);

    /// @notice Count all NFTs assigned to an owner
    /// @dev NFTs assigned to the zero address are considered invalid, and this
    /// function throws for queries about the zero address.
    /// @param _owner An address for whom to query the balance
    /// @return The number of NFTs owned by `_owner`, possibly zero
    function balanceOf(address _owner) external view returns (uint256);

    /// @notice Find the owner of an NFT
    /// @dev NFTs assigned to zero address are considered invalid, and queries
    /// about them do throw.
    /// @param _tokenId The identifier for an NFT
    /// @return The address of the owner of the NFT
    function ownerOf(uint256 _tokenId) external view returns (address);

    /// @notice Transfers the ownership of an NFT from one address to another address
    /// @dev Throws unless `msg.sender` is the current owner, an authorized
    /// operator, or the approved address for this NFT. Throws if `_from` is
    /// not the current owner. Throws if `_to` is the zero address. Throws if
    /// `_tokenId` is not a valid NFT. When transfer is complete, this function
    /// checks if `_to` is a smart contract (code size > 0). If so, it calls
    /// `onERC721Received` on `_to` and throws if the return value is not
    /// `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`.
    /// @param _from The current owner of the NFT
    /// @param _to The new owner
    /// @param _tokenId The NFT to transfer
    /// @param data Additional data with no specified format, sent in call to `_to`
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;

    /// @notice Transfers the ownership of an NFT from one address to another address
    /// @dev This works identically to the other function with an extra data parameter,
    /// except this function just sets data to "".
    /// @param _from The current owner of the NFT
    /// @param _to The new owner
    /// @param _tokenId The NFT to transfer
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;

    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE
    /// TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE
    /// THEY MAY BE PERMANENTLY LOST
    /// @dev Throws unless `msg.sender` is the current owner, an authorized
    /// operator, or the approved address for this NFT. Throws if `_from` is
    /// not the current owner. Throws if `_to` is the zero address. Throws if
    /// `_tokenId` is not a valid NFT.
    /// @param _from The current owner of the NFT
    /// @param _to The new owner
    /// @param _tokenId The NFT to transfer
    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;

    /// @notice Change or reaffirm the approved address for an NFT
    /// @dev The zero address indicates there is no approved address.
    /// Throws unless `msg.sender` is the current NFT owner, or an authorized
    /// operator of the current owner.
    /// @param _approved The new approved NFT controller
    /// @param _tokenId The NFT to approve
    function approve(address _approved, uint256 _tokenId) external payable;

    /// @notice Enable or disable approval for a third party ("operator") to manage
    /// all of `msg.sender`'s assets
    /// @dev Emits the ApprovalForAll event. The contract MUST allow
    /// multiple operators per owner.
    /// @param _operator Address to add to the set of authorized operators
    /// @param _approved True if the operator is approved, false to revoke approval
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice Get the approved address for a single NFT
    /// @dev Throws if `_tokenId` is not a valid NFT.
    /// @param _tokenId The NFT to find the approved address for
    /// @return The approved address for this NFT, or the zero address if there is none
    function getApproved(uint256 _tokenId) external view returns (address);

    /// @notice Query if an address is an authorized operator for another address
    /// @param _owner The address that owns the NFTs
    /// @param _operator The address that acts on behalf of the owner
    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);
}

/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.
interface IERC721TokenReceiver {
    /// @notice Handle the receipt of an NFT
    /// @dev The ERC721 smart contract calls this function on the recipient
    /// after a `transfer`. This function MAY throw to revert and reject the
    /// transfer. Return of other than the magic value MUST result in the
    /// transaction being reverted.
    /// Note: the contract address is always the message sender.
    /// @param _operator The address which called `safeTransferFrom` function
    /// @param _from The address which previously owned the token
    /// @param _tokenId The NFT identifier which is being transferred
    /// @param _data Additional data with no specified format
    /// @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
    ///  unless throwing
    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data)
        external
        returns (bytes4);
}

/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension
/// @dev See https://eips.ethereum.org/EIPS/eip-721
/// Note: the ERC-165 identifier for this interface is 0x5b5e139f.
interface IERC721Metadata is IERC721 {
    /// @notice A descriptive name for a collection of NFTs in this contract
    function name() external view returns (string memory _name);

    /// @notice An abbreviated name for NFTs in this contract
    function symbol() external view returns (string memory _symbol);

    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.
    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC
    /// 3986. The URI may point to a JSON file that conforms to the "ERC721
    /// Metadata JSON Schema".
    function tokenURI(uint256 _tokenId) external view returns (string memory);
}

/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
/// @dev See https://eips.ethereum.org/EIPS/eip-721
/// Note: the ERC-165 identifier for this interface is 0x780e9d63.
interface IERC721Enumerable is IERC721 {
    /// @notice Count NFTs tracked by this contract
    /// @return A count of valid NFTs tracked by this contract, where each one of
    /// them has an assigned and queryable owner not equal to the zero address
    function totalSupply() external view returns (uint256);

    /// @notice Enumerate valid NFTs
    /// @dev Throws if `_index` >= `totalSupply()`.
    /// @param _index A counter less than `totalSupply()`
    /// @return The token identifier for the `_index`th NFT,
    /// (sort order not specified)
    function tokenByIndex(uint256 _index) external view returns (uint256);

    /// @notice Enumerate NFTs assigned to an owner
    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if
    /// `_owner` is the zero address, representing invalid NFTs.
    /// @param _owner An address where we are interested in NFTs owned by them
    /// @param _index A counter less than `balanceOf(_owner)`
    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,
    /// (sort order not specified)
    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);
}

================
File: lib/forge-std/src/interfaces/IMulticall3.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

pragma experimental ABIEncoderV2;

interface IMulticall3 {
    struct Call {
        address target;
        bytes callData;
    }

    struct Call3 {
        address target;
        bool allowFailure;
        bytes callData;
    }

    struct Call3Value {
        address target;
        bool allowFailure;
        uint256 value;
        bytes callData;
    }

    struct Result {
        bool success;
        bytes returnData;
    }

    function aggregate(Call[] calldata calls)
        external
        payable
        returns (uint256 blockNumber, bytes[] memory returnData);

    function aggregate3(Call3[] calldata calls) external payable returns (Result[] memory returnData);

    function aggregate3Value(Call3Value[] calldata calls) external payable returns (Result[] memory returnData);

    function blockAndAggregate(Call[] calldata calls)
        external
        payable
        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);

    function getBasefee() external view returns (uint256 basefee);

    function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash);

    function getBlockNumber() external view returns (uint256 blockNumber);

    function getChainId() external view returns (uint256 chainid);

    function getCurrentBlockCoinbase() external view returns (address coinbase);

    function getCurrentBlockDifficulty() external view returns (uint256 difficulty);

    function getCurrentBlockGasLimit() external view returns (uint256 gaslimit);

    function getCurrentBlockTimestamp() external view returns (uint256 timestamp);

    function getEthBalance(address addr) external view returns (uint256 balance);

    function getLastBlockHash() external view returns (bytes32 blockHash);

    function tryAggregate(bool requireSuccess, Call[] calldata calls)
        external
        payable
        returns (Result[] memory returnData);

    function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls)
        external
        payable
        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);
}

================
File: lib/forge-std/src/Base.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

import {StdStorage} from "./StdStorage.sol";
import {Vm, VmSafe} from "./Vm.sol";

abstract contract CommonBase {
    // Cheat code address, 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D.
    address internal constant VM_ADDRESS = address(uint160(uint256(keccak256("hevm cheat code"))));
    // console.sol and console2.sol work by executing a staticcall to this address.
    address internal constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;
    // Used when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.
    address internal constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;
    // Default address for tx.origin and msg.sender, 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38.
    address internal constant DEFAULT_SENDER = address(uint160(uint256(keccak256("foundry default caller"))));
    // Address of the test contract, deployed by the DEFAULT_SENDER.
    address internal constant DEFAULT_TEST_CONTRACT = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;
    // Deterministic deployment address of the Multicall3 contract.
    address internal constant MULTICALL3_ADDRESS = 0xcA11bde05977b3631167028862bE2a173976CA11;
    // The order of the secp256k1 curve.
    uint256 internal constant SECP256K1_ORDER =
        115792089237316195423570985008687907852837564279074904382605163141518161494337;

    uint256 internal constant UINT256_MAX =
        115792089237316195423570985008687907853269984665640564039457584007913129639935;

    Vm internal constant vm = Vm(VM_ADDRESS);
    StdStorage internal stdstore;
}

abstract contract TestBase is CommonBase {}

abstract contract ScriptBase is CommonBase {
    VmSafe internal constant vmSafe = VmSafe(VM_ADDRESS);
}

================
File: lib/forge-std/src/console.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

library console {
    address constant CONSOLE_ADDRESS =
        0x000000000000000000636F6e736F6c652e6c6f67;

    function _sendLogPayloadImplementation(bytes memory payload) internal view {
        address consoleAddress = CONSOLE_ADDRESS;
        /// @solidity memory-safe-assembly
        assembly {
            pop(
                staticcall(
                    gas(),
                    consoleAddress,
                    add(payload, 32),
                    mload(payload),
                    0,
                    0
                )
            )
        }
    }

    function _castToPure(
      function(bytes memory) internal view fnIn
    ) internal pure returns (function(bytes memory) pure fnOut) {
        assembly {
            fnOut := fnIn
        }
    }

    function _sendLogPayload(bytes memory payload) internal pure {
        _castToPure(_sendLogPayloadImplementation)(payload);
    }

    function log() internal pure {
        _sendLogPayload(abi.encodeWithSignature("log()"));
    }

    function logInt(int256 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(int256)", p0));
    }

    function logUint(uint256 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256)", p0));
    }

    function logString(string memory p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
    }

    function logBool(bool p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
    }

    function logAddress(address p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address)", p0));
    }

    function logBytes(bytes memory p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));
    }

    function logBytes1(bytes1 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));
    }

    function logBytes2(bytes2 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));
    }

    function logBytes3(bytes3 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));
    }

    function logBytes4(bytes4 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));
    }

    function logBytes5(bytes5 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));
    }

    function logBytes6(bytes6 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));
    }

    function logBytes7(bytes7 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));
    }

    function logBytes8(bytes8 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));
    }

    function logBytes9(bytes9 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));
    }

    function logBytes10(bytes10 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));
    }

    function logBytes11(bytes11 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));
    }

    function logBytes12(bytes12 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));
    }

    function logBytes13(bytes13 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));
    }

    function logBytes14(bytes14 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));
    }

    function logBytes15(bytes15 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));
    }

    function logBytes16(bytes16 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));
    }

    function logBytes17(bytes17 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));
    }

    function logBytes18(bytes18 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));
    }

    function logBytes19(bytes19 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));
    }

    function logBytes20(bytes20 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));
    }

    function logBytes21(bytes21 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));
    }

    function logBytes22(bytes22 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));
    }

    function logBytes23(bytes23 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));
    }

    function logBytes24(bytes24 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));
    }

    function logBytes25(bytes25 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));
    }

    function logBytes26(bytes26 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));
    }

    function logBytes27(bytes27 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));
    }

    function logBytes28(bytes28 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));
    }

    function logBytes29(bytes29 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));
    }

    function logBytes30(bytes30 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));
    }

    function logBytes31(bytes31 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));
    }

    function logBytes32(bytes32 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));
    }

    function log(uint256 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256)", p0));
    }

    function log(int256 p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(int256)", p0));
    }

    function log(string memory p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
    }

    function log(bool p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
    }

    function log(address p0) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address)", p0));
    }

    function log(uint256 p0, uint256 p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256)", p0, p1));
    }

    function log(uint256 p0, string memory p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string)", p0, p1));
    }

    function log(uint256 p0, bool p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool)", p0, p1));
    }

    function log(uint256 p0, address p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address)", p0, p1));
    }

    function log(string memory p0, uint256 p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256)", p0, p1));
    }

    function log(string memory p0, int256 p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,int256)", p0, p1));
    }

    function log(string memory p0, string memory p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
    }

    function log(string memory p0, bool p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));
    }

    function log(string memory p0, address p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));
    }

    function log(bool p0, uint256 p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256)", p0, p1));
    }

    function log(bool p0, string memory p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));
    }

    function log(bool p0, bool p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));
    }

    function log(bool p0, address p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));
    }

    function log(address p0, uint256 p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256)", p0, p1));
    }

    function log(address p0, string memory p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));
    }

    function log(address p0, bool p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));
    }

    function log(address p0, address p1) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));
    }

    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256)", p0, p1, p2));
    }

    function log(uint256 p0, uint256 p1, string memory p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string)", p0, p1, p2));
    }

    function log(uint256 p0, uint256 p1, bool p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool)", p0, p1, p2));
    }

    function log(uint256 p0, uint256 p1, address p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address)", p0, p1, p2));
    }

    function log(uint256 p0, string memory p1, uint256 p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256)", p0, p1, p2));
    }

    function log(uint256 p0, string memory p1, string memory p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string)", p0, p1, p2));
    }

    function log(uint256 p0, string memory p1, bool p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool)", p0, p1, p2));
    }

    function log(uint256 p0, string memory p1, address p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address)", p0, p1, p2));
    }

    function log(uint256 p0, bool p1, uint256 p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256)", p0, p1, p2));
    }

    function log(uint256 p0, bool p1, string memory p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string)", p0, p1, p2));
    }

    function log(uint256 p0, bool p1, bool p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool)", p0, p1, p2));
    }

    function log(uint256 p0, bool p1, address p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address)", p0, p1, p2));
    }

    function log(uint256 p0, address p1, uint256 p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256)", p0, p1, p2));
    }

    function log(uint256 p0, address p1, string memory p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string)", p0, p1, p2));
    }

    function log(uint256 p0, address p1, bool p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool)", p0, p1, p2));
    }

    function log(uint256 p0, address p1, address p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address)", p0, p1, p2));
    }

    function log(string memory p0, uint256 p1, uint256 p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256)", p0, p1, p2));
    }

    function log(string memory p0, uint256 p1, string memory p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string)", p0, p1, p2));
    }

    function log(string memory p0, uint256 p1, bool p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool)", p0, p1, p2));
    }

    function log(string memory p0, uint256 p1, address p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address)", p0, p1, p2));
    }

    function log(string memory p0, string memory p1, uint256 p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256)", p0, p1, p2));
    }

    function log(string memory p0, string memory p1, string memory p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));
    }

    function log(string memory p0, string memory p1, bool p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));
    }

    function log(string memory p0, string memory p1, address p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));
    }

    function log(string memory p0, bool p1, uint256 p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256)", p0, p1, p2));
    }

    function log(string memory p0, bool p1, string memory p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));
    }

    function log(string memory p0, bool p1, bool p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));
    }

    function log(string memory p0, bool p1, address p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));
    }

    function log(string memory p0, address p1, uint256 p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256)", p0, p1, p2));
    }

    function log(string memory p0, address p1, string memory p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));
    }

    function log(string memory p0, address p1, bool p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));
    }

    function log(string memory p0, address p1, address p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));
    }

    function log(bool p0, uint256 p1, uint256 p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256)", p0, p1, p2));
    }

    function log(bool p0, uint256 p1, string memory p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string)", p0, p1, p2));
    }

    function log(bool p0, uint256 p1, bool p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool)", p0, p1, p2));
    }

    function log(bool p0, uint256 p1, address p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address)", p0, p1, p2));
    }

    function log(bool p0, string memory p1, uint256 p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256)", p0, p1, p2));
    }

    function log(bool p0, string memory p1, string memory p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));
    }

    function log(bool p0, string memory p1, bool p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));
    }

    function log(bool p0, string memory p1, address p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));
    }

    function log(bool p0, bool p1, uint256 p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256)", p0, p1, p2));
    }

    function log(bool p0, bool p1, string memory p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));
    }

    function log(bool p0, bool p1, bool p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));
    }

    function log(bool p0, bool p1, address p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));
    }

    function log(bool p0, address p1, uint256 p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256)", p0, p1, p2));
    }

    function log(bool p0, address p1, string memory p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));
    }

    function log(bool p0, address p1, bool p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));
    }

    function log(bool p0, address p1, address p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));
    }

    function log(address p0, uint256 p1, uint256 p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256)", p0, p1, p2));
    }

    function log(address p0, uint256 p1, string memory p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string)", p0, p1, p2));
    }

    function log(address p0, uint256 p1, bool p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool)", p0, p1, p2));
    }

    function log(address p0, uint256 p1, address p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address)", p0, p1, p2));
    }

    function log(address p0, string memory p1, uint256 p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256)", p0, p1, p2));
    }

    function log(address p0, string memory p1, string memory p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));
    }

    function log(address p0, string memory p1, bool p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));
    }

    function log(address p0, string memory p1, address p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));
    }

    function log(address p0, bool p1, uint256 p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256)", p0, p1, p2));
    }

    function log(address p0, bool p1, string memory p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));
    }

    function log(address p0, bool p1, bool p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));
    }

    function log(address p0, bool p1, address p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));
    }

    function log(address p0, address p1, uint256 p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256)", p0, p1, p2));
    }

    function log(address p0, address p1, string memory p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));
    }

    function log(address p0, address p1, bool p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));
    }

    function log(address p0, address p1, address p2) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));
    }

    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,uint256)", p0, p1, p2, p3));
    }

    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,string)", p0, p1, p2, p3));
    }

    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,bool)", p0, p1, p2, p3));
    }

    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,address)", p0, p1, p2, p3));
    }

    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,uint256)", p0, p1, p2, p3));
    }

    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,string)", p0, p1, p2, p3));
    }

    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,bool)", p0, p1, p2, p3));
    }

    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,address)", p0, p1, p2, p3));
    }

    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,uint256)", p0, p1, p2, p3));
    }

    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,string)", p0, p1, p2, p3));
    }

    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,bool)", p0, p1, p2, p3));
    }

    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,address)", p0, p1, p2, p3));
    }

    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,uint256)", p0, p1, p2, p3));
    }

    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,string)", p0, p1, p2, p3));
    }

    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,bool)", p0, p1, p2, p3));
    }

    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,address)", p0, p1, p2, p3));
    }

    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,uint256)", p0, p1, p2, p3));
    }

    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,string)", p0, p1, p2, p3));
    }

    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,bool)", p0, p1, p2, p3));
    }

    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,address)", p0, p1, p2, p3));
    }

    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,uint256)", p0, p1, p2, p3));
    }

    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,string)", p0, p1, p2, p3));
    }

    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,bool)", p0, p1, p2, p3));
    }

    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,address)", p0, p1, p2, p3));
    }

    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool,uint256)", p0, p1, p2, p3));
    }

    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool,string)", p0, p1, p2, p3));
    }

    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool,bool)", p0, p1, p2, p3));
    }

    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool,address)", p0, p1, p2, p3));
    }

    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,uint256)", p0, p1, p2, p3));
    }

    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,string)", p0, p1, p2, p3));
    }

    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,bool)", p0, p1, p2, p3));
    }

    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,address)", p0, p1, p2, p3));
    }

    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,uint256)", p0, p1, p2, p3));
    }

    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,string)", p0, p1, p2, p3));
    }

    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,bool)", p0, p1, p2, p3));
    }

    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,address)", p0, p1, p2, p3));
    }

    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string,uint256)", p0, p1, p2, p3));
    }

    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string,string)", p0, p1, p2, p3));
    }

    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string,bool)", p0, p1, p2, p3));
    }

    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string,address)", p0, p1, p2, p3));
    }

    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool,uint256)", p0, p1, p2, p3));
    }

    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool,string)", p0, p1, p2, p3));
    }

    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool,bool)", p0, p1, p2, p3));
    }

    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool,address)", p0, p1, p2, p3));
    }

    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,uint256)", p0, p1, p2, p3));
    }

    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,string)", p0, p1, p2, p3));
    }

    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,bool)", p0, p1, p2, p3));
    }

    function log(uint256 p0, bool p1, address p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,address)", p0, p1, p2, p3));
    }

    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,uint256)", p0, p1, p2, p3));
    }

    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,string)", p0, p1, p2, p3));
    }

    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,bool)", p0, p1, p2, p3));
    }

    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,address)", p0, p1, p2, p3));
    }

    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,uint256)", p0, p1, p2, p3));
    }

    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,string)", p0, p1, p2, p3));
    }

    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,bool)", p0, p1, p2, p3));
    }

    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,address)", p0, p1, p2, p3));
    }

    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,uint256)", p0, p1, p2, p3));
    }

    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,string)", p0, p1, p2, p3));
    }

    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,bool)", p0, p1, p2, p3));
    }

    function log(uint256 p0, address p1, bool p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,address)", p0, p1, p2, p3));
    }

    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,uint256)", p0, p1, p2, p3));
    }

    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,string)", p0, p1, p2, p3));
    }

    function log(uint256 p0, address p1, address p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,bool)", p0, p1, p2, p3));
    }

    function log(uint256 p0, address p1, address p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,address)", p0, p1, p2, p3));
    }

    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,uint256)", p0, p1, p2, p3));
    }

    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,string)", p0, p1, p2, p3));
    }

    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,bool)", p0, p1, p2, p3));
    }

    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,address)", p0, p1, p2, p3));
    }

    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,uint256)", p0, p1, p2, p3));
    }

    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,string)", p0, p1, p2, p3));
    }

    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,bool)", p0, p1, p2, p3));
    }

    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,address)", p0, p1, p2, p3));
    }

    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool,uint256)", p0, p1, p2, p3));
    }

    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool,string)", p0, p1, p2, p3));
    }

    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool,bool)", p0, p1, p2, p3));
    }

    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool,address)", p0, p1, p2, p3));
    }

    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,uint256)", p0, p1, p2, p3));
    }

    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,string)", p0, p1, p2, p3));
    }

    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,bool)", p0, p1, p2, p3));
    }

    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,address)", p0, p1, p2, p3));
    }

    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,uint256)", p0, p1, p2, p3));
    }

    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,string)", p0, p1, p2, p3));
    }

    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,bool)", p0, p1, p2, p3));
    }

    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,address)", p0, p1, p2, p3));
    }

    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint256)", p0, p1, p2, p3));
    }

    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));
    }

    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));
    }

    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));
    }

    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint256)", p0, p1, p2, p3));
    }

    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));
    }

    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));
    }

    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));
    }

    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint256)", p0, p1, p2, p3));
    }

    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));
    }

    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));
    }

    function log(string memory p0, string memory p1, address p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));
    }

    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256,uint256)", p0, p1, p2, p3));
    }

    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256,string)", p0, p1, p2, p3));
    }

    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256,bool)", p0, p1, p2, p3));
    }

    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256,address)", p0, p1, p2, p3));
    }

    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint256)", p0, p1, p2, p3));
    }

    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));
    }

    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));
    }

    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));
    }

    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint256)", p0, p1, p2, p3));
    }

    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));
    }

    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));
    }

    function log(string memory p0, bool p1, bool p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));
    }

    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint256)", p0, p1, p2, p3));
    }

    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));
    }

    function log(string memory p0, bool p1, address p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));
    }

    function log(string memory p0, bool p1, address p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));
    }

    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,uint256)", p0, p1, p2, p3));
    }

    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,string)", p0, p1, p2, p3));
    }

    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,bool)", p0, p1, p2, p3));
    }

    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,address)", p0, p1, p2, p3));
    }

    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint256)", p0, p1, p2, p3));
    }

    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));
    }

    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));
    }

    function log(string memory p0, address p1, string memory p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));
    }

    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint256)", p0, p1, p2, p3));
    }

    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));
    }

    function log(string memory p0, address p1, bool p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));
    }

    function log(string memory p0, address p1, bool p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));
    }

    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint256)", p0, p1, p2, p3));
    }

    function log(string memory p0, address p1, address p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));
    }

    function log(string memory p0, address p1, address p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));
    }

    function log(string memory p0, address p1, address p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));
    }

    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,uint256)", p0, p1, p2, p3));
    }

    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,string)", p0, p1, p2, p3));
    }

    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,bool)", p0, p1, p2, p3));
    }

    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,address)", p0, p1, p2, p3));
    }

    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string,uint256)", p0, p1, p2, p3));
    }

    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string,string)", p0, p1, p2, p3));
    }

    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string,bool)", p0, p1, p2, p3));
    }

    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string,address)", p0, p1, p2, p3));
    }

    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool,uint256)", p0, p1, p2, p3));
    }

    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool,string)", p0, p1, p2, p3));
    }

    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool,bool)", p0, p1, p2, p3));
    }

    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool,address)", p0, p1, p2, p3));
    }

    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,uint256)", p0, p1, p2, p3));
    }

    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,string)", p0, p1, p2, p3));
    }

    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,bool)", p0, p1, p2, p3));
    }

    function log(bool p0, uint256 p1, address p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,address)", p0, p1, p2, p3));
    }

    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256,uint256)", p0, p1, p2, p3));
    }

    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256,string)", p0, p1, p2, p3));
    }

    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256,bool)", p0, p1, p2, p3));
    }

    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256,address)", p0, p1, p2, p3));
    }

    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint256)", p0, p1, p2, p3));
    }

    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));
    }

    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));
    }

    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));
    }

    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint256)", p0, p1, p2, p3));
    }

    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));
    }

    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));
    }

    function log(bool p0, string memory p1, bool p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));
    }

    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint256)", p0, p1, p2, p3));
    }

    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));
    }

    function log(bool p0, string memory p1, address p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));
    }

    function log(bool p0, string memory p1, address p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));
    }

    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256,uint256)", p0, p1, p2, p3));
    }

    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256,string)", p0, p1, p2, p3));
    }

    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256,bool)", p0, p1, p2, p3));
    }

    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256,address)", p0, p1, p2, p3));
    }

    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint256)", p0, p1, p2, p3));
    }

    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));
    }

    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));
    }

    function log(bool p0, bool p1, string memory p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));
    }

    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint256)", p0, p1, p2, p3));
    }

    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));
    }

    function log(bool p0, bool p1, bool p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));
    }

    function log(bool p0, bool p1, bool p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));
    }

    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint256)", p0, p1, p2, p3));
    }

    function log(bool p0, bool p1, address p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));
    }

    function log(bool p0, bool p1, address p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));
    }

    function log(bool p0, bool p1, address p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));
    }

    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,uint256)", p0, p1, p2, p3));
    }

    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,string)", p0, p1, p2, p3));
    }

    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,bool)", p0, p1, p2, p3));
    }

    function log(bool p0, address p1, uint256 p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,address)", p0, p1, p2, p3));
    }

    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint256)", p0, p1, p2, p3));
    }

    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));
    }

    function log(bool p0, address p1, string memory p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));
    }

    function log(bool p0, address p1, string memory p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));
    }

    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint256)", p0, p1, p2, p3));
    }

    function log(bool p0, address p1, bool p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));
    }

    function log(bool p0, address p1, bool p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));
    }

    function log(bool p0, address p1, bool p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));
    }

    function log(bool p0, address p1, address p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint256)", p0, p1, p2, p3));
    }

    function log(bool p0, address p1, address p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));
    }

    function log(bool p0, address p1, address p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));
    }

    function log(bool p0, address p1, address p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));
    }

    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,uint256)", p0, p1, p2, p3));
    }

    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,string)", p0, p1, p2, p3));
    }

    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,bool)", p0, p1, p2, p3));
    }

    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,address)", p0, p1, p2, p3));
    }

    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,uint256)", p0, p1, p2, p3));
    }

    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,string)", p0, p1, p2, p3));
    }

    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,bool)", p0, p1, p2, p3));
    }

    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,address)", p0, p1, p2, p3));
    }

    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,uint256)", p0, p1, p2, p3));
    }

    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,string)", p0, p1, p2, p3));
    }

    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,bool)", p0, p1, p2, p3));
    }

    function log(address p0, uint256 p1, bool p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,address)", p0, p1, p2, p3));
    }

    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,uint256)", p0, p1, p2, p3));
    }

    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,string)", p0, p1, p2, p3));
    }

    function log(address p0, uint256 p1, address p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,bool)", p0, p1, p2, p3));
    }

    function log(address p0, uint256 p1, address p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,address)", p0, p1, p2, p3));
    }

    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,uint256)", p0, p1, p2, p3));
    }

    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,string)", p0, p1, p2, p3));
    }

    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,bool)", p0, p1, p2, p3));
    }

    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,address)", p0, p1, p2, p3));
    }

    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint256)", p0, p1, p2, p3));
    }

    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));
    }

    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));
    }

    function log(address p0, string memory p1, string memory p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));
    }

    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint256)", p0, p1, p2, p3));
    }

    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));
    }

    function log(address p0, string memory p1, bool p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));
    }

    function log(address p0, string memory p1, bool p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));
    }

    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint256)", p0, p1, p2, p3));
    }

    function log(address p0, string memory p1, address p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));
    }

    function log(address p0, string memory p1, address p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));
    }

    function log(address p0, string memory p1, address p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));
    }

    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,uint256)", p0, p1, p2, p3));
    }

    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,string)", p0, p1, p2, p3));
    }

    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,bool)", p0, p1, p2, p3));
    }

    function log(address p0, bool p1, uint256 p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,address)", p0, p1, p2, p3));
    }

    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint256)", p0, p1, p2, p3));
    }

    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));
    }

    function log(address p0, bool p1, string memory p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));
    }

    function log(address p0, bool p1, string memory p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));
    }

    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint256)", p0, p1, p2, p3));
    }

    function log(address p0, bool p1, bool p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));
    }

    function log(address p0, bool p1, bool p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));
    }

    function log(address p0, bool p1, bool p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));
    }

    function log(address p0, bool p1, address p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint256)", p0, p1, p2, p3));
    }

    function log(address p0, bool p1, address p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));
    }

    function log(address p0, bool p1, address p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));
    }

    function log(address p0, bool p1, address p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));
    }

    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,uint256)", p0, p1, p2, p3));
    }

    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,string)", p0, p1, p2, p3));
    }

    function log(address p0, address p1, uint256 p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,bool)", p0, p1, p2, p3));
    }

    function log(address p0, address p1, uint256 p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,address)", p0, p1, p2, p3));
    }

    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint256)", p0, p1, p2, p3));
    }

    function log(address p0, address p1, string memory p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));
    }

    function log(address p0, address p1, string memory p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));
    }

    function log(address p0, address p1, string memory p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));
    }

    function log(address p0, address p1, bool p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint256)", p0, p1, p2, p3));
    }

    function log(address p0, address p1, bool p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));
    }

    function log(address p0, address p1, bool p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));
    }

    function log(address p0, address p1, bool p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));
    }

    function log(address p0, address p1, address p2, uint256 p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint256)", p0, p1, p2, p3));
    }

    function log(address p0, address p1, address p2, string memory p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));
    }

    function log(address p0, address p1, address p2, bool p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));
    }

    function log(address p0, address p1, address p2, address p3) internal pure {
        _sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));
    }
}

================
File: lib/forge-std/src/console2.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

import {console as console2} from "./console.sol";

================
File: lib/forge-std/src/safeconsole.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

/// @author philogy <https://github.com/philogy>
/// @dev Code generated automatically by script.
library safeconsole {
    uint256 constant CONSOLE_ADDR = 0x000000000000000000000000000000000000000000636F6e736F6c652e6c6f67;

    // Credit to [0age](https://twitter.com/z0age/status/1654922202930888704) and [0xdapper](https://github.com/foundry-rs/forge-std/pull/374)
    // for the view-to-pure log trick.
    function _sendLogPayload(uint256 offset, uint256 size) private pure {
        function(uint256, uint256) internal view fnIn = _sendLogPayloadView;
        function(uint256, uint256) internal pure pureSendLogPayload;
        /// @solidity memory-safe-assembly
        assembly {
            pureSendLogPayload := fnIn
        }
        pureSendLogPayload(offset, size);
    }

    function _sendLogPayloadView(uint256 offset, uint256 size) private view {
        /// @solidity memory-safe-assembly
        assembly {
            pop(staticcall(gas(), CONSOLE_ADDR, offset, size, 0x0, 0x0))
        }
    }

    function _memcopy(uint256 fromOffset, uint256 toOffset, uint256 length) private pure {
        function(uint256, uint256, uint256) internal view fnIn = _memcopyView;
        function(uint256, uint256, uint256) internal pure pureMemcopy;
        /// @solidity memory-safe-assembly
        assembly {
            pureMemcopy := fnIn
        }
        pureMemcopy(fromOffset, toOffset, length);
    }

    function _memcopyView(uint256 fromOffset, uint256 toOffset, uint256 length) private view {
        /// @solidity memory-safe-assembly
        assembly {
            pop(staticcall(gas(), 0x4, fromOffset, length, toOffset, length))
        }
    }

    function logMemory(uint256 offset, uint256 length) internal pure {
        if (offset >= 0x60) {
            // Sufficient memory before slice to prepare call header.
            bytes32 m0;
            bytes32 m1;
            bytes32 m2;
            /// @solidity memory-safe-assembly
            assembly {
                m0 := mload(sub(offset, 0x60))
                m1 := mload(sub(offset, 0x40))
                m2 := mload(sub(offset, 0x20))
                // Selector of `log(bytes)`.
                mstore(sub(offset, 0x60), 0x0be77f56)
                mstore(sub(offset, 0x40), 0x20)
                mstore(sub(offset, 0x20), length)
            }
            _sendLogPayload(offset - 0x44, length + 0x44);
            /// @solidity memory-safe-assembly
            assembly {
                mstore(sub(offset, 0x60), m0)
                mstore(sub(offset, 0x40), m1)
                mstore(sub(offset, 0x20), m2)
            }
        } else {
            // Insufficient space, so copy slice forward, add header and reverse.
            bytes32 m0;
            bytes32 m1;
            bytes32 m2;
            uint256 endOffset = offset + length;
            /// @solidity memory-safe-assembly
            assembly {
                m0 := mload(add(endOffset, 0x00))
                m1 := mload(add(endOffset, 0x20))
                m2 := mload(add(endOffset, 0x40))
            }
            _memcopy(offset, offset + 0x60, length);
            /// @solidity memory-safe-assembly
            assembly {
                // Selector of `log(bytes)`.
                mstore(add(offset, 0x00), 0x0be77f56)
                mstore(add(offset, 0x20), 0x20)
                mstore(add(offset, 0x40), length)
            }
            _sendLogPayload(offset + 0x1c, length + 0x44);
            _memcopy(offset + 0x60, offset, length);
            /// @solidity memory-safe-assembly
            assembly {
                mstore(add(endOffset, 0x00), m0)
                mstore(add(endOffset, 0x20), m1)
                mstore(add(endOffset, 0x40), m2)
            }
        }
    }

    function log(address p0) internal pure {
        bytes32 m0;
        bytes32 m1;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            // Selector of `log(address)`.
            mstore(0x00, 0x2c2ecbc2)
            mstore(0x20, p0)
        }
        _sendLogPayload(0x1c, 0x24);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
        }
    }

    function log(bool p0) internal pure {
        bytes32 m0;
        bytes32 m1;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            // Selector of `log(bool)`.
            mstore(0x00, 0x32458eed)
            mstore(0x20, p0)
        }
        _sendLogPayload(0x1c, 0x24);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
        }
    }

    function log(uint256 p0) internal pure {
        bytes32 m0;
        bytes32 m1;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            // Selector of `log(uint256)`.
            mstore(0x00, 0xf82c50f1)
            mstore(0x20, p0)
        }
        _sendLogPayload(0x1c, 0x24);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
        }
    }

    function log(bytes32 p0) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(string)`.
            mstore(0x00, 0x41304fac)
            mstore(0x20, 0x20)
            writeString(0x40, p0)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(address p0, address p1) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            // Selector of `log(address,address)`.
            mstore(0x00, 0xdaf0d4aa)
            mstore(0x20, p0)
            mstore(0x40, p1)
        }
        _sendLogPayload(0x1c, 0x44);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
        }
    }

    function log(address p0, bool p1) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            // Selector of `log(address,bool)`.
            mstore(0x00, 0x75b605d3)
            mstore(0x20, p0)
            mstore(0x40, p1)
        }
        _sendLogPayload(0x1c, 0x44);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
        }
    }

    function log(address p0, uint256 p1) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            // Selector of `log(address,uint256)`.
            mstore(0x00, 0x8309e8a8)
            mstore(0x20, p0)
            mstore(0x40, p1)
        }
        _sendLogPayload(0x1c, 0x44);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
        }
    }

    function log(address p0, bytes32 p1) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,string)`.
            mstore(0x00, 0x759f86bb)
            mstore(0x20, p0)
            mstore(0x40, 0x40)
            writeString(0x60, p1)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, address p1) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            // Selector of `log(bool,address)`.
            mstore(0x00, 0x853c4849)
            mstore(0x20, p0)
            mstore(0x40, p1)
        }
        _sendLogPayload(0x1c, 0x44);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
        }
    }

    function log(bool p0, bool p1) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            // Selector of `log(bool,bool)`.
            mstore(0x00, 0x2a110e83)
            mstore(0x20, p0)
            mstore(0x40, p1)
        }
        _sendLogPayload(0x1c, 0x44);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
        }
    }

    function log(bool p0, uint256 p1) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            // Selector of `log(bool,uint256)`.
            mstore(0x00, 0x399174d3)
            mstore(0x20, p0)
            mstore(0x40, p1)
        }
        _sendLogPayload(0x1c, 0x44);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
        }
    }

    function log(bool p0, bytes32 p1) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,string)`.
            mstore(0x00, 0x8feac525)
            mstore(0x20, p0)
            mstore(0x40, 0x40)
            writeString(0x60, p1)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, address p1) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            // Selector of `log(uint256,address)`.
            mstore(0x00, 0x69276c86)
            mstore(0x20, p0)
            mstore(0x40, p1)
        }
        _sendLogPayload(0x1c, 0x44);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
        }
    }

    function log(uint256 p0, bool p1) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            // Selector of `log(uint256,bool)`.
            mstore(0x00, 0x1c9d7eb3)
            mstore(0x20, p0)
            mstore(0x40, p1)
        }
        _sendLogPayload(0x1c, 0x44);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
        }
    }

    function log(uint256 p0, uint256 p1) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            // Selector of `log(uint256,uint256)`.
            mstore(0x00, 0xf666715a)
            mstore(0x20, p0)
            mstore(0x40, p1)
        }
        _sendLogPayload(0x1c, 0x44);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
        }
    }

    function log(uint256 p0, bytes32 p1) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,string)`.
            mstore(0x00, 0x643fd0df)
            mstore(0x20, p0)
            mstore(0x40, 0x40)
            writeString(0x60, p1)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bytes32 p0, address p1) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(string,address)`.
            mstore(0x00, 0x319af333)
            mstore(0x20, 0x40)
            mstore(0x40, p1)
            writeString(0x60, p0)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bytes32 p0, bool p1) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(string,bool)`.
            mstore(0x00, 0xc3b55635)
            mstore(0x20, 0x40)
            mstore(0x40, p1)
            writeString(0x60, p0)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bytes32 p0, uint256 p1) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(string,uint256)`.
            mstore(0x00, 0xb60e72cc)
            mstore(0x20, 0x40)
            mstore(0x40, p1)
            writeString(0x60, p0)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bytes32 p0, bytes32 p1) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,string)`.
            mstore(0x00, 0x4b5c4277)
            mstore(0x20, 0x40)
            mstore(0x40, 0x80)
            writeString(0x60, p0)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, address p1, address p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(address,address,address)`.
            mstore(0x00, 0x018c84c2)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(address p0, address p1, bool p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(address,address,bool)`.
            mstore(0x00, 0xf2a66286)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(address p0, address p1, uint256 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(address,address,uint256)`.
            mstore(0x00, 0x17fe6185)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(address p0, address p1, bytes32 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(address,address,string)`.
            mstore(0x00, 0x007150be)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x60)
            writeString(0x80, p2)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(address p0, bool p1, address p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(address,bool,address)`.
            mstore(0x00, 0xf11699ed)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(address p0, bool p1, bool p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(address,bool,bool)`.
            mstore(0x00, 0xeb830c92)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(address p0, bool p1, uint256 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(address,bool,uint256)`.
            mstore(0x00, 0x9c4f99fb)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(address p0, bool p1, bytes32 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(address,bool,string)`.
            mstore(0x00, 0x212255cc)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x60)
            writeString(0x80, p2)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(address p0, uint256 p1, address p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(address,uint256,address)`.
            mstore(0x00, 0x7bc0d848)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(address p0, uint256 p1, bool p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(address,uint256,bool)`.
            mstore(0x00, 0x678209a8)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(address p0, uint256 p1, uint256 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(address,uint256,uint256)`.
            mstore(0x00, 0xb69bcaf6)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(address p0, uint256 p1, bytes32 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(address,uint256,string)`.
            mstore(0x00, 0xa1f2e8aa)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x60)
            writeString(0x80, p2)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(address p0, bytes32 p1, address p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(address,string,address)`.
            mstore(0x00, 0xf08744e8)
            mstore(0x20, p0)
            mstore(0x40, 0x60)
            mstore(0x60, p2)
            writeString(0x80, p1)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(address p0, bytes32 p1, bool p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(address,string,bool)`.
            mstore(0x00, 0xcf020fb1)
            mstore(0x20, p0)
            mstore(0x40, 0x60)
            mstore(0x60, p2)
            writeString(0x80, p1)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(address p0, bytes32 p1, uint256 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(address,string,uint256)`.
            mstore(0x00, 0x67dd6ff1)
            mstore(0x20, p0)
            mstore(0x40, 0x60)
            mstore(0x60, p2)
            writeString(0x80, p1)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(address p0, bytes32 p1, bytes32 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            // Selector of `log(address,string,string)`.
            mstore(0x00, 0xfb772265)
            mstore(0x20, p0)
            mstore(0x40, 0x60)
            mstore(0x60, 0xa0)
            writeString(0x80, p1)
            writeString(0xc0, p2)
        }
        _sendLogPayload(0x1c, 0xe4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
        }
    }

    function log(bool p0, address p1, address p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(bool,address,address)`.
            mstore(0x00, 0xd2763667)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(bool p0, address p1, bool p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(bool,address,bool)`.
            mstore(0x00, 0x18c9c746)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(bool p0, address p1, uint256 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(bool,address,uint256)`.
            mstore(0x00, 0x5f7b9afb)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(bool p0, address p1, bytes32 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(bool,address,string)`.
            mstore(0x00, 0xde9a9270)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x60)
            writeString(0x80, p2)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(bool p0, bool p1, address p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(bool,bool,address)`.
            mstore(0x00, 0x1078f68d)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(bool p0, bool p1, bool p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(bool,bool,bool)`.
            mstore(0x00, 0x50709698)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(bool p0, bool p1, uint256 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(bool,bool,uint256)`.
            mstore(0x00, 0x12f21602)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(bool p0, bool p1, bytes32 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(bool,bool,string)`.
            mstore(0x00, 0x2555fa46)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x60)
            writeString(0x80, p2)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(bool p0, uint256 p1, address p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(bool,uint256,address)`.
            mstore(0x00, 0x088ef9d2)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(bool p0, uint256 p1, bool p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(bool,uint256,bool)`.
            mstore(0x00, 0xe8defba9)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(bool p0, uint256 p1, uint256 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(bool,uint256,uint256)`.
            mstore(0x00, 0x37103367)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(bool p0, uint256 p1, bytes32 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(bool,uint256,string)`.
            mstore(0x00, 0xc3fc3970)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x60)
            writeString(0x80, p2)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(bool p0, bytes32 p1, address p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(bool,string,address)`.
            mstore(0x00, 0x9591b953)
            mstore(0x20, p0)
            mstore(0x40, 0x60)
            mstore(0x60, p2)
            writeString(0x80, p1)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(bool p0, bytes32 p1, bool p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(bool,string,bool)`.
            mstore(0x00, 0xdbb4c247)
            mstore(0x20, p0)
            mstore(0x40, 0x60)
            mstore(0x60, p2)
            writeString(0x80, p1)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(bool p0, bytes32 p1, uint256 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(bool,string,uint256)`.
            mstore(0x00, 0x1093ee11)
            mstore(0x20, p0)
            mstore(0x40, 0x60)
            mstore(0x60, p2)
            writeString(0x80, p1)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(bool p0, bytes32 p1, bytes32 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            // Selector of `log(bool,string,string)`.
            mstore(0x00, 0xb076847f)
            mstore(0x20, p0)
            mstore(0x40, 0x60)
            mstore(0x60, 0xa0)
            writeString(0x80, p1)
            writeString(0xc0, p2)
        }
        _sendLogPayload(0x1c, 0xe4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
        }
    }

    function log(uint256 p0, address p1, address p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(uint256,address,address)`.
            mstore(0x00, 0xbcfd9be0)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(uint256 p0, address p1, bool p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(uint256,address,bool)`.
            mstore(0x00, 0x9b6ec042)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(uint256 p0, address p1, uint256 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(uint256,address,uint256)`.
            mstore(0x00, 0x5a9b5ed5)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(uint256 p0, address p1, bytes32 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(uint256,address,string)`.
            mstore(0x00, 0x63cb41f9)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x60)
            writeString(0x80, p2)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(uint256 p0, bool p1, address p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(uint256,bool,address)`.
            mstore(0x00, 0x35085f7b)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(uint256 p0, bool p1, bool p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(uint256,bool,bool)`.
            mstore(0x00, 0x20718650)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(uint256 p0, bool p1, uint256 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(uint256,bool,uint256)`.
            mstore(0x00, 0x20098014)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(uint256 p0, bool p1, bytes32 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(uint256,bool,string)`.
            mstore(0x00, 0x85775021)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x60)
            writeString(0x80, p2)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(uint256 p0, uint256 p1, address p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(uint256,uint256,address)`.
            mstore(0x00, 0x5c96b331)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(uint256 p0, uint256 p1, bool p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(uint256,uint256,bool)`.
            mstore(0x00, 0x4766da72)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            // Selector of `log(uint256,uint256,uint256)`.
            mstore(0x00, 0xd1ed7a3c)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
        }
        _sendLogPayload(0x1c, 0x64);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
        }
    }

    function log(uint256 p0, uint256 p1, bytes32 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(uint256,uint256,string)`.
            mstore(0x00, 0x71d04af2)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x60)
            writeString(0x80, p2)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(uint256 p0, bytes32 p1, address p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(uint256,string,address)`.
            mstore(0x00, 0x7afac959)
            mstore(0x20, p0)
            mstore(0x40, 0x60)
            mstore(0x60, p2)
            writeString(0x80, p1)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(uint256 p0, bytes32 p1, bool p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(uint256,string,bool)`.
            mstore(0x00, 0x4ceda75a)
            mstore(0x20, p0)
            mstore(0x40, 0x60)
            mstore(0x60, p2)
            writeString(0x80, p1)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(uint256 p0, bytes32 p1, uint256 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(uint256,string,uint256)`.
            mstore(0x00, 0x37aa7d4c)
            mstore(0x20, p0)
            mstore(0x40, 0x60)
            mstore(0x60, p2)
            writeString(0x80, p1)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(uint256 p0, bytes32 p1, bytes32 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            // Selector of `log(uint256,string,string)`.
            mstore(0x00, 0xb115611f)
            mstore(0x20, p0)
            mstore(0x40, 0x60)
            mstore(0x60, 0xa0)
            writeString(0x80, p1)
            writeString(0xc0, p2)
        }
        _sendLogPayload(0x1c, 0xe4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
        }
    }

    function log(bytes32 p0, address p1, address p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(string,address,address)`.
            mstore(0x00, 0xfcec75e0)
            mstore(0x20, 0x60)
            mstore(0x40, p1)
            mstore(0x60, p2)
            writeString(0x80, p0)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(bytes32 p0, address p1, bool p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(string,address,bool)`.
            mstore(0x00, 0xc91d5ed4)
            mstore(0x20, 0x60)
            mstore(0x40, p1)
            mstore(0x60, p2)
            writeString(0x80, p0)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(bytes32 p0, address p1, uint256 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(string,address,uint256)`.
            mstore(0x00, 0x0d26b925)
            mstore(0x20, 0x60)
            mstore(0x40, p1)
            mstore(0x60, p2)
            writeString(0x80, p0)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(bytes32 p0, address p1, bytes32 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            // Selector of `log(string,address,string)`.
            mstore(0x00, 0xe0e9ad4f)
            mstore(0x20, 0x60)
            mstore(0x40, p1)
            mstore(0x60, 0xa0)
            writeString(0x80, p0)
            writeString(0xc0, p2)
        }
        _sendLogPayload(0x1c, 0xe4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
        }
    }

    function log(bytes32 p0, bool p1, address p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(string,bool,address)`.
            mstore(0x00, 0x932bbb38)
            mstore(0x20, 0x60)
            mstore(0x40, p1)
            mstore(0x60, p2)
            writeString(0x80, p0)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(bytes32 p0, bool p1, bool p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(string,bool,bool)`.
            mstore(0x00, 0x850b7ad6)
            mstore(0x20, 0x60)
            mstore(0x40, p1)
            mstore(0x60, p2)
            writeString(0x80, p0)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(bytes32 p0, bool p1, uint256 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(string,bool,uint256)`.
            mstore(0x00, 0xc95958d6)
            mstore(0x20, 0x60)
            mstore(0x40, p1)
            mstore(0x60, p2)
            writeString(0x80, p0)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(bytes32 p0, bool p1, bytes32 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            // Selector of `log(string,bool,string)`.
            mstore(0x00, 0xe298f47d)
            mstore(0x20, 0x60)
            mstore(0x40, p1)
            mstore(0x60, 0xa0)
            writeString(0x80, p0)
            writeString(0xc0, p2)
        }
        _sendLogPayload(0x1c, 0xe4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
        }
    }

    function log(bytes32 p0, uint256 p1, address p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(string,uint256,address)`.
            mstore(0x00, 0x1c7ec448)
            mstore(0x20, 0x60)
            mstore(0x40, p1)
            mstore(0x60, p2)
            writeString(0x80, p0)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(bytes32 p0, uint256 p1, bool p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(string,uint256,bool)`.
            mstore(0x00, 0xca7733b1)
            mstore(0x20, 0x60)
            mstore(0x40, p1)
            mstore(0x60, p2)
            writeString(0x80, p0)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(bytes32 p0, uint256 p1, uint256 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            // Selector of `log(string,uint256,uint256)`.
            mstore(0x00, 0xca47c4eb)
            mstore(0x20, 0x60)
            mstore(0x40, p1)
            mstore(0x60, p2)
            writeString(0x80, p0)
        }
        _sendLogPayload(0x1c, 0xa4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
        }
    }

    function log(bytes32 p0, uint256 p1, bytes32 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            // Selector of `log(string,uint256,string)`.
            mstore(0x00, 0x5970e089)
            mstore(0x20, 0x60)
            mstore(0x40, p1)
            mstore(0x60, 0xa0)
            writeString(0x80, p0)
            writeString(0xc0, p2)
        }
        _sendLogPayload(0x1c, 0xe4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
        }
    }

    function log(bytes32 p0, bytes32 p1, address p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            // Selector of `log(string,string,address)`.
            mstore(0x00, 0x95ed0195)
            mstore(0x20, 0x60)
            mstore(0x40, 0xa0)
            mstore(0x60, p2)
            writeString(0x80, p0)
            writeString(0xc0, p1)
        }
        _sendLogPayload(0x1c, 0xe4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
        }
    }

    function log(bytes32 p0, bytes32 p1, bool p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            // Selector of `log(string,string,bool)`.
            mstore(0x00, 0xb0e0f9b5)
            mstore(0x20, 0x60)
            mstore(0x40, 0xa0)
            mstore(0x60, p2)
            writeString(0x80, p0)
            writeString(0xc0, p1)
        }
        _sendLogPayload(0x1c, 0xe4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
        }
    }

    function log(bytes32 p0, bytes32 p1, uint256 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            // Selector of `log(string,string,uint256)`.
            mstore(0x00, 0x5821efa1)
            mstore(0x20, 0x60)
            mstore(0x40, 0xa0)
            mstore(0x60, p2)
            writeString(0x80, p0)
            writeString(0xc0, p1)
        }
        _sendLogPayload(0x1c, 0xe4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
        }
    }

    function log(bytes32 p0, bytes32 p1, bytes32 p2) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        bytes32 m9;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            m9 := mload(0x120)
            // Selector of `log(string,string,string)`.
            mstore(0x00, 0x2ced7cef)
            mstore(0x20, 0x60)
            mstore(0x40, 0xa0)
            mstore(0x60, 0xe0)
            writeString(0x80, p0)
            writeString(0xc0, p1)
            writeString(0x100, p2)
        }
        _sendLogPayload(0x1c, 0x124);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
            mstore(0x120, m9)
        }
    }

    function log(address p0, address p1, address p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,address,address,address)`.
            mstore(0x00, 0x665bf134)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, address p1, address p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,address,address,bool)`.
            mstore(0x00, 0x0e378994)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, address p1, address p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,address,address,uint256)`.
            mstore(0x00, 0x94250d77)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, address p1, address p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,address,address,string)`.
            mstore(0x00, 0xf808da20)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, address p1, bool p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,address,bool,address)`.
            mstore(0x00, 0x9f1bc36e)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, address p1, bool p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,address,bool,bool)`.
            mstore(0x00, 0x2cd4134a)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, address p1, bool p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,address,bool,uint256)`.
            mstore(0x00, 0x3971e78c)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, address p1, bool p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,address,bool,string)`.
            mstore(0x00, 0xaa6540c8)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, address p1, uint256 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,address,uint256,address)`.
            mstore(0x00, 0x8da6def5)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, address p1, uint256 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,address,uint256,bool)`.
            mstore(0x00, 0x9b4254e2)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,address,uint256,uint256)`.
            mstore(0x00, 0xbe553481)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, address p1, uint256 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,address,uint256,string)`.
            mstore(0x00, 0xfdb4f990)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, address p1, bytes32 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,address,string,address)`.
            mstore(0x00, 0x8f736d16)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, address p1, bytes32 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,address,string,bool)`.
            mstore(0x00, 0x6f1a594e)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, address p1, bytes32 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,address,string,uint256)`.
            mstore(0x00, 0xef1cefe7)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, address p1, bytes32 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(address,address,string,string)`.
            mstore(0x00, 0x21bdaf25)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, 0xc0)
            writeString(0xa0, p2)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(address p0, bool p1, address p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,bool,address,address)`.
            mstore(0x00, 0x660375dd)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, bool p1, address p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,bool,address,bool)`.
            mstore(0x00, 0xa6f50b0f)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, bool p1, address p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,bool,address,uint256)`.
            mstore(0x00, 0xa75c59de)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, bool p1, address p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,bool,address,string)`.
            mstore(0x00, 0x2dd778e6)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, bool p1, bool p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,bool,bool,address)`.
            mstore(0x00, 0xcf394485)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, bool p1, bool p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,bool,bool,bool)`.
            mstore(0x00, 0xcac43479)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,bool,bool,uint256)`.
            mstore(0x00, 0x8c4e5de6)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, bool p1, bool p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,bool,bool,string)`.
            mstore(0x00, 0xdfc4a2e8)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, bool p1, uint256 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,bool,uint256,address)`.
            mstore(0x00, 0xccf790a1)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,bool,uint256,bool)`.
            mstore(0x00, 0xc4643e20)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,bool,uint256,uint256)`.
            mstore(0x00, 0x386ff5f4)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, bool p1, uint256 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,bool,uint256,string)`.
            mstore(0x00, 0x0aa6cfad)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, bool p1, bytes32 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,bool,string,address)`.
            mstore(0x00, 0x19fd4956)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, bool p1, bytes32 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,bool,string,bool)`.
            mstore(0x00, 0x50ad461d)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, bool p1, bytes32 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,bool,string,uint256)`.
            mstore(0x00, 0x80e6a20b)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, bool p1, bytes32 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(address,bool,string,string)`.
            mstore(0x00, 0x475c5c33)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, 0xc0)
            writeString(0xa0, p2)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(address p0, uint256 p1, address p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,uint256,address,address)`.
            mstore(0x00, 0x478d1c62)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, uint256 p1, address p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,uint256,address,bool)`.
            mstore(0x00, 0xa1bcc9b3)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,uint256,address,uint256)`.
            mstore(0x00, 0x100f650e)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, uint256 p1, address p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,uint256,address,string)`.
            mstore(0x00, 0x1da986ea)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, uint256 p1, bool p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,uint256,bool,address)`.
            mstore(0x00, 0xa31bfdcc)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,uint256,bool,bool)`.
            mstore(0x00, 0x3bf5e537)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,uint256,bool,uint256)`.
            mstore(0x00, 0x22f6b999)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, uint256 p1, bool p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,uint256,bool,string)`.
            mstore(0x00, 0xc5ad85f9)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,uint256,uint256,address)`.
            mstore(0x00, 0x20e3984d)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,uint256,uint256,bool)`.
            mstore(0x00, 0x66f1bc67)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(address,uint256,uint256,uint256)`.
            mstore(0x00, 0x34f0e636)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(address p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,uint256,uint256,string)`.
            mstore(0x00, 0x4a28c017)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, uint256 p1, bytes32 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,uint256,string,address)`.
            mstore(0x00, 0x5c430d47)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, uint256 p1, bytes32 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,uint256,string,bool)`.
            mstore(0x00, 0xcf18105c)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,uint256,string,uint256)`.
            mstore(0x00, 0xbf01f891)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(address,uint256,string,string)`.
            mstore(0x00, 0x88a8c406)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, 0xc0)
            writeString(0xa0, p2)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(address p0, bytes32 p1, address p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,string,address,address)`.
            mstore(0x00, 0x0d36fa20)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, bytes32 p1, address p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,string,address,bool)`.
            mstore(0x00, 0x0df12b76)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, bytes32 p1, address p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,string,address,uint256)`.
            mstore(0x00, 0x457fe3cf)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, bytes32 p1, address p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(address,string,address,string)`.
            mstore(0x00, 0xf7e36245)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p1)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(address p0, bytes32 p1, bool p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,string,bool,address)`.
            mstore(0x00, 0x205871c2)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, bytes32 p1, bool p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,string,bool,bool)`.
            mstore(0x00, 0x5f1d5c9f)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, bytes32 p1, bool p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,string,bool,uint256)`.
            mstore(0x00, 0x515e38b6)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, bytes32 p1, bool p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(address,string,bool,string)`.
            mstore(0x00, 0xbc0b61fe)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p1)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(address p0, bytes32 p1, uint256 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,string,uint256,address)`.
            mstore(0x00, 0x63183678)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, bytes32 p1, uint256 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,string,uint256,bool)`.
            mstore(0x00, 0x0ef7e050)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(address,string,uint256,uint256)`.
            mstore(0x00, 0x1dc8e1b8)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(address p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(address,string,uint256,string)`.
            mstore(0x00, 0x448830a8)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p1)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(address p0, bytes32 p1, bytes32 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(address,string,string,address)`.
            mstore(0x00, 0xa04e2f87)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p1)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(address p0, bytes32 p1, bytes32 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(address,string,string,bool)`.
            mstore(0x00, 0x35a5071f)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p1)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(address p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(address,string,string,uint256)`.
            mstore(0x00, 0x159f8927)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p1)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(address p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        bytes32 m9;
        bytes32 m10;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            m9 := mload(0x120)
            m10 := mload(0x140)
            // Selector of `log(address,string,string,string)`.
            mstore(0x00, 0x5d02c50b)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, 0xc0)
            mstore(0x80, 0x100)
            writeString(0xa0, p1)
            writeString(0xe0, p2)
            writeString(0x120, p3)
        }
        _sendLogPayload(0x1c, 0x144);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
            mstore(0x120, m9)
            mstore(0x140, m10)
        }
    }

    function log(bool p0, address p1, address p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,address,address,address)`.
            mstore(0x00, 0x1d14d001)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, address p1, address p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,address,address,bool)`.
            mstore(0x00, 0x46600be0)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, address p1, address p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,address,address,uint256)`.
            mstore(0x00, 0x0c66d1be)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, address p1, address p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,address,address,string)`.
            mstore(0x00, 0xd812a167)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, address p1, bool p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,address,bool,address)`.
            mstore(0x00, 0x1c41a336)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, address p1, bool p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,address,bool,bool)`.
            mstore(0x00, 0x6a9c478b)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,address,bool,uint256)`.
            mstore(0x00, 0x07831502)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, address p1, bool p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,address,bool,string)`.
            mstore(0x00, 0x4a66cb34)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, address p1, uint256 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,address,uint256,address)`.
            mstore(0x00, 0x136b05dd)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,address,uint256,bool)`.
            mstore(0x00, 0xd6019f1c)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,address,uint256,uint256)`.
            mstore(0x00, 0x7bf181a1)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, address p1, uint256 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,address,uint256,string)`.
            mstore(0x00, 0x51f09ff8)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, address p1, bytes32 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,address,string,address)`.
            mstore(0x00, 0x6f7c603e)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, address p1, bytes32 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,address,string,bool)`.
            mstore(0x00, 0xe2bfd60b)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, address p1, bytes32 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,address,string,uint256)`.
            mstore(0x00, 0xc21f64c7)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, address p1, bytes32 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(bool,address,string,string)`.
            mstore(0x00, 0xa73c1db6)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, 0xc0)
            writeString(0xa0, p2)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bool p0, bool p1, address p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,bool,address,address)`.
            mstore(0x00, 0xf4880ea4)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, bool p1, address p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,bool,address,bool)`.
            mstore(0x00, 0xc0a302d8)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,bool,address,uint256)`.
            mstore(0x00, 0x4c123d57)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, bool p1, address p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,bool,address,string)`.
            mstore(0x00, 0xa0a47963)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, bool p1, bool p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,bool,bool,address)`.
            mstore(0x00, 0x8c329b1a)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, bool p1, bool p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,bool,bool,bool)`.
            mstore(0x00, 0x3b2a5ce0)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,bool,bool,uint256)`.
            mstore(0x00, 0x6d7045c1)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, bool p1, bool p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,bool,bool,string)`.
            mstore(0x00, 0x2ae408d4)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,bool,uint256,address)`.
            mstore(0x00, 0x54a7a9a0)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,bool,uint256,bool)`.
            mstore(0x00, 0x619e4d0e)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,bool,uint256,uint256)`.
            mstore(0x00, 0x0bb00eab)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, bool p1, uint256 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,bool,uint256,string)`.
            mstore(0x00, 0x7dd4d0e0)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, bool p1, bytes32 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,bool,string,address)`.
            mstore(0x00, 0xf9ad2b89)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, bool p1, bytes32 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,bool,string,bool)`.
            mstore(0x00, 0xb857163a)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, bool p1, bytes32 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,bool,string,uint256)`.
            mstore(0x00, 0xe3a9ca2f)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, bool p1, bytes32 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(bool,bool,string,string)`.
            mstore(0x00, 0x6d1e8751)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, 0xc0)
            writeString(0xa0, p2)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bool p0, uint256 p1, address p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,uint256,address,address)`.
            mstore(0x00, 0x26f560a8)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,uint256,address,bool)`.
            mstore(0x00, 0xb4c314ff)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,uint256,address,uint256)`.
            mstore(0x00, 0x1537dc87)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, uint256 p1, address p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,uint256,address,string)`.
            mstore(0x00, 0x1bb3b09a)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,uint256,bool,address)`.
            mstore(0x00, 0x9acd3616)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,uint256,bool,bool)`.
            mstore(0x00, 0xceb5f4d7)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,uint256,bool,uint256)`.
            mstore(0x00, 0x7f9bbca2)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, uint256 p1, bool p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,uint256,bool,string)`.
            mstore(0x00, 0x9143dbb1)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,uint256,uint256,address)`.
            mstore(0x00, 0x00dd87b9)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,uint256,uint256,bool)`.
            mstore(0x00, 0xbe984353)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(bool,uint256,uint256,uint256)`.
            mstore(0x00, 0x374bb4b2)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(bool p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,uint256,uint256,string)`.
            mstore(0x00, 0x8e69fb5d)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, uint256 p1, bytes32 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,uint256,string,address)`.
            mstore(0x00, 0xfedd1fff)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, uint256 p1, bytes32 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,uint256,string,bool)`.
            mstore(0x00, 0xe5e70b2b)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,uint256,string,uint256)`.
            mstore(0x00, 0x6a1199e2)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(bool,uint256,string,string)`.
            mstore(0x00, 0xf5bc2249)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, 0xc0)
            writeString(0xa0, p2)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bool p0, bytes32 p1, address p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,string,address,address)`.
            mstore(0x00, 0x2b2b18dc)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, bytes32 p1, address p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,string,address,bool)`.
            mstore(0x00, 0x6dd434ca)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, bytes32 p1, address p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,string,address,uint256)`.
            mstore(0x00, 0xa5cada94)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, bytes32 p1, address p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(bool,string,address,string)`.
            mstore(0x00, 0x12d6c788)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p1)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bool p0, bytes32 p1, bool p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,string,bool,address)`.
            mstore(0x00, 0x538e06ab)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, bytes32 p1, bool p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,string,bool,bool)`.
            mstore(0x00, 0xdc5e935b)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, bytes32 p1, bool p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,string,bool,uint256)`.
            mstore(0x00, 0x1606a393)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, bytes32 p1, bool p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(bool,string,bool,string)`.
            mstore(0x00, 0x483d0416)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p1)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bool p0, bytes32 p1, uint256 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,string,uint256,address)`.
            mstore(0x00, 0x1596a1ce)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, bytes32 p1, uint256 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,string,uint256,bool)`.
            mstore(0x00, 0x6b0e5d53)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(bool,string,uint256,uint256)`.
            mstore(0x00, 0x28863fcb)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bool p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(bool,string,uint256,string)`.
            mstore(0x00, 0x1ad96de6)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p1)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bool p0, bytes32 p1, bytes32 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(bool,string,string,address)`.
            mstore(0x00, 0x97d394d8)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p1)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bool p0, bytes32 p1, bytes32 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(bool,string,string,bool)`.
            mstore(0x00, 0x1e4b87e5)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p1)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bool p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(bool,string,string,uint256)`.
            mstore(0x00, 0x7be0c3eb)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p1)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bool p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        bytes32 m9;
        bytes32 m10;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            m9 := mload(0x120)
            m10 := mload(0x140)
            // Selector of `log(bool,string,string,string)`.
            mstore(0x00, 0x1762e32a)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, 0xc0)
            mstore(0x80, 0x100)
            writeString(0xa0, p1)
            writeString(0xe0, p2)
            writeString(0x120, p3)
        }
        _sendLogPayload(0x1c, 0x144);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
            mstore(0x120, m9)
            mstore(0x140, m10)
        }
    }

    function log(uint256 p0, address p1, address p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,address,address,address)`.
            mstore(0x00, 0x2488b414)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, address p1, address p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,address,address,bool)`.
            mstore(0x00, 0x091ffaf5)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,address,address,uint256)`.
            mstore(0x00, 0x736efbb6)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, address p1, address p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,address,address,string)`.
            mstore(0x00, 0x031c6f73)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, address p1, bool p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,address,bool,address)`.
            mstore(0x00, 0xef72c513)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,address,bool,bool)`.
            mstore(0x00, 0xe351140f)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,address,bool,uint256)`.
            mstore(0x00, 0x5abd992a)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, address p1, bool p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,address,bool,string)`.
            mstore(0x00, 0x90fb06aa)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,address,uint256,address)`.
            mstore(0x00, 0x15c127b5)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,address,uint256,bool)`.
            mstore(0x00, 0x5f743a7c)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,address,uint256,uint256)`.
            mstore(0x00, 0x0c9cd9c1)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, address p1, uint256 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,address,uint256,string)`.
            mstore(0x00, 0xddb06521)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, address p1, bytes32 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,address,string,address)`.
            mstore(0x00, 0x9cba8fff)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, address p1, bytes32 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,address,string,bool)`.
            mstore(0x00, 0xcc32ab07)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, address p1, bytes32 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,address,string,uint256)`.
            mstore(0x00, 0x46826b5d)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, address p1, bytes32 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(uint256,address,string,string)`.
            mstore(0x00, 0x3e128ca3)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, 0xc0)
            writeString(0xa0, p2)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(uint256 p0, bool p1, address p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,bool,address,address)`.
            mstore(0x00, 0xa1ef4cbb)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,bool,address,bool)`.
            mstore(0x00, 0x454d54a5)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,bool,address,uint256)`.
            mstore(0x00, 0x078287f5)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, bool p1, address p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,bool,address,string)`.
            mstore(0x00, 0xade052c7)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,bool,bool,address)`.
            mstore(0x00, 0x69640b59)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,bool,bool,bool)`.
            mstore(0x00, 0xb6f577a1)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,bool,bool,uint256)`.
            mstore(0x00, 0x7464ce23)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, bool p1, bool p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,bool,bool,string)`.
            mstore(0x00, 0xdddb9561)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,bool,uint256,address)`.
            mstore(0x00, 0x88cb6041)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,bool,uint256,bool)`.
            mstore(0x00, 0x91a02e2a)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,bool,uint256,uint256)`.
            mstore(0x00, 0xc6acc7a8)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, bool p1, uint256 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,bool,uint256,string)`.
            mstore(0x00, 0xde03e774)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, bool p1, bytes32 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,bool,string,address)`.
            mstore(0x00, 0xef529018)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, bool p1, bytes32 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,bool,string,bool)`.
            mstore(0x00, 0xeb928d7f)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, bool p1, bytes32 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,bool,string,uint256)`.
            mstore(0x00, 0x2c1d0746)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(uint256,bool,string,string)`.
            mstore(0x00, 0x68c8b8bd)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, 0xc0)
            writeString(0xa0, p2)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,uint256,address,address)`.
            mstore(0x00, 0x56a5d1b1)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,uint256,address,bool)`.
            mstore(0x00, 0x15cac476)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,uint256,address,uint256)`.
            mstore(0x00, 0x88f6e4b2)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, uint256 p1, address p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,uint256,address,string)`.
            mstore(0x00, 0x6cde40b8)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,uint256,bool,address)`.
            mstore(0x00, 0x9a816a83)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,uint256,bool,bool)`.
            mstore(0x00, 0xab085ae6)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,uint256,bool,uint256)`.
            mstore(0x00, 0xeb7f6fd2)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, uint256 p1, bool p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,uint256,bool,string)`.
            mstore(0x00, 0xa5b4fc99)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,uint256,uint256,address)`.
            mstore(0x00, 0xfa8185af)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,uint256,uint256,bool)`.
            mstore(0x00, 0xc598d185)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        /// @solidity memory-safe-assembly
        assembly {
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            // Selector of `log(uint256,uint256,uint256,uint256)`.
            mstore(0x00, 0x193fb800)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
        }
        _sendLogPayload(0x1c, 0x84);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
        }
    }

    function log(uint256 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,uint256,uint256,string)`.
            mstore(0x00, 0x59cfcbe3)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0x80)
            writeString(0xa0, p3)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, uint256 p1, bytes32 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,uint256,string,address)`.
            mstore(0x00, 0x42d21db7)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, uint256 p1, bytes32 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,uint256,string,bool)`.
            mstore(0x00, 0x7af6ab25)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,uint256,string,uint256)`.
            mstore(0x00, 0x5da297eb)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, p3)
            writeString(0xa0, p2)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(uint256,uint256,string,string)`.
            mstore(0x00, 0x27d8afd2)
            mstore(0x20, p0)
            mstore(0x40, p1)
            mstore(0x60, 0x80)
            mstore(0x80, 0xc0)
            writeString(0xa0, p2)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(uint256 p0, bytes32 p1, address p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,string,address,address)`.
            mstore(0x00, 0x6168ed61)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, bytes32 p1, address p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,string,address,bool)`.
            mstore(0x00, 0x90c30a56)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, bytes32 p1, address p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,string,address,uint256)`.
            mstore(0x00, 0xe8d3018d)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, bytes32 p1, address p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(uint256,string,address,string)`.
            mstore(0x00, 0x9c3adfa1)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p1)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(uint256 p0, bytes32 p1, bool p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,string,bool,address)`.
            mstore(0x00, 0xae2ec581)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, bytes32 p1, bool p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,string,bool,bool)`.
            mstore(0x00, 0xba535d9c)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, bytes32 p1, bool p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,string,bool,uint256)`.
            mstore(0x00, 0xcf009880)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(uint256,string,bool,string)`.
            mstore(0x00, 0xd2d423cd)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p1)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(uint256 p0, bytes32 p1, uint256 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,string,uint256,address)`.
            mstore(0x00, 0x3b2279b4)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, bytes32 p1, uint256 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,string,uint256,bool)`.
            mstore(0x00, 0x691a8f74)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(uint256,string,uint256,uint256)`.
            mstore(0x00, 0x82c25b74)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p1)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(uint256 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(uint256,string,uint256,string)`.
            mstore(0x00, 0xb7b914ca)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p1)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(uint256 p0, bytes32 p1, bytes32 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(uint256,string,string,address)`.
            mstore(0x00, 0xd583c602)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p1)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(uint256 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(uint256,string,string,bool)`.
            mstore(0x00, 0xb3a6b6bd)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p1)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(uint256 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(uint256,string,string,uint256)`.
            mstore(0x00, 0xb028c9bd)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p1)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(uint256 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        bytes32 m9;
        bytes32 m10;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            m9 := mload(0x120)
            m10 := mload(0x140)
            // Selector of `log(uint256,string,string,string)`.
            mstore(0x00, 0x21ad0683)
            mstore(0x20, p0)
            mstore(0x40, 0x80)
            mstore(0x60, 0xc0)
            mstore(0x80, 0x100)
            writeString(0xa0, p1)
            writeString(0xe0, p2)
            writeString(0x120, p3)
        }
        _sendLogPayload(0x1c, 0x144);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
            mstore(0x120, m9)
            mstore(0x140, m10)
        }
    }

    function log(bytes32 p0, address p1, address p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,address,address,address)`.
            mstore(0x00, 0xed8f28f6)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, address p1, address p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,address,address,bool)`.
            mstore(0x00, 0xb59dbd60)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, address p1, address p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,address,address,uint256)`.
            mstore(0x00, 0x8ef3f399)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, address p1, address p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,address,address,string)`.
            mstore(0x00, 0x800a1c67)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p0)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, address p1, bool p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,address,bool,address)`.
            mstore(0x00, 0x223603bd)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, address p1, bool p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,address,bool,bool)`.
            mstore(0x00, 0x79884c2b)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, address p1, bool p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,address,bool,uint256)`.
            mstore(0x00, 0x3e9f866a)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, address p1, bool p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,address,bool,string)`.
            mstore(0x00, 0x0454c079)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p0)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, address p1, uint256 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,address,uint256,address)`.
            mstore(0x00, 0x63fb8bc5)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, address p1, uint256 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,address,uint256,bool)`.
            mstore(0x00, 0xfc4845f0)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, address p1, uint256 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,address,uint256,uint256)`.
            mstore(0x00, 0xf8f51b1e)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, address p1, uint256 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,address,uint256,string)`.
            mstore(0x00, 0x5a477632)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p0)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, address p1, bytes32 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,address,string,address)`.
            mstore(0x00, 0xaabc9a31)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, address p1, bytes32 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,address,string,bool)`.
            mstore(0x00, 0x5f15d28c)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, address p1, bytes32 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,address,string,uint256)`.
            mstore(0x00, 0x91d1112e)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, address p1, bytes32 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        bytes32 m9;
        bytes32 m10;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            m9 := mload(0x120)
            m10 := mload(0x140)
            // Selector of `log(string,address,string,string)`.
            mstore(0x00, 0x245986f2)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, 0xc0)
            mstore(0x80, 0x100)
            writeString(0xa0, p0)
            writeString(0xe0, p2)
            writeString(0x120, p3)
        }
        _sendLogPayload(0x1c, 0x144);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
            mstore(0x120, m9)
            mstore(0x140, m10)
        }
    }

    function log(bytes32 p0, bool p1, address p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,bool,address,address)`.
            mstore(0x00, 0x33e9dd1d)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, bool p1, address p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,bool,address,bool)`.
            mstore(0x00, 0x958c28c6)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, bool p1, address p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,bool,address,uint256)`.
            mstore(0x00, 0x5d08bb05)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, bool p1, address p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,bool,address,string)`.
            mstore(0x00, 0x2d8e33a4)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p0)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, bool p1, bool p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,bool,bool,address)`.
            mstore(0x00, 0x7190a529)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, bool p1, bool p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,bool,bool,bool)`.
            mstore(0x00, 0x895af8c5)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, bool p1, bool p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,bool,bool,uint256)`.
            mstore(0x00, 0x8e3f78a9)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, bool p1, bool p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,bool,bool,string)`.
            mstore(0x00, 0x9d22d5dd)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p0)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, bool p1, uint256 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,bool,uint256,address)`.
            mstore(0x00, 0x935e09bf)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, bool p1, uint256 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,bool,uint256,bool)`.
            mstore(0x00, 0x8af7cf8a)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, bool p1, uint256 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,bool,uint256,uint256)`.
            mstore(0x00, 0x64b5bb67)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, bool p1, uint256 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,bool,uint256,string)`.
            mstore(0x00, 0x742d6ee7)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p0)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, bool p1, bytes32 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,bool,string,address)`.
            mstore(0x00, 0xe0625b29)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, bool p1, bytes32 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,bool,string,bool)`.
            mstore(0x00, 0x3f8a701d)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, bool p1, bytes32 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,bool,string,uint256)`.
            mstore(0x00, 0x24f91465)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        bytes32 m9;
        bytes32 m10;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            m9 := mload(0x120)
            m10 := mload(0x140)
            // Selector of `log(string,bool,string,string)`.
            mstore(0x00, 0xa826caeb)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, 0xc0)
            mstore(0x80, 0x100)
            writeString(0xa0, p0)
            writeString(0xe0, p2)
            writeString(0x120, p3)
        }
        _sendLogPayload(0x1c, 0x144);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
            mstore(0x120, m9)
            mstore(0x140, m10)
        }
    }

    function log(bytes32 p0, uint256 p1, address p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,uint256,address,address)`.
            mstore(0x00, 0x5ea2b7ae)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, uint256 p1, address p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,uint256,address,bool)`.
            mstore(0x00, 0x82112a42)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, uint256 p1, address p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,uint256,address,uint256)`.
            mstore(0x00, 0x4f04fdc6)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, uint256 p1, address p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,uint256,address,string)`.
            mstore(0x00, 0x9ffb2f93)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p0)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, uint256 p1, bool p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,uint256,bool,address)`.
            mstore(0x00, 0xe0e95b98)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, uint256 p1, bool p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,uint256,bool,bool)`.
            mstore(0x00, 0x354c36d6)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, uint256 p1, bool p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,uint256,bool,uint256)`.
            mstore(0x00, 0xe41b6f6f)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, uint256 p1, bool p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,uint256,bool,string)`.
            mstore(0x00, 0xabf73a98)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p0)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, uint256 p1, uint256 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,uint256,uint256,address)`.
            mstore(0x00, 0xe21de278)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, uint256 p1, uint256 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,uint256,uint256,bool)`.
            mstore(0x00, 0x7626db92)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            // Selector of `log(string,uint256,uint256,uint256)`.
            mstore(0x00, 0xa7a87853)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
        }
        _sendLogPayload(0x1c, 0xc4);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
        }
    }

    function log(bytes32 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,uint256,uint256,string)`.
            mstore(0x00, 0x854b3496)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, p2)
            mstore(0x80, 0xc0)
            writeString(0xa0, p0)
            writeString(0xe0, p3)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, uint256 p1, bytes32 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,uint256,string,address)`.
            mstore(0x00, 0x7c4632a4)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, uint256 p1, bytes32 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,uint256,string,bool)`.
            mstore(0x00, 0x7d24491d)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,uint256,string,uint256)`.
            mstore(0x00, 0xc67ea9d1)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, 0xc0)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p2)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        bytes32 m9;
        bytes32 m10;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            m9 := mload(0x120)
            m10 := mload(0x140)
            // Selector of `log(string,uint256,string,string)`.
            mstore(0x00, 0x5ab84e1f)
            mstore(0x20, 0x80)
            mstore(0x40, p1)
            mstore(0x60, 0xc0)
            mstore(0x80, 0x100)
            writeString(0xa0, p0)
            writeString(0xe0, p2)
            writeString(0x120, p3)
        }
        _sendLogPayload(0x1c, 0x144);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
            mstore(0x120, m9)
            mstore(0x140, m10)
        }
    }

    function log(bytes32 p0, bytes32 p1, address p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,string,address,address)`.
            mstore(0x00, 0x439c7bef)
            mstore(0x20, 0x80)
            mstore(0x40, 0xc0)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p1)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, bytes32 p1, address p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,string,address,bool)`.
            mstore(0x00, 0x5ccd4e37)
            mstore(0x20, 0x80)
            mstore(0x40, 0xc0)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p1)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, bytes32 p1, address p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,string,address,uint256)`.
            mstore(0x00, 0x7cc3c607)
            mstore(0x20, 0x80)
            mstore(0x40, 0xc0)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p1)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, bytes32 p1, address p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        bytes32 m9;
        bytes32 m10;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            m9 := mload(0x120)
            m10 := mload(0x140)
            // Selector of `log(string,string,address,string)`.
            mstore(0x00, 0xeb1bff80)
            mstore(0x20, 0x80)
            mstore(0x40, 0xc0)
            mstore(0x60, p2)
            mstore(0x80, 0x100)
            writeString(0xa0, p0)
            writeString(0xe0, p1)
            writeString(0x120, p3)
        }
        _sendLogPayload(0x1c, 0x144);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
            mstore(0x120, m9)
            mstore(0x140, m10)
        }
    }

    function log(bytes32 p0, bytes32 p1, bool p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,string,bool,address)`.
            mstore(0x00, 0xc371c7db)
            mstore(0x20, 0x80)
            mstore(0x40, 0xc0)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p1)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, bytes32 p1, bool p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,string,bool,bool)`.
            mstore(0x00, 0x40785869)
            mstore(0x20, 0x80)
            mstore(0x40, 0xc0)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p1)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, bytes32 p1, bool p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,string,bool,uint256)`.
            mstore(0x00, 0xd6aefad2)
            mstore(0x20, 0x80)
            mstore(0x40, 0xc0)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p1)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        bytes32 m9;
        bytes32 m10;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            m9 := mload(0x120)
            m10 := mload(0x140)
            // Selector of `log(string,string,bool,string)`.
            mstore(0x00, 0x5e84b0ea)
            mstore(0x20, 0x80)
            mstore(0x40, 0xc0)
            mstore(0x60, p2)
            mstore(0x80, 0x100)
            writeString(0xa0, p0)
            writeString(0xe0, p1)
            writeString(0x120, p3)
        }
        _sendLogPayload(0x1c, 0x144);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
            mstore(0x120, m9)
            mstore(0x140, m10)
        }
    }

    function log(bytes32 p0, bytes32 p1, uint256 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,string,uint256,address)`.
            mstore(0x00, 0x1023f7b2)
            mstore(0x20, 0x80)
            mstore(0x40, 0xc0)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p1)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, bytes32 p1, uint256 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,string,uint256,bool)`.
            mstore(0x00, 0xc3a8a654)
            mstore(0x20, 0x80)
            mstore(0x40, 0xc0)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p1)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            // Selector of `log(string,string,uint256,uint256)`.
            mstore(0x00, 0xf45d7d2c)
            mstore(0x20, 0x80)
            mstore(0x40, 0xc0)
            mstore(0x60, p2)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p1)
        }
        _sendLogPayload(0x1c, 0x104);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
        }
    }

    function log(bytes32 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        bytes32 m9;
        bytes32 m10;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            m9 := mload(0x120)
            m10 := mload(0x140)
            // Selector of `log(string,string,uint256,string)`.
            mstore(0x00, 0x5d1a971a)
            mstore(0x20, 0x80)
            mstore(0x40, 0xc0)
            mstore(0x60, p2)
            mstore(0x80, 0x100)
            writeString(0xa0, p0)
            writeString(0xe0, p1)
            writeString(0x120, p3)
        }
        _sendLogPayload(0x1c, 0x144);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
            mstore(0x120, m9)
            mstore(0x140, m10)
        }
    }

    function log(bytes32 p0, bytes32 p1, bytes32 p2, address p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        bytes32 m9;
        bytes32 m10;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            m9 := mload(0x120)
            m10 := mload(0x140)
            // Selector of `log(string,string,string,address)`.
            mstore(0x00, 0x6d572f44)
            mstore(0x20, 0x80)
            mstore(0x40, 0xc0)
            mstore(0x60, 0x100)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p1)
            writeString(0x120, p2)
        }
        _sendLogPayload(0x1c, 0x144);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
            mstore(0x120, m9)
            mstore(0x140, m10)
        }
    }

    function log(bytes32 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        bytes32 m9;
        bytes32 m10;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            m9 := mload(0x120)
            m10 := mload(0x140)
            // Selector of `log(string,string,string,bool)`.
            mstore(0x00, 0x2c1754ed)
            mstore(0x20, 0x80)
            mstore(0x40, 0xc0)
            mstore(0x60, 0x100)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p1)
            writeString(0x120, p2)
        }
        _sendLogPayload(0x1c, 0x144);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
            mstore(0x120, m9)
            mstore(0x140, m10)
        }
    }

    function log(bytes32 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        bytes32 m9;
        bytes32 m10;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            m9 := mload(0x120)
            m10 := mload(0x140)
            // Selector of `log(string,string,string,uint256)`.
            mstore(0x00, 0x8eafb02b)
            mstore(0x20, 0x80)
            mstore(0x40, 0xc0)
            mstore(0x60, 0x100)
            mstore(0x80, p3)
            writeString(0xa0, p0)
            writeString(0xe0, p1)
            writeString(0x120, p2)
        }
        _sendLogPayload(0x1c, 0x144);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
            mstore(0x120, m9)
            mstore(0x140, m10)
        }
    }

    function log(bytes32 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {
        bytes32 m0;
        bytes32 m1;
        bytes32 m2;
        bytes32 m3;
        bytes32 m4;
        bytes32 m5;
        bytes32 m6;
        bytes32 m7;
        bytes32 m8;
        bytes32 m9;
        bytes32 m10;
        bytes32 m11;
        bytes32 m12;
        /// @solidity memory-safe-assembly
        assembly {
            function writeString(pos, w) {
                let length := 0
                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
                mstore(pos, length)
                let shift := sub(256, shl(3, length))
                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
            }
            m0 := mload(0x00)
            m1 := mload(0x20)
            m2 := mload(0x40)
            m3 := mload(0x60)
            m4 := mload(0x80)
            m5 := mload(0xa0)
            m6 := mload(0xc0)
            m7 := mload(0xe0)
            m8 := mload(0x100)
            m9 := mload(0x120)
            m10 := mload(0x140)
            m11 := mload(0x160)
            m12 := mload(0x180)
            // Selector of `log(string,string,string,string)`.
            mstore(0x00, 0xde68f20a)
            mstore(0x20, 0x80)
            mstore(0x40, 0xc0)
            mstore(0x60, 0x100)
            mstore(0x80, 0x140)
            writeString(0xa0, p0)
            writeString(0xe0, p1)
            writeString(0x120, p2)
            writeString(0x160, p3)
        }
        _sendLogPayload(0x1c, 0x184);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, m0)
            mstore(0x20, m1)
            mstore(0x40, m2)
            mstore(0x60, m3)
            mstore(0x80, m4)
            mstore(0xa0, m5)
            mstore(0xc0, m6)
            mstore(0xe0, m7)
            mstore(0x100, m8)
            mstore(0x120, m9)
            mstore(0x140, m10)
            mstore(0x160, m11)
            mstore(0x180, m12)
        }
    }
}

================
File: lib/forge-std/src/Script.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

// 💬 ABOUT
// Forge Std's default Script.

// 🧩 MODULES
import {console} from "./console.sol";
import {console2} from "./console2.sol";
import {safeconsole} from "./safeconsole.sol";
import {StdChains} from "./StdChains.sol";
import {StdCheatsSafe} from "./StdCheats.sol";
import {stdJson} from "./StdJson.sol";
import {stdMath} from "./StdMath.sol";
import {StdStorage, stdStorageSafe} from "./StdStorage.sol";
import {StdStyle} from "./StdStyle.sol";
import {StdUtils} from "./StdUtils.sol";
import {VmSafe} from "./Vm.sol";

// 📦 BOILERPLATE
import {ScriptBase} from "./Base.sol";

// ⭐️ SCRIPT
abstract contract Script is ScriptBase, StdChains, StdCheatsSafe, StdUtils {
    // Note: IS_SCRIPT() must return true.
    bool public IS_SCRIPT = true;
}

================
File: lib/forge-std/src/StdAssertions.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;
pragma experimental ABIEncoderV2;

import {Vm} from "./Vm.sol";

abstract contract StdAssertions {
    Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));

    event log(string);
    event logs(bytes);

    event log_address(address);
    event log_bytes32(bytes32);
    event log_int(int256);
    event log_uint(uint256);
    event log_bytes(bytes);
    event log_string(string);

    event log_named_address(string key, address val);
    event log_named_bytes32(string key, bytes32 val);
    event log_named_decimal_int(string key, int256 val, uint256 decimals);
    event log_named_decimal_uint(string key, uint256 val, uint256 decimals);
    event log_named_int(string key, int256 val);
    event log_named_uint(string key, uint256 val);
    event log_named_bytes(string key, bytes val);
    event log_named_string(string key, string val);

    event log_array(uint256[] val);
    event log_array(int256[] val);
    event log_array(address[] val);
    event log_named_array(string key, uint256[] val);
    event log_named_array(string key, int256[] val);
    event log_named_array(string key, address[] val);

    bool private _failed;

    function failed() public view returns (bool) {
        if (_failed) {
            return _failed;
        } else {
            return vm.load(address(vm), bytes32("failed")) != bytes32(0);
        }
    }

    function fail() internal virtual {
        vm.store(address(vm), bytes32("failed"), bytes32(uint256(1)));
        _failed = true;
    }

    function assertTrue(bool data) internal pure virtual {
        vm.assertTrue(data);
    }

    function assertTrue(bool data, string memory err) internal pure virtual {
        vm.assertTrue(data, err);
    }

    function assertFalse(bool data) internal pure virtual {
        vm.assertFalse(data);
    }

    function assertFalse(bool data, string memory err) internal pure virtual {
        vm.assertFalse(data, err);
    }

    function assertEq(bool left, bool right) internal pure virtual {
        vm.assertEq(left, right);
    }

    function assertEq(bool left, bool right, string memory err) internal pure virtual {
        vm.assertEq(left, right, err);
    }

    function assertEq(uint256 left, uint256 right) internal pure virtual {
        vm.assertEq(left, right);
    }

    function assertEq(uint256 left, uint256 right, string memory err) internal pure virtual {
        vm.assertEq(left, right, err);
    }

    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
        vm.assertEqDecimal(left, right, decimals);
    }

    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {
        vm.assertEqDecimal(left, right, decimals, err);
    }

    function assertEq(int256 left, int256 right) internal pure virtual {
        vm.assertEq(left, right);
    }

    function assertEq(int256 left, int256 right, string memory err) internal pure virtual {
        vm.assertEq(left, right, err);
    }

    function assertEqDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
        vm.assertEqDecimal(left, right, decimals);
    }

    function assertEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
        vm.assertEqDecimal(left, right, decimals, err);
    }

    function assertEq(address left, address right) internal pure virtual {
        vm.assertEq(left, right);
    }

    function assertEq(address left, address right, string memory err) internal pure virtual {
        vm.assertEq(left, right, err);
    }

    function assertEq(bytes32 left, bytes32 right) internal pure virtual {
        vm.assertEq(left, right);
    }

    function assertEq(bytes32 left, bytes32 right, string memory err) internal pure virtual {
        vm.assertEq(left, right, err);
    }

    function assertEq32(bytes32 left, bytes32 right) internal pure virtual {
        assertEq(left, right);
    }

    function assertEq32(bytes32 left, bytes32 right, string memory err) internal pure virtual {
        assertEq(left, right, err);
    }

    function assertEq(string memory left, string memory right) internal pure virtual {
        vm.assertEq(left, right);
    }

    function assertEq(string memory left, string memory right, string memory err) internal pure virtual {
        vm.assertEq(left, right, err);
    }

    function assertEq(bytes memory left, bytes memory right) internal pure virtual {
        vm.assertEq(left, right);
    }

    function assertEq(bytes memory left, bytes memory right, string memory err) internal pure virtual {
        vm.assertEq(left, right, err);
    }

    function assertEq(bool[] memory left, bool[] memory right) internal pure virtual {
        vm.assertEq(left, right);
    }

    function assertEq(bool[] memory left, bool[] memory right, string memory err) internal pure virtual {
        vm.assertEq(left, right, err);
    }

    function assertEq(uint256[] memory left, uint256[] memory right) internal pure virtual {
        vm.assertEq(left, right);
    }

    function assertEq(uint256[] memory left, uint256[] memory right, string memory err) internal pure virtual {
        vm.assertEq(left, right, err);
    }

    function assertEq(int256[] memory left, int256[] memory right) internal pure virtual {
        vm.assertEq(left, right);
    }

    function assertEq(int256[] memory left, int256[] memory right, string memory err) internal pure virtual {
        vm.assertEq(left, right, err);
    }

    function assertEq(address[] memory left, address[] memory right) internal pure virtual {
        vm.assertEq(left, right);
    }

    function assertEq(address[] memory left, address[] memory right, string memory err) internal pure virtual {
        vm.assertEq(left, right, err);
    }

    function assertEq(bytes32[] memory left, bytes32[] memory right) internal pure virtual {
        vm.assertEq(left, right);
    }

    function assertEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal pure virtual {
        vm.assertEq(left, right, err);
    }

    function assertEq(string[] memory left, string[] memory right) internal pure virtual {
        vm.assertEq(left, right);
    }

    function assertEq(string[] memory left, string[] memory right, string memory err) internal pure virtual {
        vm.assertEq(left, right, err);
    }

    function assertEq(bytes[] memory left, bytes[] memory right) internal pure virtual {
        vm.assertEq(left, right);
    }

    function assertEq(bytes[] memory left, bytes[] memory right, string memory err) internal pure virtual {
        vm.assertEq(left, right, err);
    }

    // Legacy helper
    function assertEqUint(uint256 left, uint256 right) internal pure virtual {
        assertEq(left, right);
    }

    function assertNotEq(bool left, bool right) internal pure virtual {
        vm.assertNotEq(left, right);
    }

    function assertNotEq(bool left, bool right, string memory err) internal pure virtual {
        vm.assertNotEq(left, right, err);
    }

    function assertNotEq(uint256 left, uint256 right) internal pure virtual {
        vm.assertNotEq(left, right);
    }

    function assertNotEq(uint256 left, uint256 right, string memory err) internal pure virtual {
        vm.assertNotEq(left, right, err);
    }

    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
        vm.assertNotEqDecimal(left, right, decimals);
    }

    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err)
        internal
        pure
        virtual
    {
        vm.assertNotEqDecimal(left, right, decimals, err);
    }

    function assertNotEq(int256 left, int256 right) internal pure virtual {
        vm.assertNotEq(left, right);
    }

    function assertNotEq(int256 left, int256 right, string memory err) internal pure virtual {
        vm.assertNotEq(left, right, err);
    }

    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
        vm.assertNotEqDecimal(left, right, decimals);
    }

    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
        vm.assertNotEqDecimal(left, right, decimals, err);
    }

    function assertNotEq(address left, address right) internal pure virtual {
        vm.assertNotEq(left, right);
    }

    function assertNotEq(address left, address right, string memory err) internal pure virtual {
        vm.assertNotEq(left, right, err);
    }

    function assertNotEq(bytes32 left, bytes32 right) internal pure virtual {
        vm.assertNotEq(left, right);
    }

    function assertNotEq(bytes32 left, bytes32 right, string memory err) internal pure virtual {
        vm.assertNotEq(left, right, err);
    }

    function assertNotEq32(bytes32 left, bytes32 right) internal pure virtual {
        assertNotEq(left, right);
    }

    function assertNotEq32(bytes32 left, bytes32 right, string memory err) internal pure virtual {
        assertNotEq(left, right, err);
    }

    function assertNotEq(string memory left, string memory right) internal pure virtual {
        vm.assertNotEq(left, right);
    }

    function assertNotEq(string memory left, string memory right, string memory err) internal pure virtual {
        vm.assertNotEq(left, right, err);
    }

    function assertNotEq(bytes memory left, bytes memory right) internal pure virtual {
        vm.assertNotEq(left, right);
    }

    function assertNotEq(bytes memory left, bytes memory right, string memory err) internal pure virtual {
        vm.assertNotEq(left, right, err);
    }

    function assertNotEq(bool[] memory left, bool[] memory right) internal pure virtual {
        vm.assertNotEq(left, right);
    }

    function assertNotEq(bool[] memory left, bool[] memory right, string memory err) internal pure virtual {
        vm.assertNotEq(left, right, err);
    }

    function assertNotEq(uint256[] memory left, uint256[] memory right) internal pure virtual {
        vm.assertNotEq(left, right);
    }

    function assertNotEq(uint256[] memory left, uint256[] memory right, string memory err) internal pure virtual {
        vm.assertNotEq(left, right, err);
    }

    function assertNotEq(int256[] memory left, int256[] memory right) internal pure virtual {
        vm.assertNotEq(left, right);
    }

    function assertNotEq(int256[] memory left, int256[] memory right, string memory err) internal pure virtual {
        vm.assertNotEq(left, right, err);
    }

    function assertNotEq(address[] memory left, address[] memory right) internal pure virtual {
        vm.assertNotEq(left, right);
    }

    function assertNotEq(address[] memory left, address[] memory right, string memory err) internal pure virtual {
        vm.assertNotEq(left, right, err);
    }

    function assertNotEq(bytes32[] memory left, bytes32[] memory right) internal pure virtual {
        vm.assertNotEq(left, right);
    }

    function assertNotEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal pure virtual {
        vm.assertNotEq(left, right, err);
    }

    function assertNotEq(string[] memory left, string[] memory right) internal pure virtual {
        vm.assertNotEq(left, right);
    }

    function assertNotEq(string[] memory left, string[] memory right, string memory err) internal pure virtual {
        vm.assertNotEq(left, right, err);
    }

    function assertNotEq(bytes[] memory left, bytes[] memory right) internal pure virtual {
        vm.assertNotEq(left, right);
    }

    function assertNotEq(bytes[] memory left, bytes[] memory right, string memory err) internal pure virtual {
        vm.assertNotEq(left, right, err);
    }

    function assertLt(uint256 left, uint256 right) internal pure virtual {
        vm.assertLt(left, right);
    }

    function assertLt(uint256 left, uint256 right, string memory err) internal pure virtual {
        vm.assertLt(left, right, err);
    }

    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
        vm.assertLtDecimal(left, right, decimals);
    }

    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {
        vm.assertLtDecimal(left, right, decimals, err);
    }

    function assertLt(int256 left, int256 right) internal pure virtual {
        vm.assertLt(left, right);
    }

    function assertLt(int256 left, int256 right, string memory err) internal pure virtual {
        vm.assertLt(left, right, err);
    }

    function assertLtDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
        vm.assertLtDecimal(left, right, decimals);
    }

    function assertLtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
        vm.assertLtDecimal(left, right, decimals, err);
    }

    function assertGt(uint256 left, uint256 right) internal pure virtual {
        vm.assertGt(left, right);
    }

    function assertGt(uint256 left, uint256 right, string memory err) internal pure virtual {
        vm.assertGt(left, right, err);
    }

    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
        vm.assertGtDecimal(left, right, decimals);
    }

    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {
        vm.assertGtDecimal(left, right, decimals, err);
    }

    function assertGt(int256 left, int256 right) internal pure virtual {
        vm.assertGt(left, right);
    }

    function assertGt(int256 left, int256 right, string memory err) internal pure virtual {
        vm.assertGt(left, right, err);
    }

    function assertGtDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
        vm.assertGtDecimal(left, right, decimals);
    }

    function assertGtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
        vm.assertGtDecimal(left, right, decimals, err);
    }

    function assertLe(uint256 left, uint256 right) internal pure virtual {
        vm.assertLe(left, right);
    }

    function assertLe(uint256 left, uint256 right, string memory err) internal pure virtual {
        vm.assertLe(left, right, err);
    }

    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
        vm.assertLeDecimal(left, right, decimals);
    }

    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {
        vm.assertLeDecimal(left, right, decimals, err);
    }

    function assertLe(int256 left, int256 right) internal pure virtual {
        vm.assertLe(left, right);
    }

    function assertLe(int256 left, int256 right, string memory err) internal pure virtual {
        vm.assertLe(left, right, err);
    }

    function assertLeDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
        vm.assertLeDecimal(left, right, decimals);
    }

    function assertLeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
        vm.assertLeDecimal(left, right, decimals, err);
    }

    function assertGe(uint256 left, uint256 right) internal pure virtual {
        vm.assertGe(left, right);
    }

    function assertGe(uint256 left, uint256 right, string memory err) internal pure virtual {
        vm.assertGe(left, right, err);
    }

    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
        vm.assertGeDecimal(left, right, decimals);
    }

    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {
        vm.assertGeDecimal(left, right, decimals, err);
    }

    function assertGe(int256 left, int256 right) internal pure virtual {
        vm.assertGe(left, right);
    }

    function assertGe(int256 left, int256 right, string memory err) internal pure virtual {
        vm.assertGe(left, right, err);
    }

    function assertGeDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
        vm.assertGeDecimal(left, right, decimals);
    }

    function assertGeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
        vm.assertGeDecimal(left, right, decimals, err);
    }

    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) internal pure virtual {
        vm.assertApproxEqAbs(left, right, maxDelta);
    }

    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string memory err)
        internal
        pure
        virtual
    {
        vm.assertApproxEqAbs(left, right, maxDelta, err);
    }

    function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals)
        internal
        pure
        virtual
    {
        vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals);
    }

    function assertApproxEqAbsDecimal(
        uint256 left,
        uint256 right,
        uint256 maxDelta,
        uint256 decimals,
        string memory err
    ) internal pure virtual {
        vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals, err);
    }

    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) internal pure virtual {
        vm.assertApproxEqAbs(left, right, maxDelta);
    }

    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string memory err) internal pure virtual {
        vm.assertApproxEqAbs(left, right, maxDelta, err);
    }

    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals)
        internal
        pure
        virtual
    {
        vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals);
    }

    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals, string memory err)
        internal
        pure
        virtual
    {
        vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals, err);
    }

    function assertApproxEqRel(
        uint256 left,
        uint256 right,
        uint256 maxPercentDelta // An 18 decimal fixed point number, where 1e18 == 100%
    ) internal pure virtual {
        vm.assertApproxEqRel(left, right, maxPercentDelta);
    }

    function assertApproxEqRel(
        uint256 left,
        uint256 right,
        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
        string memory err
    ) internal pure virtual {
        vm.assertApproxEqRel(left, right, maxPercentDelta, err);
    }

    function assertApproxEqRelDecimal(
        uint256 left,
        uint256 right,
        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
        uint256 decimals
    ) internal pure virtual {
        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals);
    }

    function assertApproxEqRelDecimal(
        uint256 left,
        uint256 right,
        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
        uint256 decimals,
        string memory err
    ) internal pure virtual {
        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals, err);
    }

    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) internal pure virtual {
        vm.assertApproxEqRel(left, right, maxPercentDelta);
    }

    function assertApproxEqRel(
        int256 left,
        int256 right,
        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
        string memory err
    ) internal pure virtual {
        vm.assertApproxEqRel(left, right, maxPercentDelta, err);
    }

    function assertApproxEqRelDecimal(
        int256 left,
        int256 right,
        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
        uint256 decimals
    ) internal pure virtual {
        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals);
    }

    function assertApproxEqRelDecimal(
        int256 left,
        int256 right,
        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
        uint256 decimals,
        string memory err
    ) internal pure virtual {
        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals, err);
    }

    // Inherited from DSTest, not used but kept for backwards-compatibility
    function checkEq0(bytes memory left, bytes memory right) internal pure returns (bool) {
        return keccak256(left) == keccak256(right);
    }

    function assertEq0(bytes memory left, bytes memory right) internal pure virtual {
        assertEq(left, right);
    }

    function assertEq0(bytes memory left, bytes memory right, string memory err) internal pure virtual {
        assertEq(left, right, err);
    }

    function assertNotEq0(bytes memory left, bytes memory right) internal pure virtual {
        assertNotEq(left, right);
    }

    function assertNotEq0(bytes memory left, bytes memory right, string memory err) internal pure virtual {
        assertNotEq(left, right, err);
    }

    function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB) internal virtual {
        assertEqCall(target, callDataA, target, callDataB, true);
    }

    function assertEqCall(address targetA, bytes memory callDataA, address targetB, bytes memory callDataB)
        internal
        virtual
    {
        assertEqCall(targetA, callDataA, targetB, callDataB, true);
    }

    function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB, bool strictRevertData)
        internal
        virtual
    {
        assertEqCall(target, callDataA, target, callDataB, strictRevertData);
    }

    function assertEqCall(
        address targetA,
        bytes memory callDataA,
        address targetB,
        bytes memory callDataB,
        bool strictRevertData
    ) internal virtual {
        (bool successA, bytes memory returnDataA) = address(targetA).call(callDataA);
        (bool successB, bytes memory returnDataB) = address(targetB).call(callDataB);

        if (successA && successB) {
            assertEq(returnDataA, returnDataB, "Call return data does not match");
        }

        if (!successA && !successB && strictRevertData) {
            assertEq(returnDataA, returnDataB, "Call revert data does not match");
        }

        if (!successA && successB) {
            emit log("Error: Calls were not equal");
            emit log_named_bytes("  Left call revert data", returnDataA);
            emit log_named_bytes(" Right call return data", returnDataB);
            revert("assertion failed");
        }

        if (successA && !successB) {
            emit log("Error: Calls were not equal");
            emit log_named_bytes("  Left call return data", returnDataA);
            emit log_named_bytes(" Right call revert data", returnDataB);
            revert("assertion failed");
        }
    }
}

================
File: lib/forge-std/src/StdChains.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

import {VmSafe} from "./Vm.sol";

/**
 * StdChains provides information about EVM compatible chains that can be used in scripts/tests.
 * For each chain, the chain's name, chain ID, and a default RPC URL are provided. Chains are
 * identified by their alias, which is the same as the alias in the `[rpc_endpoints]` section of
 * the `foundry.toml` file. For best UX, ensure the alias in the `foundry.toml` file match the
 * alias used in this contract, which can be found as the first argument to the
 * `setChainWithDefaultRpcUrl` call in the `initializeStdChains` function.
 *
 * There are two main ways to use this contract:
 *   1. Set a chain with `setChain(string memory chainAlias, ChainData memory chain)` or
 *      `setChain(string memory chainAlias, Chain memory chain)`
 *   2. Get a chain with `getChain(string memory chainAlias)` or `getChain(uint256 chainId)`.
 *
 * The first time either of those are used, chains are initialized with the default set of RPC URLs.
 * This is done in `initializeStdChains`, which uses `setChainWithDefaultRpcUrl`. Defaults are recorded in
 * `defaultRpcUrls`.
 *
 * The `setChain` function is straightforward, and it simply saves off the given chain data.
 *
 * The `getChain` methods use `getChainWithUpdatedRpcUrl` to return a chain. For example, let's say
 * we want to retrieve the RPC URL for `mainnet`:
 *   - If you have specified data with `setChain`, it will return that.
 *   - If you have configured a mainnet RPC URL in `foundry.toml`, it will return the URL, provided it
 *     is valid (e.g. a URL is specified, or an environment variable is given and exists).
 *   - If neither of the above conditions is met, the default data is returned.
 *
 * Summarizing the above, the prioritization hierarchy is `setChain` -> `foundry.toml` -> environment variable -> defaults.
 */
abstract contract StdChains {
    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));

    bool private stdChainsInitialized;

    struct ChainData {
        string name;
        uint256 chainId;
        string rpcUrl;
    }

    struct Chain {
        // The chain name.
        string name;
        // The chain's Chain ID.
        uint256 chainId;
        // The chain's alias. (i.e. what gets specified in `foundry.toml`).
        string chainAlias;
        // A default RPC endpoint for this chain.
        // NOTE: This default RPC URL is included for convenience to facilitate quick tests and
        // experimentation. Do not use this RPC URL for production test suites, CI, or other heavy
        // usage as you will be throttled and this is a disservice to others who need this endpoint.
        string rpcUrl;
    }

    // Maps from the chain's alias (matching the alias in the `foundry.toml` file) to chain data.
    mapping(string => Chain) private chains;
    // Maps from the chain's alias to it's default RPC URL.
    mapping(string => string) private defaultRpcUrls;
    // Maps from a chain ID to it's alias.
    mapping(uint256 => string) private idToAlias;

    bool private fallbackToDefaultRpcUrls = true;

    // The RPC URL will be fetched from config or defaultRpcUrls if possible.
    function getChain(string memory chainAlias) internal virtual returns (Chain memory chain) {
        require(bytes(chainAlias).length != 0, "StdChains getChain(string): Chain alias cannot be the empty string.");

        initializeStdChains();
        chain = chains[chainAlias];
        require(
            chain.chainId != 0,
            string(abi.encodePacked("StdChains getChain(string): Chain with alias \"", chainAlias, "\" not found."))
        );

        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);
    }

    function getChain(uint256 chainId) internal virtual returns (Chain memory chain) {
        require(chainId != 0, "StdChains getChain(uint256): Chain ID cannot be 0.");
        initializeStdChains();
        string memory chainAlias = idToAlias[chainId];

        chain = chains[chainAlias];

        require(
            chain.chainId != 0,
            string(abi.encodePacked("StdChains getChain(uint256): Chain with ID ", vm.toString(chainId), " not found."))
        );

        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);
    }

    // set chain info, with priority to argument's rpcUrl field.
    function setChain(string memory chainAlias, ChainData memory chain) internal virtual {
        require(
            bytes(chainAlias).length != 0,
            "StdChains setChain(string,ChainData): Chain alias cannot be the empty string."
        );

        require(chain.chainId != 0, "StdChains setChain(string,ChainData): Chain ID cannot be 0.");

        initializeStdChains();
        string memory foundAlias = idToAlias[chain.chainId];

        require(
            bytes(foundAlias).length == 0 || keccak256(bytes(foundAlias)) == keccak256(bytes(chainAlias)),
            string(
                abi.encodePacked(
                    "StdChains setChain(string,ChainData): Chain ID ",
                    vm.toString(chain.chainId),
                    " already used by \"",
                    foundAlias,
                    "\"."
                )
            )
        );

        uint256 oldChainId = chains[chainAlias].chainId;
        delete idToAlias[oldChainId];

        chains[chainAlias] =
            Chain({name: chain.name, chainId: chain.chainId, chainAlias: chainAlias, rpcUrl: chain.rpcUrl});
        idToAlias[chain.chainId] = chainAlias;
    }

    // set chain info, with priority to argument's rpcUrl field.
    function setChain(string memory chainAlias, Chain memory chain) internal virtual {
        setChain(chainAlias, ChainData({name: chain.name, chainId: chain.chainId, rpcUrl: chain.rpcUrl}));
    }

    function _toUpper(string memory str) private pure returns (string memory) {
        bytes memory strb = bytes(str);
        bytes memory copy = new bytes(strb.length);
        for (uint256 i = 0; i < strb.length; i++) {
            bytes1 b = strb[i];
            if (b >= 0x61 && b <= 0x7A) {
                copy[i] = bytes1(uint8(b) - 32);
            } else {
                copy[i] = b;
            }
        }
        return string(copy);
    }

    // lookup rpcUrl, in descending order of priority:
    // current -> config (foundry.toml) -> environment variable -> default
    function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain)
        private
        view
        returns (Chain memory)
    {
        if (bytes(chain.rpcUrl).length == 0) {
            try vm.rpcUrl(chainAlias) returns (string memory configRpcUrl) {
                chain.rpcUrl = configRpcUrl;
            } catch (bytes memory err) {
                string memory envName = string(abi.encodePacked(_toUpper(chainAlias), "_RPC_URL"));
                if (fallbackToDefaultRpcUrls) {
                    chain.rpcUrl = vm.envOr(envName, defaultRpcUrls[chainAlias]);
                } else {
                    chain.rpcUrl = vm.envString(envName);
                }
                // Distinguish 'not found' from 'cannot read'
                // The upstream error thrown by forge for failing cheats changed so we check both the old and new versions
                bytes memory oldNotFoundError =
                    abi.encodeWithSignature("CheatCodeError", string(abi.encodePacked("invalid rpc url ", chainAlias)));
                bytes memory newNotFoundError = abi.encodeWithSignature(
                    "CheatcodeError(string)", string(abi.encodePacked("invalid rpc url: ", chainAlias))
                );
                bytes32 errHash = keccak256(err);
                if (
                    (errHash != keccak256(oldNotFoundError) && errHash != keccak256(newNotFoundError))
                        || bytes(chain.rpcUrl).length == 0
                ) {
                    /// @solidity memory-safe-assembly
                    assembly {
                        revert(add(32, err), mload(err))
                    }
                }
            }
        }
        return chain;
    }

    function setFallbackToDefaultRpcUrls(bool useDefault) internal {
        fallbackToDefaultRpcUrls = useDefault;
    }

    function initializeStdChains() private {
        if (stdChainsInitialized) return;

        stdChainsInitialized = true;

        // If adding an RPC here, make sure to test the default RPC URL in `test_Rpcs` in `StdChains.t.sol`
        setChainWithDefaultRpcUrl("anvil", ChainData("Anvil", 31337, "http://127.0.0.1:8545"));
        setChainWithDefaultRpcUrl(
            "mainnet", ChainData("Mainnet", 1, "https://eth-mainnet.alchemyapi.io/v2/pwc5rmJhrdoaSEfimoKEmsvOjKSmPDrP")
        );
        setChainWithDefaultRpcUrl(
            "sepolia", ChainData("Sepolia", 11155111, "https://sepolia.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001")
        );
        setChainWithDefaultRpcUrl("holesky", ChainData("Holesky", 17000, "https://rpc.holesky.ethpandaops.io"));
        setChainWithDefaultRpcUrl("optimism", ChainData("Optimism", 10, "https://mainnet.optimism.io"));
        setChainWithDefaultRpcUrl(
            "optimism_sepolia", ChainData("Optimism Sepolia", 11155420, "https://sepolia.optimism.io")
        );
        setChainWithDefaultRpcUrl("arbitrum_one", ChainData("Arbitrum One", 42161, "https://arb1.arbitrum.io/rpc"));
        setChainWithDefaultRpcUrl(
            "arbitrum_one_sepolia", ChainData("Arbitrum One Sepolia", 421614, "https://sepolia-rollup.arbitrum.io/rpc")
        );
        setChainWithDefaultRpcUrl("arbitrum_nova", ChainData("Arbitrum Nova", 42170, "https://nova.arbitrum.io/rpc"));
        setChainWithDefaultRpcUrl("polygon", ChainData("Polygon", 137, "https://polygon-rpc.com"));
        setChainWithDefaultRpcUrl(
            "polygon_amoy", ChainData("Polygon Amoy", 80002, "https://rpc-amoy.polygon.technology")
        );
        setChainWithDefaultRpcUrl("avalanche", ChainData("Avalanche", 43114, "https://api.avax.network/ext/bc/C/rpc"));
        setChainWithDefaultRpcUrl(
            "avalanche_fuji", ChainData("Avalanche Fuji", 43113, "https://api.avax-test.network/ext/bc/C/rpc")
        );
        setChainWithDefaultRpcUrl(
            "bnb_smart_chain", ChainData("BNB Smart Chain", 56, "https://bsc-dataseed1.binance.org")
        );
        setChainWithDefaultRpcUrl(
            "bnb_smart_chain_testnet",
            ChainData("BNB Smart Chain Testnet", 97, "https://rpc.ankr.com/bsc_testnet_chapel")
        );
        setChainWithDefaultRpcUrl("gnosis_chain", ChainData("Gnosis Chain", 100, "https://rpc.gnosischain.com"));
        setChainWithDefaultRpcUrl("moonbeam", ChainData("Moonbeam", 1284, "https://rpc.api.moonbeam.network"));
        setChainWithDefaultRpcUrl(
            "moonriver", ChainData("Moonriver", 1285, "https://rpc.api.moonriver.moonbeam.network")
        );
        setChainWithDefaultRpcUrl("moonbase", ChainData("Moonbase", 1287, "https://rpc.testnet.moonbeam.network"));
        setChainWithDefaultRpcUrl("base_sepolia", ChainData("Base Sepolia", 84532, "https://sepolia.base.org"));
        setChainWithDefaultRpcUrl("base", ChainData("Base", 8453, "https://mainnet.base.org"));
        setChainWithDefaultRpcUrl("blast_sepolia", ChainData("Blast Sepolia", 168587773, "https://sepolia.blast.io"));
        setChainWithDefaultRpcUrl("blast", ChainData("Blast", 81457, "https://rpc.blast.io"));
        setChainWithDefaultRpcUrl("fantom_opera", ChainData("Fantom Opera", 250, "https://rpc.ankr.com/fantom/"));
        setChainWithDefaultRpcUrl(
            "fantom_opera_testnet", ChainData("Fantom Opera Testnet", 4002, "https://rpc.ankr.com/fantom_testnet/")
        );
        setChainWithDefaultRpcUrl("fraxtal", ChainData("Fraxtal", 252, "https://rpc.frax.com"));
        setChainWithDefaultRpcUrl("fraxtal_testnet", ChainData("Fraxtal Testnet", 2522, "https://rpc.testnet.frax.com"));
        setChainWithDefaultRpcUrl(
            "berachain_bartio_testnet", ChainData("Berachain bArtio Testnet", 80084, "https://bartio.rpc.berachain.com")
        );
        setChainWithDefaultRpcUrl("flare", ChainData("Flare", 14, "https://flare-api.flare.network/ext/C/rpc"));
        setChainWithDefaultRpcUrl(
            "flare_coston2", ChainData("Flare Coston2", 114, "https://coston2-api.flare.network/ext/C/rpc")
        );

        setChainWithDefaultRpcUrl("mode", ChainData("Mode", 34443, "https://mode.drpc.org"));
        setChainWithDefaultRpcUrl("mode_sepolia", ChainData("Mode Sepolia", 919, "https://sepolia.mode.network"));

        setChainWithDefaultRpcUrl("zora", ChainData("Zora", 7777777, "https://zora.drpc.org"));
        setChainWithDefaultRpcUrl(
            "zora_sepolia", ChainData("Zora Sepolia", 999999999, "https://sepolia.rpc.zora.energy")
        );

        setChainWithDefaultRpcUrl("race", ChainData("Race", 6805, "https://racemainnet.io"));
        setChainWithDefaultRpcUrl("race_sepolia", ChainData("Race Sepolia", 6806, "https://racemainnet.io"));

        setChainWithDefaultRpcUrl("metal", ChainData("Metal", 1750, "https://metall2.drpc.org"));
        setChainWithDefaultRpcUrl("metal_sepolia", ChainData("Metal Sepolia", 1740, "https://testnet.rpc.metall2.com"));

        setChainWithDefaultRpcUrl("binary", ChainData("Binary", 624, "https://rpc.zero.thebinaryholdings.com"));
        setChainWithDefaultRpcUrl(
            "binary_sepolia", ChainData("Binary Sepolia", 625, "https://rpc.zero.thebinaryholdings.com")
        );

        setChainWithDefaultRpcUrl("orderly", ChainData("Orderly", 291, "https://rpc.orderly.network"));
        setChainWithDefaultRpcUrl(
            "orderly_sepolia", ChainData("Orderly Sepolia", 4460, "https://testnet-rpc.orderly.org")
        );
    }

    // set chain info, with priority to chainAlias' rpc url in foundry.toml
    function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private {
        string memory rpcUrl = chain.rpcUrl;
        defaultRpcUrls[chainAlias] = rpcUrl;
        chain.rpcUrl = "";
        setChain(chainAlias, chain);
        chain.rpcUrl = rpcUrl; // restore argument
    }
}

================
File: lib/forge-std/src/StdCheats.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

pragma experimental ABIEncoderV2;

import {StdStorage, stdStorage} from "./StdStorage.sol";
import {console2} from "./console2.sol";
import {Vm} from "./Vm.sol";

abstract contract StdCheatsSafe {
    Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));

    uint256 private constant UINT256_MAX =
        115792089237316195423570985008687907853269984665640564039457584007913129639935;

    bool private gasMeteringOff;

    // Data structures to parse Transaction objects from the broadcast artifact
    // that conform to EIP1559. The Raw structs is what is parsed from the JSON
    // and then converted to the one that is used by the user for better UX.

    struct RawTx1559 {
        string[] arguments;
        address contractAddress;
        string contractName;
        // json value name = function
        string functionSig;
        bytes32 hash;
        // json value name = tx
        RawTx1559Detail txDetail;
        // json value name = type
        string opcode;
    }

    struct RawTx1559Detail {
        AccessList[] accessList;
        bytes data;
        address from;
        bytes gas;
        bytes nonce;
        address to;
        bytes txType;
        bytes value;
    }

    struct Tx1559 {
        string[] arguments;
        address contractAddress;
        string contractName;
        string functionSig;
        bytes32 hash;
        Tx1559Detail txDetail;
        string opcode;
    }

    struct Tx1559Detail {
        AccessList[] accessList;
        bytes data;
        address from;
        uint256 gas;
        uint256 nonce;
        address to;
        uint256 txType;
        uint256 value;
    }

    // Data structures to parse Transaction objects from the broadcast artifact
    // that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON
    // and then converted to the one that is used by the user for better UX.

    struct TxLegacy {
        string[] arguments;
        address contractAddress;
        string contractName;
        string functionSig;
        string hash;
        string opcode;
        TxDetailLegacy transaction;
    }

    struct TxDetailLegacy {
        AccessList[] accessList;
        uint256 chainId;
        bytes data;
        address from;
        uint256 gas;
        uint256 gasPrice;
        bytes32 hash;
        uint256 nonce;
        bytes1 opcode;
        bytes32 r;
        bytes32 s;
        uint256 txType;
        address to;
        uint8 v;
        uint256 value;
    }

    struct AccessList {
        address accessAddress;
        bytes32[] storageKeys;
    }

    // Data structures to parse Receipt objects from the broadcast artifact.
    // The Raw structs is what is parsed from the JSON
    // and then converted to the one that is used by the user for better UX.

    struct RawReceipt {
        bytes32 blockHash;
        bytes blockNumber;
        address contractAddress;
        bytes cumulativeGasUsed;
        bytes effectiveGasPrice;
        address from;
        bytes gasUsed;
        RawReceiptLog[] logs;
        bytes logsBloom;
        bytes status;
        address to;
        bytes32 transactionHash;
        bytes transactionIndex;
    }

    struct Receipt {
        bytes32 blockHash;
        uint256 blockNumber;
        address contractAddress;
        uint256 cumulativeGasUsed;
        uint256 effectiveGasPrice;
        address from;
        uint256 gasUsed;
        ReceiptLog[] logs;
        bytes logsBloom;
        uint256 status;
        address to;
        bytes32 transactionHash;
        uint256 transactionIndex;
    }

    // Data structures to parse the entire broadcast artifact, assuming the
    // transactions conform to EIP1559.

    struct EIP1559ScriptArtifact {
        string[] libraries;
        string path;
        string[] pending;
        Receipt[] receipts;
        uint256 timestamp;
        Tx1559[] transactions;
        TxReturn[] txReturns;
    }

    struct RawEIP1559ScriptArtifact {
        string[] libraries;
        string path;
        string[] pending;
        RawReceipt[] receipts;
        TxReturn[] txReturns;
        uint256 timestamp;
        RawTx1559[] transactions;
    }

    struct RawReceiptLog {
        // json value = address
        address logAddress;
        bytes32 blockHash;
        bytes blockNumber;
        bytes data;
        bytes logIndex;
        bool removed;
        bytes32[] topics;
        bytes32 transactionHash;
        bytes transactionIndex;
        bytes transactionLogIndex;
    }

    struct ReceiptLog {
        // json value = address
        address logAddress;
        bytes32 blockHash;
        uint256 blockNumber;
        bytes data;
        uint256 logIndex;
        bytes32[] topics;
        uint256 transactionIndex;
        uint256 transactionLogIndex;
        bool removed;
    }

    struct TxReturn {
        string internalType;
        string value;
    }

    struct Account {
        address addr;
        uint256 key;
    }

    enum AddressType {
        Payable,
        NonPayable,
        ZeroAddress,
        Precompile,
        ForgeAddress
    }

    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.
    function assumeNotBlacklisted(address token, address addr) internal view virtual {
        // Nothing to check if `token` is not a contract.
        uint256 tokenCodeSize;
        assembly {
            tokenCodeSize := extcodesize(token)
        }
        require(tokenCodeSize > 0, "StdCheats assumeNotBlacklisted(address,address): Token address is not a contract.");

        bool success;
        bytes memory returnData;

        // 4-byte selector for `isBlacklisted(address)`, used by USDC.
        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87, addr));
        vm.assume(!success || abi.decode(returnData, (bool)) == false);

        // 4-byte selector for `isBlackListed(address)`, used by USDT.
        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060, addr));
        vm.assume(!success || abi.decode(returnData, (bool)) == false);
    }

    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.
    // This is identical to `assumeNotBlacklisted(address,address)` but with a different name, for
    // backwards compatibility, since this name was used in the original PR which already has
    // a release. This function can be removed in a future release once we want a breaking change.
    function assumeNoBlacklisted(address token, address addr) internal view virtual {
        assumeNotBlacklisted(token, addr);
    }

    function assumeAddressIsNot(address addr, AddressType addressType) internal virtual {
        if (addressType == AddressType.Payable) {
            assumeNotPayable(addr);
        } else if (addressType == AddressType.NonPayable) {
            assumePayable(addr);
        } else if (addressType == AddressType.ZeroAddress) {
            assumeNotZeroAddress(addr);
        } else if (addressType == AddressType.Precompile) {
            assumeNotPrecompile(addr);
        } else if (addressType == AddressType.ForgeAddress) {
            assumeNotForgeAddress(addr);
        }
    }

    function assumeAddressIsNot(address addr, AddressType addressType1, AddressType addressType2) internal virtual {
        assumeAddressIsNot(addr, addressType1);
        assumeAddressIsNot(addr, addressType2);
    }

    function assumeAddressIsNot(
        address addr,
        AddressType addressType1,
        AddressType addressType2,
        AddressType addressType3
    ) internal virtual {
        assumeAddressIsNot(addr, addressType1);
        assumeAddressIsNot(addr, addressType2);
        assumeAddressIsNot(addr, addressType3);
    }

    function assumeAddressIsNot(
        address addr,
        AddressType addressType1,
        AddressType addressType2,
        AddressType addressType3,
        AddressType addressType4
    ) internal virtual {
        assumeAddressIsNot(addr, addressType1);
        assumeAddressIsNot(addr, addressType2);
        assumeAddressIsNot(addr, addressType3);
        assumeAddressIsNot(addr, addressType4);
    }

    // This function checks whether an address, `addr`, is payable. It works by sending 1 wei to
    // `addr` and checking the `success` return value.
    // NOTE: This function may result in state changes depending on the fallback/receive logic
    // implemented by `addr`, which should be taken into account when this function is used.
    function _isPayable(address addr) private returns (bool) {
        require(
            addr.balance < UINT256_MAX,
            "StdCheats _isPayable(address): Balance equals max uint256, so it cannot receive any more funds"
        );
        uint256 origBalanceTest = address(this).balance;
        uint256 origBalanceAddr = address(addr).balance;

        vm.deal(address(this), 1);
        (bool success,) = payable(addr).call{value: 1}("");

        // reset balances
        vm.deal(address(this), origBalanceTest);
        vm.deal(addr, origBalanceAddr);

        return success;
    }

    // NOTE: This function may result in state changes depending on the fallback/receive logic
    // implemented by `addr`, which should be taken into account when this function is used. See the
    // `_isPayable` method for more information.
    function assumePayable(address addr) internal virtual {
        vm.assume(_isPayable(addr));
    }

    function assumeNotPayable(address addr) internal virtual {
        vm.assume(!_isPayable(addr));
    }

    function assumeNotZeroAddress(address addr) internal pure virtual {
        vm.assume(addr != address(0));
    }

    function assumeNotPrecompile(address addr) internal pure virtual {
        assumeNotPrecompile(addr, _pureChainId());
    }

    function assumeNotPrecompile(address addr, uint256 chainId) internal pure virtual {
        // Note: For some chains like Optimism these are technically predeploys (i.e. bytecode placed at a specific
        // address), but the same rationale for excluding them applies so we include those too.

        // These are reserved by Ethereum and may be on all EVM-compatible chains.
        vm.assume(addr < address(0x1) || addr > address(0xff));

        // forgefmt: disable-start
        if (chainId == 10 || chainId == 420) {
            // https://github.com/ethereum-optimism/optimism/blob/eaa371a0184b56b7ca6d9eb9cb0a2b78b2ccd864/op-bindings/predeploys/addresses.go#L6-L21
            vm.assume(addr < address(0x4200000000000000000000000000000000000000) || addr > address(0x4200000000000000000000000000000000000800));
        } else if (chainId == 42161 || chainId == 421613) {
            // https://developer.arbitrum.io/useful-addresses#arbitrum-precompiles-l2-same-on-all-arb-chains
            vm.assume(addr < address(0x0000000000000000000000000000000000000064) || addr > address(0x0000000000000000000000000000000000000068));
        } else if (chainId == 43114 || chainId == 43113) {
            // https://github.com/ava-labs/subnet-evm/blob/47c03fd007ecaa6de2c52ea081596e0a88401f58/precompile/params.go#L18-L59
            vm.assume(addr < address(0x0100000000000000000000000000000000000000) || addr > address(0x01000000000000000000000000000000000000ff));
            vm.assume(addr < address(0x0200000000000000000000000000000000000000) || addr > address(0x02000000000000000000000000000000000000FF));
            vm.assume(addr < address(0x0300000000000000000000000000000000000000) || addr > address(0x03000000000000000000000000000000000000Ff));
        }
        // forgefmt: disable-end
    }

    function assumeNotForgeAddress(address addr) internal pure virtual {
        // vm, console, and Create2Deployer addresses
        vm.assume(
            addr != address(vm) && addr != 0x000000000000000000636F6e736F6c652e6c6f67
                && addr != 0x4e59b44847b379578588920cA78FbF26c0B4956C
        );
    }

    function assumeUnusedAddress(address addr) internal view virtual {
        uint256 size;
        assembly {
            size := extcodesize(addr)
        }
        vm.assume(size == 0);

        assumeNotPrecompile(addr);
        assumeNotZeroAddress(addr);
        assumeNotForgeAddress(addr);
    }

    function readEIP1559ScriptArtifact(string memory path)
        internal
        view
        virtual
        returns (EIP1559ScriptArtifact memory)
    {
        string memory data = vm.readFile(path);
        bytes memory parsedData = vm.parseJson(data);
        RawEIP1559ScriptArtifact memory rawArtifact = abi.decode(parsedData, (RawEIP1559ScriptArtifact));
        EIP1559ScriptArtifact memory artifact;
        artifact.libraries = rawArtifact.libraries;
        artifact.path = rawArtifact.path;
        artifact.timestamp = rawArtifact.timestamp;
        artifact.pending = rawArtifact.pending;
        artifact.txReturns = rawArtifact.txReturns;
        artifact.receipts = rawToConvertedReceipts(rawArtifact.receipts);
        artifact.transactions = rawToConvertedEIPTx1559s(rawArtifact.transactions);
        return artifact;
    }

    function rawToConvertedEIPTx1559s(RawTx1559[] memory rawTxs) internal pure virtual returns (Tx1559[] memory) {
        Tx1559[] memory txs = new Tx1559[](rawTxs.length);
        for (uint256 i; i < rawTxs.length; i++) {
            txs[i] = rawToConvertedEIPTx1559(rawTxs[i]);
        }
        return txs;
    }

    function rawToConvertedEIPTx1559(RawTx1559 memory rawTx) internal pure virtual returns (Tx1559 memory) {
        Tx1559 memory transaction;
        transaction.arguments = rawTx.arguments;
        transaction.contractName = rawTx.contractName;
        transaction.functionSig = rawTx.functionSig;
        transaction.hash = rawTx.hash;
        transaction.txDetail = rawToConvertedEIP1559Detail(rawTx.txDetail);
        transaction.opcode = rawTx.opcode;
        return transaction;
    }

    function rawToConvertedEIP1559Detail(RawTx1559Detail memory rawDetail)
        internal
        pure
        virtual
        returns (Tx1559Detail memory)
    {
        Tx1559Detail memory txDetail;
        txDetail.data = rawDetail.data;
        txDetail.from = rawDetail.from;
        txDetail.to = rawDetail.to;
        txDetail.nonce = _bytesToUint(rawDetail.nonce);
        txDetail.txType = _bytesToUint(rawDetail.txType);
        txDetail.value = _bytesToUint(rawDetail.value);
        txDetail.gas = _bytesToUint(rawDetail.gas);
        txDetail.accessList = rawDetail.accessList;
        return txDetail;
    }

    function readTx1559s(string memory path) internal view virtual returns (Tx1559[] memory) {
        string memory deployData = vm.readFile(path);
        bytes memory parsedDeployData = vm.parseJson(deployData, ".transactions");
        RawTx1559[] memory rawTxs = abi.decode(parsedDeployData, (RawTx1559[]));
        return rawToConvertedEIPTx1559s(rawTxs);
    }

    function readTx1559(string memory path, uint256 index) internal view virtual returns (Tx1559 memory) {
        string memory deployData = vm.readFile(path);
        string memory key = string(abi.encodePacked(".transactions[", vm.toString(index), "]"));
        bytes memory parsedDeployData = vm.parseJson(deployData, key);
        RawTx1559 memory rawTx = abi.decode(parsedDeployData, (RawTx1559));
        return rawToConvertedEIPTx1559(rawTx);
    }

    // Analogous to readTransactions, but for receipts.
    function readReceipts(string memory path) internal view virtual returns (Receipt[] memory) {
        string memory deployData = vm.readFile(path);
        bytes memory parsedDeployData = vm.parseJson(deployData, ".receipts");
        RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));
        return rawToConvertedReceipts(rawReceipts);
    }

    function readReceipt(string memory path, uint256 index) internal view virtual returns (Receipt memory) {
        string memory deployData = vm.readFile(path);
        string memory key = string(abi.encodePacked(".receipts[", vm.toString(index), "]"));
        bytes memory parsedDeployData = vm.parseJson(deployData, key);
        RawReceipt memory rawReceipt = abi.decode(parsedDeployData, (RawReceipt));
        return rawToConvertedReceipt(rawReceipt);
    }

    function rawToConvertedReceipts(RawReceipt[] memory rawReceipts) internal pure virtual returns (Receipt[] memory) {
        Receipt[] memory receipts = new Receipt[](rawReceipts.length);
        for (uint256 i; i < rawReceipts.length; i++) {
            receipts[i] = rawToConvertedReceipt(rawReceipts[i]);
        }
        return receipts;
    }

    function rawToConvertedReceipt(RawReceipt memory rawReceipt) internal pure virtual returns (Receipt memory) {
        Receipt memory receipt;
        receipt.blockHash = rawReceipt.blockHash;
        receipt.to = rawReceipt.to;
        receipt.from = rawReceipt.from;
        receipt.contractAddress = rawReceipt.contractAddress;
        receipt.effectiveGasPrice = _bytesToUint(rawReceipt.effectiveGasPrice);
        receipt.cumulativeGasUsed = _bytesToUint(rawReceipt.cumulativeGasUsed);
        receipt.gasUsed = _bytesToUint(rawReceipt.gasUsed);
        receipt.status = _bytesToUint(rawReceipt.status);
        receipt.transactionIndex = _bytesToUint(rawReceipt.transactionIndex);
        receipt.blockNumber = _bytesToUint(rawReceipt.blockNumber);
        receipt.logs = rawToConvertedReceiptLogs(rawReceipt.logs);
        receipt.logsBloom = rawReceipt.logsBloom;
        receipt.transactionHash = rawReceipt.transactionHash;
        return receipt;
    }

    function rawToConvertedReceiptLogs(RawReceiptLog[] memory rawLogs)
        internal
        pure
        virtual
        returns (ReceiptLog[] memory)
    {
        ReceiptLog[] memory logs = new ReceiptLog[](rawLogs.length);
        for (uint256 i; i < rawLogs.length; i++) {
            logs[i].logAddress = rawLogs[i].logAddress;
            logs[i].blockHash = rawLogs[i].blockHash;
            logs[i].blockNumber = _bytesToUint(rawLogs[i].blockNumber);
            logs[i].data = rawLogs[i].data;
            logs[i].logIndex = _bytesToUint(rawLogs[i].logIndex);
            logs[i].topics = rawLogs[i].topics;
            logs[i].transactionIndex = _bytesToUint(rawLogs[i].transactionIndex);
            logs[i].transactionLogIndex = _bytesToUint(rawLogs[i].transactionLogIndex);
            logs[i].removed = rawLogs[i].removed;
        }
        return logs;
    }

    // Deploy a contract by fetching the contract bytecode from
    // the artifacts directory
    // e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`
    function deployCode(string memory what, bytes memory args) internal virtual returns (address addr) {
        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);
        /// @solidity memory-safe-assembly
        assembly {
            addr := create(0, add(bytecode, 0x20), mload(bytecode))
        }

        require(addr != address(0), "StdCheats deployCode(string,bytes): Deployment failed.");
    }

    function deployCode(string memory what) internal virtual returns (address addr) {
        bytes memory bytecode = vm.getCode(what);
        /// @solidity memory-safe-assembly
        assembly {
            addr := create(0, add(bytecode, 0x20), mload(bytecode))
        }

        require(addr != address(0), "StdCheats deployCode(string): Deployment failed.");
    }

    /// @dev deploy contract with value on construction
    function deployCode(string memory what, bytes memory args, uint256 val) internal virtual returns (address addr) {
        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);
        /// @solidity memory-safe-assembly
        assembly {
            addr := create(val, add(bytecode, 0x20), mload(bytecode))
        }

        require(addr != address(0), "StdCheats deployCode(string,bytes,uint256): Deployment failed.");
    }

    function deployCode(string memory what, uint256 val) internal virtual returns (address addr) {
        bytes memory bytecode = vm.getCode(what);
        /// @solidity memory-safe-assembly
        assembly {
            addr := create(val, add(bytecode, 0x20), mload(bytecode))
        }

        require(addr != address(0), "StdCheats deployCode(string,uint256): Deployment failed.");
    }

    // creates a labeled address and the corresponding private key
    function makeAddrAndKey(string memory name) internal virtual returns (address addr, uint256 privateKey) {
        privateKey = uint256(keccak256(abi.encodePacked(name)));
        addr = vm.addr(privateKey);
        vm.label(addr, name);
    }

    // creates a labeled address
    function makeAddr(string memory name) internal virtual returns (address addr) {
        (addr,) = makeAddrAndKey(name);
    }

    // Destroys an account immediately, sending the balance to beneficiary.
    // Destroying means: balance will be zero, code will be empty, and nonce will be 0
    // This is similar to selfdestruct but not identical: selfdestruct destroys code and nonce
    // only after tx ends, this will run immediately.
    function destroyAccount(address who, address beneficiary) internal virtual {
        uint256 currBalance = who.balance;
        vm.etch(who, abi.encode());
        vm.deal(who, 0);
        vm.resetNonce(who);

        uint256 beneficiaryBalance = beneficiary.balance;
        vm.deal(beneficiary, currBalance + beneficiaryBalance);
    }

    // creates a struct containing both a labeled address and the corresponding private key
    function makeAccount(string memory name) internal virtual returns (Account memory account) {
        (account.addr, account.key) = makeAddrAndKey(name);
    }

    function deriveRememberKey(string memory mnemonic, uint32 index)
        internal
        virtual
        returns (address who, uint256 privateKey)
    {
        privateKey = vm.deriveKey(mnemonic, index);
        who = vm.rememberKey(privateKey);
    }

    function _bytesToUint(bytes memory b) private pure returns (uint256) {
        require(b.length <= 32, "StdCheats _bytesToUint(bytes): Bytes length exceeds 32.");
        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));
    }

    function isFork() internal view virtual returns (bool status) {
        try vm.activeFork() {
            status = true;
        } catch (bytes memory) {}
    }

    modifier skipWhenForking() {
        if (!isFork()) {
            _;
        }
    }

    modifier skipWhenNotForking() {
        if (isFork()) {
            _;
        }
    }

    modifier noGasMetering() {
        vm.pauseGasMetering();
        // To prevent turning gas monitoring back on with nested functions that use this modifier,
        // we check if gasMetering started in the off position. If it did, we don't want to turn
        // it back on until we exit the top level function that used the modifier
        //
        // i.e. funcA() noGasMetering { funcB() }, where funcB has noGasMetering as well.
        // funcA will have `gasStartedOff` as false, funcB will have it as true,
        // so we only turn metering back on at the end of the funcA
        bool gasStartedOff = gasMeteringOff;
        gasMeteringOff = true;

        _;

        // if gas metering was on when this modifier was called, turn it back on at the end
        if (!gasStartedOff) {
            gasMeteringOff = false;
            vm.resumeGasMetering();
        }
    }

    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no
    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We
    // can't simply access the chain ID in a normal view or pure function because the solc View Pure
    // Checker changed `chainid` from pure to view in 0.8.0.
    function _viewChainId() private view returns (uint256 chainId) {
        // Assembly required since `block.chainid` was introduced in 0.8.0.
        assembly {
            chainId := chainid()
        }

        address(this); // Silence warnings in older Solc versions.
    }

    function _pureChainId() private pure returns (uint256 chainId) {
        function() internal view returns (uint256) fnIn = _viewChainId;
        function() internal pure returns (uint256) pureChainId;
        assembly {
            pureChainId := fnIn
        }
        chainId = pureChainId();
    }
}

// Wrappers around cheatcodes to avoid footguns
abstract contract StdCheats is StdCheatsSafe {
    using stdStorage for StdStorage;

    StdStorage private stdstore;
    Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));
    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;

    // Skip forward or rewind time by the specified number of seconds
    function skip(uint256 time) internal virtual {
        vm.warp(vm.getBlockTimestamp() + time);
    }

    function rewind(uint256 time) internal virtual {
        vm.warp(vm.getBlockTimestamp() - time);
    }

    // Setup a prank from an address that has some ether
    function hoax(address msgSender) internal virtual {
        vm.deal(msgSender, 1 << 128);
        vm.prank(msgSender);
    }

    function hoax(address msgSender, uint256 give) internal virtual {
        vm.deal(msgSender, give);
        vm.prank(msgSender);
    }

    function hoax(address msgSender, address origin) internal virtual {
        vm.deal(msgSender, 1 << 128);
        vm.prank(msgSender, origin);
    }

    function hoax(address msgSender, address origin, uint256 give) internal virtual {
        vm.deal(msgSender, give);
        vm.prank(msgSender, origin);
    }

    // Start perpetual prank from an address that has some ether
    function startHoax(address msgSender) internal virtual {
        vm.deal(msgSender, 1 << 128);
        vm.startPrank(msgSender);
    }

    function startHoax(address msgSender, uint256 give) internal virtual {
        vm.deal(msgSender, give);
        vm.startPrank(msgSender);
    }

    // Start perpetual prank from an address that has some ether
    // tx.origin is set to the origin parameter
    function startHoax(address msgSender, address origin) internal virtual {
        vm.deal(msgSender, 1 << 128);
        vm.startPrank(msgSender, origin);
    }

    function startHoax(address msgSender, address origin, uint256 give) internal virtual {
        vm.deal(msgSender, give);
        vm.startPrank(msgSender, origin);
    }

    function changePrank(address msgSender) internal virtual {
        console2_log_StdCheats("changePrank is deprecated. Please use vm.startPrank instead.");
        vm.stopPrank();
        vm.startPrank(msgSender);
    }

    function changePrank(address msgSender, address txOrigin) internal virtual {
        vm.stopPrank();
        vm.startPrank(msgSender, txOrigin);
    }

    // The same as Vm's `deal`
    // Use the alternative signature for ERC20 tokens
    function deal(address to, uint256 give) internal virtual {
        vm.deal(to, give);
    }

    // Set the balance of an account for any ERC20 token
    // Use the alternative signature to update `totalSupply`
    function deal(address token, address to, uint256 give) internal virtual {
        deal(token, to, give, false);
    }

    // Set the balance of an account for any ERC1155 token
    // Use the alternative signature to update `totalSupply`
    function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual {
        dealERC1155(token, to, id, give, false);
    }

    function deal(address token, address to, uint256 give, bool adjust) internal virtual {
        // get current balance
        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));
        uint256 prevBal = abi.decode(balData, (uint256));

        // update balance
        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(give);

        // update total supply
        if (adjust) {
            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd));
            uint256 totSup = abi.decode(totSupData, (uint256));
            if (give < prevBal) {
                totSup -= (prevBal - give);
            } else {
                totSup += (give - prevBal);
            }
            stdstore.target(token).sig(0x18160ddd).checked_write(totSup);
        }
    }

    function dealERC1155(address token, address to, uint256 id, uint256 give, bool adjust) internal virtual {
        // get current balance
        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e, to, id));
        uint256 prevBal = abi.decode(balData, (uint256));

        // update balance
        stdstore.target(token).sig(0x00fdd58e).with_key(to).with_key(id).checked_write(give);

        // update total supply
        if (adjust) {
            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039, id));
            require(
                totSupData.length != 0,
                "StdCheats deal(address,address,uint,uint,bool): target contract is not ERC1155Supply."
            );
            uint256 totSup = abi.decode(totSupData, (uint256));
            if (give < prevBal) {
                totSup -= (prevBal - give);
            } else {
                totSup += (give - prevBal);
            }
            stdstore.target(token).sig(0xbd85b039).with_key(id).checked_write(totSup);
        }
    }

    function dealERC721(address token, address to, uint256 id) internal virtual {
        // check if token id is already minted and the actual owner.
        (bool successMinted, bytes memory ownerData) = token.staticcall(abi.encodeWithSelector(0x6352211e, id));
        require(successMinted, "StdCheats deal(address,address,uint,bool): id not minted.");

        // get owner current balance
        (, bytes memory fromBalData) =
            token.staticcall(abi.encodeWithSelector(0x70a08231, abi.decode(ownerData, (address))));
        uint256 fromPrevBal = abi.decode(fromBalData, (uint256));

        // get new user current balance
        (, bytes memory toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));
        uint256 toPrevBal = abi.decode(toBalData, (uint256));

        // update balances
        stdstore.target(token).sig(0x70a08231).with_key(abi.decode(ownerData, (address))).checked_write(--fromPrevBal);
        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(++toPrevBal);

        // update owner
        stdstore.target(token).sig(0x6352211e).with_key(id).checked_write(to);
    }

    function deployCodeTo(string memory what, address where) internal virtual {
        deployCodeTo(what, "", 0, where);
    }

    function deployCodeTo(string memory what, bytes memory args, address where) internal virtual {
        deployCodeTo(what, args, 0, where);
    }

    function deployCodeTo(string memory what, bytes memory args, uint256 value, address where) internal virtual {
        bytes memory creationCode = vm.getCode(what);
        vm.etch(where, abi.encodePacked(creationCode, args));
        (bool success, bytes memory runtimeBytecode) = where.call{value: value}("");
        require(success, "StdCheats deployCodeTo(string,bytes,uint256,address): Failed to create runtime bytecode.");
        vm.etch(where, runtimeBytecode);
    }

    // Used to prevent the compilation of console, which shortens the compilation time when console is not used elsewhere.
    function console2_log_StdCheats(string memory p0) private view {
        (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature("log(string)", p0));
        status;
    }
}

================
File: lib/forge-std/src/StdError.sol
================
// SPDX-License-Identifier: MIT
// Panics work for versions >=0.8.0, but we lowered the pragma to make this compatible with Test
pragma solidity >=0.6.2 <0.9.0;

library stdError {
    bytes public constant assertionError = abi.encodeWithSignature("Panic(uint256)", 0x01);
    bytes public constant arithmeticError = abi.encodeWithSignature("Panic(uint256)", 0x11);
    bytes public constant divisionError = abi.encodeWithSignature("Panic(uint256)", 0x12);
    bytes public constant enumConversionError = abi.encodeWithSignature("Panic(uint256)", 0x21);
    bytes public constant encodeStorageError = abi.encodeWithSignature("Panic(uint256)", 0x22);
    bytes public constant popError = abi.encodeWithSignature("Panic(uint256)", 0x31);
    bytes public constant indexOOBError = abi.encodeWithSignature("Panic(uint256)", 0x32);
    bytes public constant memOverflowError = abi.encodeWithSignature("Panic(uint256)", 0x41);
    bytes public constant zeroVarError = abi.encodeWithSignature("Panic(uint256)", 0x51);
}

================
File: lib/forge-std/src/StdInvariant.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

pragma experimental ABIEncoderV2;

abstract contract StdInvariant {
    struct FuzzSelector {
        address addr;
        bytes4[] selectors;
    }

    struct FuzzArtifactSelector {
        string artifact;
        bytes4[] selectors;
    }

    struct FuzzInterface {
        address addr;
        string[] artifacts;
    }

    address[] private _excludedContracts;
    address[] private _excludedSenders;
    address[] private _targetedContracts;
    address[] private _targetedSenders;

    string[] private _excludedArtifacts;
    string[] private _targetedArtifacts;

    FuzzArtifactSelector[] private _targetedArtifactSelectors;

    FuzzSelector[] private _excludedSelectors;
    FuzzSelector[] private _targetedSelectors;

    FuzzInterface[] private _targetedInterfaces;

    // Functions for users:
    // These are intended to be called in tests.

    function excludeContract(address newExcludedContract_) internal {
        _excludedContracts.push(newExcludedContract_);
    }

    function excludeSelector(FuzzSelector memory newExcludedSelector_) internal {
        _excludedSelectors.push(newExcludedSelector_);
    }

    function excludeSender(address newExcludedSender_) internal {
        _excludedSenders.push(newExcludedSender_);
    }

    function excludeArtifact(string memory newExcludedArtifact_) internal {
        _excludedArtifacts.push(newExcludedArtifact_);
    }

    function targetArtifact(string memory newTargetedArtifact_) internal {
        _targetedArtifacts.push(newTargetedArtifact_);
    }

    function targetArtifactSelector(FuzzArtifactSelector memory newTargetedArtifactSelector_) internal {
        _targetedArtifactSelectors.push(newTargetedArtifactSelector_);
    }

    function targetContract(address newTargetedContract_) internal {
        _targetedContracts.push(newTargetedContract_);
    }

    function targetSelector(FuzzSelector memory newTargetedSelector_) internal {
        _targetedSelectors.push(newTargetedSelector_);
    }

    function targetSender(address newTargetedSender_) internal {
        _targetedSenders.push(newTargetedSender_);
    }

    function targetInterface(FuzzInterface memory newTargetedInterface_) internal {
        _targetedInterfaces.push(newTargetedInterface_);
    }

    // Functions for forge:
    // These are called by forge to run invariant tests and don't need to be called in tests.

    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {
        excludedArtifacts_ = _excludedArtifacts;
    }

    function excludeContracts() public view returns (address[] memory excludedContracts_) {
        excludedContracts_ = _excludedContracts;
    }

    function excludeSelectors() public view returns (FuzzSelector[] memory excludedSelectors_) {
        excludedSelectors_ = _excludedSelectors;
    }

    function excludeSenders() public view returns (address[] memory excludedSenders_) {
        excludedSenders_ = _excludedSenders;
    }

    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {
        targetedArtifacts_ = _targetedArtifacts;
    }

    function targetArtifactSelectors() public view returns (FuzzArtifactSelector[] memory targetedArtifactSelectors_) {
        targetedArtifactSelectors_ = _targetedArtifactSelectors;
    }

    function targetContracts() public view returns (address[] memory targetedContracts_) {
        targetedContracts_ = _targetedContracts;
    }

    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {
        targetedSelectors_ = _targetedSelectors;
    }

    function targetSenders() public view returns (address[] memory targetedSenders_) {
        targetedSenders_ = _targetedSenders;
    }

    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {
        targetedInterfaces_ = _targetedInterfaces;
    }
}

================
File: lib/forge-std/src/StdJson.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0 <0.9.0;

pragma experimental ABIEncoderV2;

import {VmSafe} from "./Vm.sol";

// Helpers for parsing and writing JSON files
// To parse:
// ```
// using stdJson for string;
// string memory json = vm.readFile("<some_path>");
// json.readUint("<json_path>");
// ```
// To write:
// ```
// using stdJson for string;
// string memory json = "json";
// json.serialize("a", uint256(123));
// string memory semiFinal = json.serialize("b", string("test"));
// string memory finalJson = json.serialize("c", semiFinal);
// finalJson.write("<some_path>");
// ```

library stdJson {
    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));

    function keyExists(string memory json, string memory key) internal view returns (bool) {
        return vm.keyExistsJson(json, key);
    }

    function parseRaw(string memory json, string memory key) internal pure returns (bytes memory) {
        return vm.parseJson(json, key);
    }

    function readUint(string memory json, string memory key) internal pure returns (uint256) {
        return vm.parseJsonUint(json, key);
    }

    function readUintArray(string memory json, string memory key) internal pure returns (uint256[] memory) {
        return vm.parseJsonUintArray(json, key);
    }

    function readInt(string memory json, string memory key) internal pure returns (int256) {
        return vm.parseJsonInt(json, key);
    }

    function readIntArray(string memory json, string memory key) internal pure returns (int256[] memory) {
        return vm.parseJsonIntArray(json, key);
    }

    function readBytes32(string memory json, string memory key) internal pure returns (bytes32) {
        return vm.parseJsonBytes32(json, key);
    }

    function readBytes32Array(string memory json, string memory key) internal pure returns (bytes32[] memory) {
        return vm.parseJsonBytes32Array(json, key);
    }

    function readString(string memory json, string memory key) internal pure returns (string memory) {
        return vm.parseJsonString(json, key);
    }

    function readStringArray(string memory json, string memory key) internal pure returns (string[] memory) {
        return vm.parseJsonStringArray(json, key);
    }

    function readAddress(string memory json, string memory key) internal pure returns (address) {
        return vm.parseJsonAddress(json, key);
    }

    function readAddressArray(string memory json, string memory key) internal pure returns (address[] memory) {
        return vm.parseJsonAddressArray(json, key);
    }

    function readBool(string memory json, string memory key) internal pure returns (bool) {
        return vm.parseJsonBool(json, key);
    }

    function readBoolArray(string memory json, string memory key) internal pure returns (bool[] memory) {
        return vm.parseJsonBoolArray(json, key);
    }

    function readBytes(string memory json, string memory key) internal pure returns (bytes memory) {
        return vm.parseJsonBytes(json, key);
    }

    function readBytesArray(string memory json, string memory key) internal pure returns (bytes[] memory) {
        return vm.parseJsonBytesArray(json, key);
    }

    function readUintOr(string memory json, string memory key, uint256 defaultValue) internal view returns (uint256) {
        return keyExists(json, key) ? readUint(json, key) : defaultValue;
    }

    function readUintArrayOr(string memory json, string memory key, uint256[] memory defaultValue)
        internal
        view
        returns (uint256[] memory)
    {
        return keyExists(json, key) ? readUintArray(json, key) : defaultValue;
    }

    function readIntOr(string memory json, string memory key, int256 defaultValue) internal view returns (int256) {
        return keyExists(json, key) ? readInt(json, key) : defaultValue;
    }

    function readIntArrayOr(string memory json, string memory key, int256[] memory defaultValue)
        internal
        view
        returns (int256[] memory)
    {
        return keyExists(json, key) ? readIntArray(json, key) : defaultValue;
    }

    function readBytes32Or(string memory json, string memory key, bytes32 defaultValue)
        internal
        view
        returns (bytes32)
    {
        return keyExists(json, key) ? readBytes32(json, key) : defaultValue;
    }

    function readBytes32ArrayOr(string memory json, string memory key, bytes32[] memory defaultValue)
        internal
        view
        returns (bytes32[] memory)
    {
        return keyExists(json, key) ? readBytes32Array(json, key) : defaultValue;
    }

    function readStringOr(string memory json, string memory key, string memory defaultValue)
        internal
        view
        returns (string memory)
    {
        return keyExists(json, key) ? readString(json, key) : defaultValue;
    }

    function readStringArrayOr(string memory json, string memory key, string[] memory defaultValue)
        internal
        view
        returns (string[] memory)
    {
        return keyExists(json, key) ? readStringArray(json, key) : defaultValue;
    }

    function readAddressOr(string memory json, string memory key, address defaultValue)
        internal
        view
        returns (address)
    {
        return keyExists(json, key) ? readAddress(json, key) : defaultValue;
    }

    function readAddressArrayOr(string memory json, string memory key, address[] memory defaultValue)
        internal
        view
        returns (address[] memory)
    {
        return keyExists(json, key) ? readAddressArray(json, key) : defaultValue;
    }

    function readBoolOr(string memory json, string memory key, bool defaultValue) internal view returns (bool) {
        return keyExists(json, key) ? readBool(json, key) : defaultValue;
    }

    function readBoolArrayOr(string memory json, string memory key, bool[] memory defaultValue)
        internal
        view
        returns (bool[] memory)
    {
        return keyExists(json, key) ? readBoolArray(json, key) : defaultValue;
    }

    function readBytesOr(string memory json, string memory key, bytes memory defaultValue)
        internal
        view
        returns (bytes memory)
    {
        return keyExists(json, key) ? readBytes(json, key) : defaultValue;
    }

    function readBytesArrayOr(string memory json, string memory key, bytes[] memory defaultValue)
        internal
        view
        returns (bytes[] memory)
    {
        return keyExists(json, key) ? readBytesArray(json, key) : defaultValue;
    }

    function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {
        return vm.serializeJson(jsonKey, rootObject);
    }

    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {
        return vm.serializeBool(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, bool[] memory value)
        internal
        returns (string memory)
    {
        return vm.serializeBool(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {
        return vm.serializeUint(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, uint256[] memory value)
        internal
        returns (string memory)
    {
        return vm.serializeUint(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {
        return vm.serializeInt(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, int256[] memory value)
        internal
        returns (string memory)
    {
        return vm.serializeInt(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {
        return vm.serializeAddress(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, address[] memory value)
        internal
        returns (string memory)
    {
        return vm.serializeAddress(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {
        return vm.serializeBytes32(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)
        internal
        returns (string memory)
    {
        return vm.serializeBytes32(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {
        return vm.serializeBytes(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, bytes[] memory value)
        internal
        returns (string memory)
    {
        return vm.serializeBytes(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, string memory value)
        internal
        returns (string memory)
    {
        return vm.serializeString(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, string[] memory value)
        internal
        returns (string memory)
    {
        return vm.serializeString(jsonKey, key, value);
    }

    function write(string memory jsonKey, string memory path) internal {
        vm.writeJson(jsonKey, path);
    }

    function write(string memory jsonKey, string memory path, string memory valueKey) internal {
        vm.writeJson(jsonKey, path, valueKey);
    }
}

================
File: lib/forge-std/src/StdMath.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

library stdMath {
    int256 private constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;

    function abs(int256 a) internal pure returns (uint256) {
        // Required or it will fail when `a = type(int256).min`
        if (a == INT256_MIN) {
            return 57896044618658097711785492504343953926634992332820282019728792003956564819968;
        }

        return uint256(a > 0 ? a : -a);
    }

    function delta(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a - b : b - a;
    }

    function delta(int256 a, int256 b) internal pure returns (uint256) {
        // a and b are of the same sign
        // this works thanks to two's complement, the left-most bit is the sign bit
        if ((a ^ b) > -1) {
            return delta(abs(a), abs(b));
        }

        // a and b are of opposite signs
        return abs(a) + abs(b);
    }

    function percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 absDelta = delta(a, b);

        return absDelta * 1e18 / b;
    }

    function percentDelta(int256 a, int256 b) internal pure returns (uint256) {
        uint256 absDelta = delta(a, b);
        uint256 absB = abs(b);

        return absDelta * 1e18 / absB;
    }
}

================
File: lib/forge-std/src/StdStorage.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

import {Vm} from "./Vm.sol";

struct FindData {
    uint256 slot;
    uint256 offsetLeft;
    uint256 offsetRight;
    bool found;
}

struct StdStorage {
    mapping(address => mapping(bytes4 => mapping(bytes32 => FindData))) finds;
    bytes32[] _keys;
    bytes4 _sig;
    uint256 _depth;
    address _target;
    bytes32 _set;
    bool _enable_packed_slots;
    bytes _calldata;
}

library stdStorageSafe {
    event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);
    event WARNING_UninitedSlot(address who, uint256 slot);

    Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));
    uint256 constant UINT256_MAX = 115792089237316195423570985008687907853269984665640564039457584007913129639935;

    function sigs(string memory sigStr) internal pure returns (bytes4) {
        return bytes4(keccak256(bytes(sigStr)));
    }

    function getCallParams(StdStorage storage self) internal view returns (bytes memory) {
        if (self._calldata.length == 0) {
            return flatten(self._keys);
        } else {
            return self._calldata;
        }
    }

    // Calls target contract with configured parameters
    function callTarget(StdStorage storage self) internal view returns (bool, bytes32) {
        bytes memory cald = abi.encodePacked(self._sig, getCallParams(self));
        (bool success, bytes memory rdat) = self._target.staticcall(cald);
        bytes32 result = bytesToBytes32(rdat, 32 * self._depth);

        return (success, result);
    }

    // Tries mutating slot value to determine if the targeted value is stored in it.
    // If current value is 0, then we are setting slot value to type(uint256).max
    // Otherwise, we set it to 0. That way, return value should always be affected.
    function checkSlotMutatesCall(StdStorage storage self, bytes32 slot) internal returns (bool) {
        bytes32 prevSlotValue = vm.load(self._target, slot);
        (bool success, bytes32 prevReturnValue) = callTarget(self);

        bytes32 testVal = prevReturnValue == bytes32(0) ? bytes32(UINT256_MAX) : bytes32(0);
        vm.store(self._target, slot, testVal);

        (, bytes32 newReturnValue) = callTarget(self);

        vm.store(self._target, slot, prevSlotValue);

        return (success && (prevReturnValue != newReturnValue));
    }

    // Tries setting one of the bits in slot to 1 until return value changes.
    // Index of resulted bit is an offset packed slot has from left/right side
    function findOffset(StdStorage storage self, bytes32 slot, bool left) internal returns (bool, uint256) {
        for (uint256 offset = 0; offset < 256; offset++) {
            uint256 valueToPut = left ? (1 << (255 - offset)) : (1 << offset);
            vm.store(self._target, slot, bytes32(valueToPut));

            (bool success, bytes32 data) = callTarget(self);

            if (success && (uint256(data) > 0)) {
                return (true, offset);
            }
        }
        return (false, 0);
    }

    function findOffsets(StdStorage storage self, bytes32 slot) internal returns (bool, uint256, uint256) {
        bytes32 prevSlotValue = vm.load(self._target, slot);

        (bool foundLeft, uint256 offsetLeft) = findOffset(self, slot, true);
        (bool foundRight, uint256 offsetRight) = findOffset(self, slot, false);

        // `findOffset` may mutate slot value, so we are setting it to initial value
        vm.store(self._target, slot, prevSlotValue);
        return (foundLeft && foundRight, offsetLeft, offsetRight);
    }

    function find(StdStorage storage self) internal returns (FindData storage) {
        return find(self, true);
    }

    /// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against
    // slot complexity:
    //  if flat, will be bytes32(uint256(uint));
    //  if map, will be keccak256(abi.encode(key, uint(slot)));
    //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));
    //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);
    function find(StdStorage storage self, bool _clear) internal returns (FindData storage) {
        address who = self._target;
        bytes4 fsig = self._sig;
        uint256 field_depth = self._depth;
        bytes memory params = getCallParams(self);

        // calldata to test against
        if (self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {
            if (_clear) {
                clear(self);
            }
            return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];
        }
        vm.record();
        (, bytes32 callResult) = callTarget(self);
        (bytes32[] memory reads,) = vm.accesses(address(who));

        if (reads.length == 0) {
            revert("stdStorage find(StdStorage): No storage use detected for target.");
        } else {
            for (uint256 i = reads.length; --i >= 0;) {
                bytes32 prev = vm.load(who, reads[i]);
                if (prev == bytes32(0)) {
                    emit WARNING_UninitedSlot(who, uint256(reads[i]));
                }

                if (!checkSlotMutatesCall(self, reads[i])) {
                    continue;
                }

                (uint256 offsetLeft, uint256 offsetRight) = (0, 0);

                if (self._enable_packed_slots) {
                    bool found;
                    (found, offsetLeft, offsetRight) = findOffsets(self, reads[i]);
                    if (!found) {
                        continue;
                    }
                }

                // Check that value between found offsets is equal to the current call result
                uint256 curVal = (uint256(prev) & getMaskByOffsets(offsetLeft, offsetRight)) >> offsetRight;

                if (uint256(callResult) != curVal) {
                    continue;
                }

                emit SlotFound(who, fsig, keccak256(abi.encodePacked(params, field_depth)), uint256(reads[i]));
                self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))] =
                    FindData(uint256(reads[i]), offsetLeft, offsetRight, true);
                break;
            }
        }

        require(
            self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found,
            "stdStorage find(StdStorage): Slot(s) not found."
        );

        if (_clear) {
            clear(self);
        }
        return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];
    }

    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {
        self._target = _target;
        return self;
    }

    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {
        self._sig = _sig;
        return self;
    }

    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {
        self._sig = sigs(_sig);
        return self;
    }

    function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {
        self._calldata = _calldata;
        return self;
    }

    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {
        self._keys.push(bytes32(uint256(uint160(who))));
        return self;
    }

    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {
        self._keys.push(bytes32(amt));
        return self;
    }

    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {
        self._keys.push(key);
        return self;
    }

    function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {
        self._enable_packed_slots = true;
        return self;
    }

    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {
        self._depth = _depth;
        return self;
    }

    function read(StdStorage storage self) private returns (bytes memory) {
        FindData storage data = find(self, false);
        uint256 mask = getMaskByOffsets(data.offsetLeft, data.offsetRight);
        uint256 value = (uint256(vm.load(self._target, bytes32(data.slot))) & mask) >> data.offsetRight;
        clear(self);
        return abi.encode(value);
    }

    function read_bytes32(StdStorage storage self) internal returns (bytes32) {
        return abi.decode(read(self), (bytes32));
    }

    function read_bool(StdStorage storage self) internal returns (bool) {
        int256 v = read_int(self);
        if (v == 0) return false;
        if (v == 1) return true;
        revert("stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.");
    }

    function read_address(StdStorage storage self) internal returns (address) {
        return abi.decode(read(self), (address));
    }

    function read_uint(StdStorage storage self) internal returns (uint256) {
        return abi.decode(read(self), (uint256));
    }

    function read_int(StdStorage storage self) internal returns (int256) {
        return abi.decode(read(self), (int256));
    }

    function parent(StdStorage storage self) internal returns (uint256, bytes32) {
        address who = self._target;
        uint256 field_depth = self._depth;
        vm.startMappingRecording();
        uint256 child = find(self, true).slot - field_depth;
        (bool found, bytes32 key, bytes32 parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));
        if (!found) {
            revert(
                "stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called."
            );
        }
        return (uint256(parent_slot), key);
    }

    function root(StdStorage storage self) internal returns (uint256) {
        address who = self._target;
        uint256 field_depth = self._depth;
        vm.startMappingRecording();
        uint256 child = find(self, true).slot - field_depth;
        bool found;
        bytes32 root_slot;
        bytes32 parent_slot;
        (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));
        if (!found) {
            revert(
                "stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called."
            );
        }
        while (found) {
            root_slot = parent_slot;
            (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(root_slot));
        }
        return uint256(root_slot);
    }

    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {
        bytes32 out;

        uint256 max = b.length > 32 ? 32 : b.length;
        for (uint256 i = 0; i < max; i++) {
            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);
        }
        return out;
    }

    function flatten(bytes32[] memory b) private pure returns (bytes memory) {
        bytes memory result = new bytes(b.length * 32);
        for (uint256 i = 0; i < b.length; i++) {
            bytes32 k = b[i];
            /// @solidity memory-safe-assembly
            assembly {
                mstore(add(result, add(32, mul(32, i))), k)
            }
        }

        return result;
    }

    function clear(StdStorage storage self) internal {
        delete self._target;
        delete self._sig;
        delete self._keys;
        delete self._depth;
        delete self._enable_packed_slots;
        delete self._calldata;
    }

    // Returns mask which contains non-zero bits for values between `offsetLeft` and `offsetRight`
    // (slotValue & mask) >> offsetRight will be the value of the given packed variable
    function getMaskByOffsets(uint256 offsetLeft, uint256 offsetRight) internal pure returns (uint256 mask) {
        // mask = ((1 << (256 - (offsetRight + offsetLeft))) - 1) << offsetRight;
        // using assembly because (1 << 256) causes overflow
        assembly {
            mask := shl(offsetRight, sub(shl(sub(256, add(offsetRight, offsetLeft)), 1), 1))
        }
    }

    // Returns slot value with updated packed variable.
    function getUpdatedSlotValue(bytes32 curValue, uint256 varValue, uint256 offsetLeft, uint256 offsetRight)
        internal
        pure
        returns (bytes32 newValue)
    {
        return bytes32((uint256(curValue) & ~getMaskByOffsets(offsetLeft, offsetRight)) | (varValue << offsetRight));
    }
}

library stdStorage {
    Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));

    function sigs(string memory sigStr) internal pure returns (bytes4) {
        return stdStorageSafe.sigs(sigStr);
    }

    function find(StdStorage storage self) internal returns (uint256) {
        return find(self, true);
    }

    function find(StdStorage storage self, bool _clear) internal returns (uint256) {
        return stdStorageSafe.find(self, _clear).slot;
    }

    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {
        return stdStorageSafe.target(self, _target);
    }

    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {
        return stdStorageSafe.sig(self, _sig);
    }

    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {
        return stdStorageSafe.sig(self, _sig);
    }

    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {
        return stdStorageSafe.with_key(self, who);
    }

    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {
        return stdStorageSafe.with_key(self, amt);
    }

    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {
        return stdStorageSafe.with_key(self, key);
    }

    function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {
        return stdStorageSafe.with_calldata(self, _calldata);
    }

    function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {
        return stdStorageSafe.enable_packed_slots(self);
    }

    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {
        return stdStorageSafe.depth(self, _depth);
    }

    function clear(StdStorage storage self) internal {
        stdStorageSafe.clear(self);
    }

    function checked_write(StdStorage storage self, address who) internal {
        checked_write(self, bytes32(uint256(uint160(who))));
    }

    function checked_write(StdStorage storage self, uint256 amt) internal {
        checked_write(self, bytes32(amt));
    }

    function checked_write_int(StdStorage storage self, int256 val) internal {
        checked_write(self, bytes32(uint256(val)));
    }

    function checked_write(StdStorage storage self, bool write) internal {
        bytes32 t;
        /// @solidity memory-safe-assembly
        assembly {
            t := write
        }
        checked_write(self, t);
    }

    function checked_write(StdStorage storage self, bytes32 set) internal {
        address who = self._target;
        bytes4 fsig = self._sig;
        uint256 field_depth = self._depth;
        bytes memory params = stdStorageSafe.getCallParams(self);

        if (!self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {
            find(self, false);
        }
        FindData storage data = self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];
        if ((data.offsetLeft + data.offsetRight) > 0) {
            uint256 maxVal = 2 ** (256 - (data.offsetLeft + data.offsetRight));
            require(
                uint256(set) < maxVal,
                string(
                    abi.encodePacked(
                        "stdStorage find(StdStorage): Packed slot. We can't fit value greater than ",
                        vm.toString(maxVal)
                    )
                )
            );
        }
        bytes32 curVal = vm.load(who, bytes32(data.slot));
        bytes32 valToSet = stdStorageSafe.getUpdatedSlotValue(curVal, uint256(set), data.offsetLeft, data.offsetRight);

        vm.store(who, bytes32(data.slot), valToSet);

        (bool success, bytes32 callResult) = stdStorageSafe.callTarget(self);

        if (!success || callResult != set) {
            vm.store(who, bytes32(data.slot), curVal);
            revert("stdStorage find(StdStorage): Failed to write value.");
        }
        clear(self);
    }

    function read_bytes32(StdStorage storage self) internal returns (bytes32) {
        return stdStorageSafe.read_bytes32(self);
    }

    function read_bool(StdStorage storage self) internal returns (bool) {
        return stdStorageSafe.read_bool(self);
    }

    function read_address(StdStorage storage self) internal returns (address) {
        return stdStorageSafe.read_address(self);
    }

    function read_uint(StdStorage storage self) internal returns (uint256) {
        return stdStorageSafe.read_uint(self);
    }

    function read_int(StdStorage storage self) internal returns (int256) {
        return stdStorageSafe.read_int(self);
    }

    function parent(StdStorage storage self) internal returns (uint256, bytes32) {
        return stdStorageSafe.parent(self);
    }

    function root(StdStorage storage self) internal returns (uint256) {
        return stdStorageSafe.root(self);
    }
}

================
File: lib/forge-std/src/StdStyle.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

import {VmSafe} from "./Vm.sol";

library StdStyle {
    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));

    string constant RED = "\u001b[91m";
    string constant GREEN = "\u001b[92m";
    string constant YELLOW = "\u001b[93m";
    string constant BLUE = "\u001b[94m";
    string constant MAGENTA = "\u001b[95m";
    string constant CYAN = "\u001b[96m";
    string constant BOLD = "\u001b[1m";
    string constant DIM = "\u001b[2m";
    string constant ITALIC = "\u001b[3m";
    string constant UNDERLINE = "\u001b[4m";
    string constant INVERSE = "\u001b[7m";
    string constant RESET = "\u001b[0m";

    function styleConcat(string memory style, string memory self) private pure returns (string memory) {
        return string(abi.encodePacked(style, self, RESET));
    }

    function red(string memory self) internal pure returns (string memory) {
        return styleConcat(RED, self);
    }

    function red(uint256 self) internal pure returns (string memory) {
        return red(vm.toString(self));
    }

    function red(int256 self) internal pure returns (string memory) {
        return red(vm.toString(self));
    }

    function red(address self) internal pure returns (string memory) {
        return red(vm.toString(self));
    }

    function red(bool self) internal pure returns (string memory) {
        return red(vm.toString(self));
    }

    function redBytes(bytes memory self) internal pure returns (string memory) {
        return red(vm.toString(self));
    }

    function redBytes32(bytes32 self) internal pure returns (string memory) {
        return red(vm.toString(self));
    }

    function green(string memory self) internal pure returns (string memory) {
        return styleConcat(GREEN, self);
    }

    function green(uint256 self) internal pure returns (string memory) {
        return green(vm.toString(self));
    }

    function green(int256 self) internal pure returns (string memory) {
        return green(vm.toString(self));
    }

    function green(address self) internal pure returns (string memory) {
        return green(vm.toString(self));
    }

    function green(bool self) internal pure returns (string memory) {
        return green(vm.toString(self));
    }

    function greenBytes(bytes memory self) internal pure returns (string memory) {
        return green(vm.toString(self));
    }

    function greenBytes32(bytes32 self) internal pure returns (string memory) {
        return green(vm.toString(self));
    }

    function yellow(string memory self) internal pure returns (string memory) {
        return styleConcat(YELLOW, self);
    }

    function yellow(uint256 self) internal pure returns (string memory) {
        return yellow(vm.toString(self));
    }

    function yellow(int256 self) internal pure returns (string memory) {
        return yellow(vm.toString(self));
    }

    function yellow(address self) internal pure returns (string memory) {
        return yellow(vm.toString(self));
    }

    function yellow(bool self) internal pure returns (string memory) {
        return yellow(vm.toString(self));
    }

    function yellowBytes(bytes memory self) internal pure returns (string memory) {
        return yellow(vm.toString(self));
    }

    function yellowBytes32(bytes32 self) internal pure returns (string memory) {
        return yellow(vm.toString(self));
    }

    function blue(string memory self) internal pure returns (string memory) {
        return styleConcat(BLUE, self);
    }

    function blue(uint256 self) internal pure returns (string memory) {
        return blue(vm.toString(self));
    }

    function blue(int256 self) internal pure returns (string memory) {
        return blue(vm.toString(self));
    }

    function blue(address self) internal pure returns (string memory) {
        return blue(vm.toString(self));
    }

    function blue(bool self) internal pure returns (string memory) {
        return blue(vm.toString(self));
    }

    function blueBytes(bytes memory self) internal pure returns (string memory) {
        return blue(vm.toString(self));
    }

    function blueBytes32(bytes32 self) internal pure returns (string memory) {
        return blue(vm.toString(self));
    }

    function magenta(string memory self) internal pure returns (string memory) {
        return styleConcat(MAGENTA, self);
    }

    function magenta(uint256 self) internal pure returns (string memory) {
        return magenta(vm.toString(self));
    }

    function magenta(int256 self) internal pure returns (string memory) {
        return magenta(vm.toString(self));
    }

    function magenta(address self) internal pure returns (string memory) {
        return magenta(vm.toString(self));
    }

    function magenta(bool self) internal pure returns (string memory) {
        return magenta(vm.toString(self));
    }

    function magentaBytes(bytes memory self) internal pure returns (string memory) {
        return magenta(vm.toString(self));
    }

    function magentaBytes32(bytes32 self) internal pure returns (string memory) {
        return magenta(vm.toString(self));
    }

    function cyan(string memory self) internal pure returns (string memory) {
        return styleConcat(CYAN, self);
    }

    function cyan(uint256 self) internal pure returns (string memory) {
        return cyan(vm.toString(self));
    }

    function cyan(int256 self) internal pure returns (string memory) {
        return cyan(vm.toString(self));
    }

    function cyan(address self) internal pure returns (string memory) {
        return cyan(vm.toString(self));
    }

    function cyan(bool self) internal pure returns (string memory) {
        return cyan(vm.toString(self));
    }

    function cyanBytes(bytes memory self) internal pure returns (string memory) {
        return cyan(vm.toString(self));
    }

    function cyanBytes32(bytes32 self) internal pure returns (string memory) {
        return cyan(vm.toString(self));
    }

    function bold(string memory self) internal pure returns (string memory) {
        return styleConcat(BOLD, self);
    }

    function bold(uint256 self) internal pure returns (string memory) {
        return bold(vm.toString(self));
    }

    function bold(int256 self) internal pure returns (string memory) {
        return bold(vm.toString(self));
    }

    function bold(address self) internal pure returns (string memory) {
        return bold(vm.toString(self));
    }

    function bold(bool self) internal pure returns (string memory) {
        return bold(vm.toString(self));
    }

    function boldBytes(bytes memory self) internal pure returns (string memory) {
        return bold(vm.toString(self));
    }

    function boldBytes32(bytes32 self) internal pure returns (string memory) {
        return bold(vm.toString(self));
    }

    function dim(string memory self) internal pure returns (string memory) {
        return styleConcat(DIM, self);
    }

    function dim(uint256 self) internal pure returns (string memory) {
        return dim(vm.toString(self));
    }

    function dim(int256 self) internal pure returns (string memory) {
        return dim(vm.toString(self));
    }

    function dim(address self) internal pure returns (string memory) {
        return dim(vm.toString(self));
    }

    function dim(bool self) internal pure returns (string memory) {
        return dim(vm.toString(self));
    }

    function dimBytes(bytes memory self) internal pure returns (string memory) {
        return dim(vm.toString(self));
    }

    function dimBytes32(bytes32 self) internal pure returns (string memory) {
        return dim(vm.toString(self));
    }

    function italic(string memory self) internal pure returns (string memory) {
        return styleConcat(ITALIC, self);
    }

    function italic(uint256 self) internal pure returns (string memory) {
        return italic(vm.toString(self));
    }

    function italic(int256 self) internal pure returns (string memory) {
        return italic(vm.toString(self));
    }

    function italic(address self) internal pure returns (string memory) {
        return italic(vm.toString(self));
    }

    function italic(bool self) internal pure returns (string memory) {
        return italic(vm.toString(self));
    }

    function italicBytes(bytes memory self) internal pure returns (string memory) {
        return italic(vm.toString(self));
    }

    function italicBytes32(bytes32 self) internal pure returns (string memory) {
        return italic(vm.toString(self));
    }

    function underline(string memory self) internal pure returns (string memory) {
        return styleConcat(UNDERLINE, self);
    }

    function underline(uint256 self) internal pure returns (string memory) {
        return underline(vm.toString(self));
    }

    function underline(int256 self) internal pure returns (string memory) {
        return underline(vm.toString(self));
    }

    function underline(address self) internal pure returns (string memory) {
        return underline(vm.toString(self));
    }

    function underline(bool self) internal pure returns (string memory) {
        return underline(vm.toString(self));
    }

    function underlineBytes(bytes memory self) internal pure returns (string memory) {
        return underline(vm.toString(self));
    }

    function underlineBytes32(bytes32 self) internal pure returns (string memory) {
        return underline(vm.toString(self));
    }

    function inverse(string memory self) internal pure returns (string memory) {
        return styleConcat(INVERSE, self);
    }

    function inverse(uint256 self) internal pure returns (string memory) {
        return inverse(vm.toString(self));
    }

    function inverse(int256 self) internal pure returns (string memory) {
        return inverse(vm.toString(self));
    }

    function inverse(address self) internal pure returns (string memory) {
        return inverse(vm.toString(self));
    }

    function inverse(bool self) internal pure returns (string memory) {
        return inverse(vm.toString(self));
    }

    function inverseBytes(bytes memory self) internal pure returns (string memory) {
        return inverse(vm.toString(self));
    }

    function inverseBytes32(bytes32 self) internal pure returns (string memory) {
        return inverse(vm.toString(self));
    }
}

================
File: lib/forge-std/src/StdToml.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0 <0.9.0;

pragma experimental ABIEncoderV2;

import {VmSafe} from "./Vm.sol";

// Helpers for parsing and writing TOML files
// To parse:
// ```
// using stdToml for string;
// string memory toml = vm.readFile("<some_path>");
// toml.readUint("<json_path>");
// ```
// To write:
// ```
// using stdToml for string;
// string memory json = "json";
// json.serialize("a", uint256(123));
// string memory semiFinal = json.serialize("b", string("test"));
// string memory finalJson = json.serialize("c", semiFinal);
// finalJson.write("<some_path>");
// ```

library stdToml {
    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));

    function keyExists(string memory toml, string memory key) internal view returns (bool) {
        return vm.keyExistsToml(toml, key);
    }

    function parseRaw(string memory toml, string memory key) internal pure returns (bytes memory) {
        return vm.parseToml(toml, key);
    }

    function readUint(string memory toml, string memory key) internal pure returns (uint256) {
        return vm.parseTomlUint(toml, key);
    }

    function readUintArray(string memory toml, string memory key) internal pure returns (uint256[] memory) {
        return vm.parseTomlUintArray(toml, key);
    }

    function readInt(string memory toml, string memory key) internal pure returns (int256) {
        return vm.parseTomlInt(toml, key);
    }

    function readIntArray(string memory toml, string memory key) internal pure returns (int256[] memory) {
        return vm.parseTomlIntArray(toml, key);
    }

    function readBytes32(string memory toml, string memory key) internal pure returns (bytes32) {
        return vm.parseTomlBytes32(toml, key);
    }

    function readBytes32Array(string memory toml, string memory key) internal pure returns (bytes32[] memory) {
        return vm.parseTomlBytes32Array(toml, key);
    }

    function readString(string memory toml, string memory key) internal pure returns (string memory) {
        return vm.parseTomlString(toml, key);
    }

    function readStringArray(string memory toml, string memory key) internal pure returns (string[] memory) {
        return vm.parseTomlStringArray(toml, key);
    }

    function readAddress(string memory toml, string memory key) internal pure returns (address) {
        return vm.parseTomlAddress(toml, key);
    }

    function readAddressArray(string memory toml, string memory key) internal pure returns (address[] memory) {
        return vm.parseTomlAddressArray(toml, key);
    }

    function readBool(string memory toml, string memory key) internal pure returns (bool) {
        return vm.parseTomlBool(toml, key);
    }

    function readBoolArray(string memory toml, string memory key) internal pure returns (bool[] memory) {
        return vm.parseTomlBoolArray(toml, key);
    }

    function readBytes(string memory toml, string memory key) internal pure returns (bytes memory) {
        return vm.parseTomlBytes(toml, key);
    }

    function readBytesArray(string memory toml, string memory key) internal pure returns (bytes[] memory) {
        return vm.parseTomlBytesArray(toml, key);
    }

    function readUintOr(string memory toml, string memory key, uint256 defaultValue) internal view returns (uint256) {
        return keyExists(toml, key) ? readUint(toml, key) : defaultValue;
    }

    function readUintArrayOr(string memory toml, string memory key, uint256[] memory defaultValue)
        internal
        view
        returns (uint256[] memory)
    {
        return keyExists(toml, key) ? readUintArray(toml, key) : defaultValue;
    }

    function readIntOr(string memory toml, string memory key, int256 defaultValue) internal view returns (int256) {
        return keyExists(toml, key) ? readInt(toml, key) : defaultValue;
    }

    function readIntArrayOr(string memory toml, string memory key, int256[] memory defaultValue)
        internal
        view
        returns (int256[] memory)
    {
        return keyExists(toml, key) ? readIntArray(toml, key) : defaultValue;
    }

    function readBytes32Or(string memory toml, string memory key, bytes32 defaultValue)
        internal
        view
        returns (bytes32)
    {
        return keyExists(toml, key) ? readBytes32(toml, key) : defaultValue;
    }

    function readBytes32ArrayOr(string memory toml, string memory key, bytes32[] memory defaultValue)
        internal
        view
        returns (bytes32[] memory)
    {
        return keyExists(toml, key) ? readBytes32Array(toml, key) : defaultValue;
    }

    function readStringOr(string memory toml, string memory key, string memory defaultValue)
        internal
        view
        returns (string memory)
    {
        return keyExists(toml, key) ? readString(toml, key) : defaultValue;
    }

    function readStringArrayOr(string memory toml, string memory key, string[] memory defaultValue)
        internal
        view
        returns (string[] memory)
    {
        return keyExists(toml, key) ? readStringArray(toml, key) : defaultValue;
    }

    function readAddressOr(string memory toml, string memory key, address defaultValue)
        internal
        view
        returns (address)
    {
        return keyExists(toml, key) ? readAddress(toml, key) : defaultValue;
    }

    function readAddressArrayOr(string memory toml, string memory key, address[] memory defaultValue)
        internal
        view
        returns (address[] memory)
    {
        return keyExists(toml, key) ? readAddressArray(toml, key) : defaultValue;
    }

    function readBoolOr(string memory toml, string memory key, bool defaultValue) internal view returns (bool) {
        return keyExists(toml, key) ? readBool(toml, key) : defaultValue;
    }

    function readBoolArrayOr(string memory toml, string memory key, bool[] memory defaultValue)
        internal
        view
        returns (bool[] memory)
    {
        return keyExists(toml, key) ? readBoolArray(toml, key) : defaultValue;
    }

    function readBytesOr(string memory toml, string memory key, bytes memory defaultValue)
        internal
        view
        returns (bytes memory)
    {
        return keyExists(toml, key) ? readBytes(toml, key) : defaultValue;
    }

    function readBytesArrayOr(string memory toml, string memory key, bytes[] memory defaultValue)
        internal
        view
        returns (bytes[] memory)
    {
        return keyExists(toml, key) ? readBytesArray(toml, key) : defaultValue;
    }

    function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {
        return vm.serializeJson(jsonKey, rootObject);
    }

    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {
        return vm.serializeBool(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, bool[] memory value)
        internal
        returns (string memory)
    {
        return vm.serializeBool(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {
        return vm.serializeUint(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, uint256[] memory value)
        internal
        returns (string memory)
    {
        return vm.serializeUint(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {
        return vm.serializeInt(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, int256[] memory value)
        internal
        returns (string memory)
    {
        return vm.serializeInt(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {
        return vm.serializeAddress(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, address[] memory value)
        internal
        returns (string memory)
    {
        return vm.serializeAddress(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {
        return vm.serializeBytes32(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)
        internal
        returns (string memory)
    {
        return vm.serializeBytes32(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {
        return vm.serializeBytes(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, bytes[] memory value)
        internal
        returns (string memory)
    {
        return vm.serializeBytes(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, string memory value)
        internal
        returns (string memory)
    {
        return vm.serializeString(jsonKey, key, value);
    }

    function serialize(string memory jsonKey, string memory key, string[] memory value)
        internal
        returns (string memory)
    {
        return vm.serializeString(jsonKey, key, value);
    }

    function write(string memory jsonKey, string memory path) internal {
        vm.writeToml(jsonKey, path);
    }

    function write(string memory jsonKey, string memory path, string memory valueKey) internal {
        vm.writeToml(jsonKey, path, valueKey);
    }
}

================
File: lib/forge-std/src/StdUtils.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

pragma experimental ABIEncoderV2;

import {IMulticall3} from "./interfaces/IMulticall3.sol";
import {VmSafe} from "./Vm.sol";

abstract contract StdUtils {
    /*//////////////////////////////////////////////////////////////////////////
                                     CONSTANTS
    //////////////////////////////////////////////////////////////////////////*/

    IMulticall3 private constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);
    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));
    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;
    uint256 private constant INT256_MIN_ABS =
        57896044618658097711785492504343953926634992332820282019728792003956564819968;
    uint256 private constant SECP256K1_ORDER =
        115792089237316195423570985008687907852837564279074904382605163141518161494337;
    uint256 private constant UINT256_MAX =
        115792089237316195423570985008687907853269984665640564039457584007913129639935;

    // Used by default when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.
    address private constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;

    /*//////////////////////////////////////////////////////////////////////////
                                 INTERNAL FUNCTIONS
    //////////////////////////////////////////////////////////////////////////*/

    function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {
        require(min <= max, "StdUtils bound(uint256,uint256,uint256): Max is less than min.");
        // If x is between min and max, return x directly. This is to ensure that dictionary values
        // do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188
        if (x >= min && x <= max) return x;

        uint256 size = max - min + 1;

        // If the value is 0, 1, 2, 3, wrap that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.
        // This helps ensure coverage of the min/max values.
        if (x <= 3 && size > x) return min + x;
        if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);

        // Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.
        if (x > max) {
            uint256 diff = x - max;
            uint256 rem = diff % size;
            if (rem == 0) return max;
            result = min + rem - 1;
        } else if (x < min) {
            uint256 diff = min - x;
            uint256 rem = diff % size;
            if (rem == 0) return min;
            result = max - rem + 1;
        }
    }

    function bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {
        result = _bound(x, min, max);
        console2_log_StdUtils("Bound result", result);
    }

    function _bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {
        require(min <= max, "StdUtils bound(int256,int256,int256): Max is less than min.");

        // Shifting all int256 values to uint256 to use _bound function. The range of two types are:
        // int256 : -(2**255) ~ (2**255 - 1)
        // uint256:     0     ~ (2**256 - 1)
        // So, add 2**255, INT256_MIN_ABS to the integer values.
        //
        // If the given integer value is -2**255, we cannot use `-uint256(-x)` because of the overflow.
        // So, use `~uint256(x) + 1` instead.
        uint256 _x = x < 0 ? (INT256_MIN_ABS - ~uint256(x) - 1) : (uint256(x) + INT256_MIN_ABS);
        uint256 _min = min < 0 ? (INT256_MIN_ABS - ~uint256(min) - 1) : (uint256(min) + INT256_MIN_ABS);
        uint256 _max = max < 0 ? (INT256_MIN_ABS - ~uint256(max) - 1) : (uint256(max) + INT256_MIN_ABS);

        uint256 y = _bound(_x, _min, _max);

        // To move it back to int256 value, subtract INT256_MIN_ABS at here.
        result = y < INT256_MIN_ABS ? int256(~(INT256_MIN_ABS - y) + 1) : int256(y - INT256_MIN_ABS);
    }

    function bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {
        result = _bound(x, min, max);
        console2_log_StdUtils("Bound result", vm.toString(result));
    }

    function boundPrivateKey(uint256 privateKey) internal pure virtual returns (uint256 result) {
        result = _bound(privateKey, 1, SECP256K1_ORDER - 1);
    }

    function bytesToUint(bytes memory b) internal pure virtual returns (uint256) {
        require(b.length <= 32, "StdUtils bytesToUint(bytes): Bytes length exceeds 32.");
        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));
    }

    /// @dev Compute the address a contract will be deployed at for a given deployer address and nonce
    /// @notice adapted from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)
    function computeCreateAddress(address deployer, uint256 nonce) internal pure virtual returns (address) {
        console2_log_StdUtils("computeCreateAddress is deprecated. Please use vm.computeCreateAddress instead.");
        return vm.computeCreateAddress(deployer, nonce);
    }

    function computeCreate2Address(bytes32 salt, bytes32 initcodeHash, address deployer)
        internal
        pure
        virtual
        returns (address)
    {
        console2_log_StdUtils("computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.");
        return vm.computeCreate2Address(salt, initcodeHash, deployer);
    }

    /// @dev returns the address of a contract created with CREATE2 using the default CREATE2 deployer
    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal pure returns (address) {
        console2_log_StdUtils("computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.");
        return vm.computeCreate2Address(salt, initCodeHash);
    }

    /// @dev returns the hash of the init code (creation code + no args) used in CREATE2 with no constructor arguments
    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode
    function hashInitCode(bytes memory creationCode) internal pure returns (bytes32) {
        return hashInitCode(creationCode, "");
    }

    /// @dev returns the hash of the init code (creation code + ABI-encoded args) used in CREATE2
    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode
    /// @param args the ABI-encoded arguments to the constructor of C
    function hashInitCode(bytes memory creationCode, bytes memory args) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked(creationCode, args));
    }

    // Performs a single call with Multicall3 to query the ERC-20 token balances of the given addresses.
    function getTokenBalances(address token, address[] memory addresses)
        internal
        virtual
        returns (uint256[] memory balances)
    {
        uint256 tokenCodeSize;
        assembly {
            tokenCodeSize := extcodesize(token)
        }
        require(tokenCodeSize > 0, "StdUtils getTokenBalances(address,address[]): Token address is not a contract.");

        // ABI encode the aggregate call to Multicall3.
        uint256 length = addresses.length;
        IMulticall3.Call[] memory calls = new IMulticall3.Call[](length);
        for (uint256 i = 0; i < length; ++i) {
            // 0x70a08231 = bytes4("balanceOf(address)"))
            calls[i] = IMulticall3.Call({target: token, callData: abi.encodeWithSelector(0x70a08231, (addresses[i]))});
        }

        // Make the aggregate call.
        (, bytes[] memory returnData) = multicall.aggregate(calls);

        // ABI decode the return data and return the balances.
        balances = new uint256[](length);
        for (uint256 i = 0; i < length; ++i) {
            balances[i] = abi.decode(returnData[i], (uint256));
        }
    }

    /*//////////////////////////////////////////////////////////////////////////
                                 PRIVATE FUNCTIONS
    //////////////////////////////////////////////////////////////////////////*/

    function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {
        return address(uint160(uint256(bytesValue)));
    }

    // This section is used to prevent the compilation of console, which shortens the compilation time when console is
    // not used elsewhere. We also trick the compiler into letting us make the console log methods as `pure` to avoid
    // any breaking changes to function signatures.
    function _castLogPayloadViewToPure(function(bytes memory) internal view fnIn)
        internal
        pure
        returns (function(bytes memory) internal pure fnOut)
    {
        assembly {
            fnOut := fnIn
        }
    }

    function _sendLogPayload(bytes memory payload) internal pure {
        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);
    }

    function _sendLogPayloadView(bytes memory payload) private view {
        uint256 payloadLength = payload.length;
        address consoleAddress = CONSOLE2_ADDRESS;
        /// @solidity memory-safe-assembly
        assembly {
            let payloadStart := add(payload, 32)
            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)
        }
    }

    function console2_log_StdUtils(string memory p0) private pure {
        _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
    }

    function console2_log_StdUtils(string memory p0, uint256 p1) private pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,uint256)", p0, p1));
    }

    function console2_log_StdUtils(string memory p0, string memory p1) private pure {
        _sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
    }
}

================
File: lib/forge-std/src/Test.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

pragma experimental ABIEncoderV2;

// 💬 ABOUT
// Forge Std's default Test.

// 🧩 MODULES
import {console} from "./console.sol";
import {console2} from "./console2.sol";
import {safeconsole} from "./safeconsole.sol";
import {StdAssertions} from "./StdAssertions.sol";
import {StdChains} from "./StdChains.sol";
import {StdCheats} from "./StdCheats.sol";
import {stdError} from "./StdError.sol";
import {StdInvariant} from "./StdInvariant.sol";
import {stdJson} from "./StdJson.sol";
import {stdMath} from "./StdMath.sol";
import {StdStorage, stdStorage} from "./StdStorage.sol";
import {StdStyle} from "./StdStyle.sol";
import {stdToml} from "./StdToml.sol";
import {StdUtils} from "./StdUtils.sol";
import {Vm} from "./Vm.sol";

// 📦 BOILERPLATE
import {TestBase} from "./Base.sol";

// ⭐️ TEST
abstract contract Test is TestBase, StdAssertions, StdChains, StdCheats, StdInvariant, StdUtils {
    // Note: IS_TEST() must return true.
    bool public IS_TEST = true;
}

================
File: lib/forge-std/src/Vm.sol
================
// Automatically @generated by scripts/vm.py. Do not modify manually.

// SPDX-License-Identifier: MIT OR Apache-2.0
pragma solidity >=0.6.2 <0.9.0;
pragma experimental ABIEncoderV2;

/// The `VmSafe` interface does not allow manipulation of the EVM state or other actions that may
/// result in Script simulations differing from on-chain execution. It is recommended to only use
/// these cheats in scripts.
interface VmSafe {
    /// A modification applied to either `msg.sender` or `tx.origin`. Returned by `readCallers`.
    enum CallerMode {
        // No caller modification is currently active.
        None,
        // A one time broadcast triggered by a `vm.broadcast()` call is currently active.
        Broadcast,
        // A recurrent broadcast triggered by a `vm.startBroadcast()` call is currently active.
        RecurrentBroadcast,
        // A one time prank triggered by a `vm.prank()` call is currently active.
        Prank,
        // A recurrent prank triggered by a `vm.startPrank()` call is currently active.
        RecurrentPrank
    }

    /// The kind of account access that occurred.
    enum AccountAccessKind {
        // The account was called.
        Call,
        // The account was called via delegatecall.
        DelegateCall,
        // The account was called via callcode.
        CallCode,
        // The account was called via staticcall.
        StaticCall,
        // The account was created.
        Create,
        // The account was selfdestructed.
        SelfDestruct,
        // Synthetic access indicating the current context has resumed after a previous sub-context (AccountAccess).
        Resume,
        // The account's balance was read.
        Balance,
        // The account's codesize was read.
        Extcodesize,
        // The account's codehash was read.
        Extcodehash,
        // The account's code was copied.
        Extcodecopy
    }

    /// Forge execution contexts.
    enum ForgeContext {
        // Test group execution context (test, coverage or snapshot).
        TestGroup,
        // `forge test` execution context.
        Test,
        // `forge coverage` execution context.
        Coverage,
        // `forge snapshot` execution context.
        Snapshot,
        // Script group execution context (dry run, broadcast or resume).
        ScriptGroup,
        // `forge script` execution context.
        ScriptDryRun,
        // `forge script --broadcast` execution context.
        ScriptBroadcast,
        // `forge script --resume` execution context.
        ScriptResume,
        // Unknown `forge` execution context.
        Unknown
    }

    /// The transaction type (`txType`) of the broadcast.
    enum BroadcastTxType {
        // Represents a CALL broadcast tx.
        Call,
        // Represents a CREATE broadcast tx.
        Create,
        // Represents a CREATE2 broadcast tx.
        Create2
    }

    /// An Ethereum log. Returned by `getRecordedLogs`.
    struct Log {
        // The topics of the log, including the signature, if any.
        bytes32[] topics;
        // The raw data of the log.
        bytes data;
        // The address of the log's emitter.
        address emitter;
    }

    /// An RPC URL and its alias. Returned by `rpcUrlStructs`.
    struct Rpc {
        // The alias of the RPC URL.
        string key;
        // The RPC URL.
        string url;
    }

    /// An RPC log object. Returned by `eth_getLogs`.
    struct EthGetLogs {
        // The address of the log's emitter.
        address emitter;
        // The topics of the log, including the signature, if any.
        bytes32[] topics;
        // The raw data of the log.
        bytes data;
        // The block hash.
        bytes32 blockHash;
        // The block number.
        uint64 blockNumber;
        // The transaction hash.
        bytes32 transactionHash;
        // The transaction index in the block.
        uint64 transactionIndex;
        // The log index.
        uint256 logIndex;
        // Whether the log was removed.
        bool removed;
    }

    /// A single entry in a directory listing. Returned by `readDir`.
    struct DirEntry {
        // The error message, if any.
        string errorMessage;
        // The path of the entry.
        string path;
        // The depth of the entry.
        uint64 depth;
        // Whether the entry is a directory.
        bool isDir;
        // Whether the entry is a symlink.
        bool isSymlink;
    }

    /// Metadata information about a file.
    /// This structure is returned from the `fsMetadata` function and represents known
    /// metadata about a file such as its permissions, size, modification
    /// times, etc.
    struct FsMetadata {
        // True if this metadata is for a directory.
        bool isDir;
        // True if this metadata is for a symlink.
        bool isSymlink;
        // The size of the file, in bytes, this metadata is for.
        uint256 length;
        // True if this metadata is for a readonly (unwritable) file.
        bool readOnly;
        // The last modification time listed in this metadata.
        uint256 modified;
        // The last access time of this metadata.
        uint256 accessed;
        // The creation time listed in this metadata.
        uint256 created;
    }

    /// A wallet with a public and private key.
    struct Wallet {
        // The wallet's address.
        address addr;
        // The wallet's public key `X`.
        uint256 publicKeyX;
        // The wallet's public key `Y`.
        uint256 publicKeyY;
        // The wallet's private key.
        uint256 privateKey;
    }

    /// The result of a `tryFfi` call.
    struct FfiResult {
        // The exit code of the call.
        int32 exitCode;
        // The optionally hex-decoded `stdout` data.
        bytes stdout;
        // The `stderr` data.
        bytes stderr;
    }

    /// Information on the chain and fork.
    struct ChainInfo {
        // The fork identifier. Set to zero if no fork is active.
        uint256 forkId;
        // The chain ID of the current fork.
        uint256 chainId;
    }

    /// The result of a `stopAndReturnStateDiff` call.
    struct AccountAccess {
        // The chain and fork the access occurred.
        ChainInfo chainInfo;
        // The kind of account access that determines what the account is.
        // If kind is Call, DelegateCall, StaticCall or CallCode, then the account is the callee.
        // If kind is Create, then the account is the newly created account.
        // If kind is SelfDestruct, then the account is the selfdestruct recipient.
        // If kind is a Resume, then account represents a account context that has resumed.
        AccountAccessKind kind;
        // The account that was accessed.
        // It's either the account created, callee or a selfdestruct recipient for CREATE, CALL or SELFDESTRUCT.
        address account;
        // What accessed the account.
        address accessor;
        // If the account was initialized or empty prior to the access.
        // An account is considered initialized if it has code, a
        // non-zero nonce, or a non-zero balance.
        bool initialized;
        // The previous balance of the accessed account.
        uint256 oldBalance;
        // The potential new balance of the accessed account.
        // That is, all balance changes are recorded here, even if reverts occurred.
        uint256 newBalance;
        // Code of the account deployed by CREATE.
        bytes deployedCode;
        // Value passed along with the account access
        uint256 value;
        // Input data provided to the CREATE or CALL
        bytes data;
        // If this access reverted in either the current or parent context.
        bool reverted;
        // An ordered list of storage accesses made during an account access operation.
        StorageAccess[] storageAccesses;
        // Call depth traversed during the recording of state differences
        uint64 depth;
    }

    /// The storage accessed during an `AccountAccess`.
    struct StorageAccess {
        // The account whose storage was accessed.
        address account;
        // The slot that was accessed.
        bytes32 slot;
        // If the access was a write.
        bool isWrite;
        // The previous value of the slot.
        bytes32 previousValue;
        // The new value of the slot.
        bytes32 newValue;
        // If the access was reverted.
        bool reverted;
    }

    /// Gas used. Returned by `lastCallGas`.
    struct Gas {
        // The gas limit of the call.
        uint64 gasLimit;
        // The total gas used.
        uint64 gasTotalUsed;
        // DEPRECATED: The amount of gas used for memory expansion. Ref: <https://github.com/foundry-rs/foundry/pull/7934#pullrequestreview-2069236939>
        uint64 gasMemoryUsed;
        // The amount of gas refunded.
        int64 gasRefunded;
        // The amount of gas remaining.
        uint64 gasRemaining;
    }

    /// The result of the `stopDebugTraceRecording` call
    struct DebugStep {
        // The stack before executing the step of the run.
        // stack\[0\] represents the top of the stack.
        // and only stack data relevant to the opcode execution is contained.
        uint256[] stack;
        // The memory input data before executing the step of the run.
        // only input data relevant to the opcode execution is contained.
        // e.g. for MLOAD, it will have memory\[offset:offset+32\] copied here.
        // the offset value can be get by the stack data.
        bytes memoryInput;
        // The opcode that was accessed.
        uint8 opcode;
        // The call depth of the step.
        uint64 depth;
        // Whether the call end up with out of gas error.
        bool isOutOfGas;
        // The contract address where the opcode is running
        address contractAddr;
    }

    /// Represents a transaction's broadcast details.
    struct BroadcastTxSummary {
        // The hash of the transaction that was broadcasted
        bytes32 txHash;
        // Represent the type of transaction among CALL, CREATE, CREATE2
        BroadcastTxType txType;
        // The address of the contract that was called or created.
        // This is address of the contract that is created if the txType is CREATE or CREATE2.
        address contractAddress;
        // The block number the transaction landed in.
        uint64 blockNumber;
        // Status of the transaction, retrieved from the transaction receipt.
        bool success;
    }

    /// Holds a signed EIP-7702 authorization for an authority account to delegate to an implementation.
    struct SignedDelegation {
        // The y-parity of the recovered secp256k1 signature (0 or 1).
        uint8 v;
        // First 32 bytes of the signature.
        bytes32 r;
        // Second 32 bytes of the signature.
        bytes32 s;
        // The current nonce of the authority account at signing time.
        // Used to ensure signature can't be replayed after account nonce changes.
        uint64 nonce;
        // Address of the contract implementation that will be delegated to.
        // Gets encoded into delegation code: 0xef0100 || implementation.
        address implementation;
    }

    /// Represents a "potential" revert reason from a single subsequent call when using `vm.assumeNoReverts`.
    /// Reverts that match will result in a FOUNDRY::ASSUME rejection, whereas unmatched reverts will be surfaced
    /// as normal.
    struct PotentialRevert {
        // The allowed origin of the revert opcode; address(0) allows reverts from any address
        address reverter;
        // When true, only matches on the beginning of the revert data, otherwise, matches on entire revert data
        bool partialMatch;
        // The data to use to match encountered reverts
        bytes revertData;
    }

    // ======== Crypto ========

    /// Derives a private key from the name, labels the account with that name, and returns the wallet.
    function createWallet(string calldata walletLabel) external returns (Wallet memory wallet);

    /// Generates a wallet from the private key and returns the wallet.
    function createWallet(uint256 privateKey) external returns (Wallet memory wallet);

    /// Generates a wallet from the private key, labels the account with that name, and returns the wallet.
    function createWallet(uint256 privateKey, string calldata walletLabel) external returns (Wallet memory wallet);

    /// Derive a private key from a provided mnenomic string (or mnenomic file path)
    /// at the derivation path `m/44'/60'/0'/0/{index}`.
    function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);

    /// Derive a private key from a provided mnenomic string (or mnenomic file path)
    /// at `{derivationPath}{index}`.
    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index)
        external
        pure
        returns (uint256 privateKey);

    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language
    /// at the derivation path `m/44'/60'/0'/0/{index}`.
    function deriveKey(string calldata mnemonic, uint32 index, string calldata language)
        external
        pure
        returns (uint256 privateKey);

    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language
    /// at `{derivationPath}{index}`.
    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index, string calldata language)
        external
        pure
        returns (uint256 privateKey);

    /// Derives secp256r1 public key from the provided `privateKey`.
    function publicKeyP256(uint256 privateKey) external pure returns (uint256 publicKeyX, uint256 publicKeyY);

    /// Adds a private key to the local forge wallet and returns the address.
    function rememberKey(uint256 privateKey) external returns (address keyAddr);

    /// Derive a set number of wallets from a mnemonic at the derivation path `m/44'/60'/0'/0/{0..count}`.
    /// The respective private keys are saved to the local forge wallet for later use and their addresses are returned.
    function rememberKeys(string calldata mnemonic, string calldata derivationPath, uint32 count)
        external
        returns (address[] memory keyAddrs);

    /// Derive a set number of wallets from a mnemonic in the specified language at the derivation path `m/44'/60'/0'/0/{0..count}`.
    /// The respective private keys are saved to the local forge wallet for later use and their addresses are returned.
    function rememberKeys(
        string calldata mnemonic,
        string calldata derivationPath,
        string calldata language,
        uint32 count
    ) external returns (address[] memory keyAddrs);

    /// Signs data with a `Wallet`.
    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the
    /// signature's `s` value, and the recovery id `v` in a single bytes32.
    /// This format reduces the signature size from 65 to 64 bytes.
    function signCompact(Wallet calldata wallet, bytes32 digest) external returns (bytes32 r, bytes32 vs);

    /// Signs `digest` with `privateKey` using the secp256k1 curve.
    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the
    /// signature's `s` value, and the recovery id `v` in a single bytes32.
    /// This format reduces the signature size from 65 to 64 bytes.
    function signCompact(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 vs);

    /// Signs `digest` with signer provided to script using the secp256k1 curve.
    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the
    /// signature's `s` value, and the recovery id `v` in a single bytes32.
    /// This format reduces the signature size from 65 to 64 bytes.
    /// If `--sender` is provided, the signer with provided address is used, otherwise,
    /// if exactly one signer is provided to the script, that signer is used.
    /// Raises error if signer passed through `--sender` does not match any unlocked signers or
    /// if `--sender` is not provided and not exactly one signer is passed to the script.
    function signCompact(bytes32 digest) external pure returns (bytes32 r, bytes32 vs);

    /// Signs `digest` with signer provided to script using the secp256k1 curve.
    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the
    /// signature's `s` value, and the recovery id `v` in a single bytes32.
    /// This format reduces the signature size from 65 to 64 bytes.
    /// Raises error if none of the signers passed into the script have provided address.
    function signCompact(address signer, bytes32 digest) external pure returns (bytes32 r, bytes32 vs);

    /// Signs `digest` with `privateKey` using the secp256r1 curve.
    function signP256(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 s);

    /// Signs data with a `Wallet`.
    function sign(Wallet calldata wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);

    /// Signs `digest` with `privateKey` using the secp256k1 curve.
    function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);

    /// Signs `digest` with signer provided to script using the secp256k1 curve.
    /// If `--sender` is provided, the signer with provided address is used, otherwise,
    /// if exactly one signer is provided to the script, that signer is used.
    /// Raises error if signer passed through `--sender` does not match any unlocked signers or
    /// if `--sender` is not provided and not exactly one signer is passed to the script.
    function sign(bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);

    /// Signs `digest` with signer provided to script using the secp256k1 curve.
    /// Raises error if none of the signers passed into the script have provided address.
    function sign(address signer, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);

    // ======== Environment ========

    /// Gets the environment variable `name` and parses it as `address`.
    /// Reverts if the variable was not found or could not be parsed.
    function envAddress(string calldata name) external view returns (address value);

    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.
    /// Reverts if the variable was not found or could not be parsed.
    function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);

    /// Gets the environment variable `name` and parses it as `bool`.
    /// Reverts if the variable was not found or could not be parsed.
    function envBool(string calldata name) external view returns (bool value);

    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.
    /// Reverts if the variable was not found or could not be parsed.
    function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);

    /// Gets the environment variable `name` and parses it as `bytes32`.
    /// Reverts if the variable was not found or could not be parsed.
    function envBytes32(string calldata name) external view returns (bytes32 value);

    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.
    /// Reverts if the variable was not found or could not be parsed.
    function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);

    /// Gets the environment variable `name` and parses it as `bytes`.
    /// Reverts if the variable was not found or could not be parsed.
    function envBytes(string calldata name) external view returns (bytes memory value);

    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.
    /// Reverts if the variable was not found or could not be parsed.
    function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);

    /// Gets the environment variable `name` and returns true if it exists, else returns false.
    function envExists(string calldata name) external view returns (bool result);

    /// Gets the environment variable `name` and parses it as `int256`.
    /// Reverts if the variable was not found or could not be parsed.
    function envInt(string calldata name) external view returns (int256 value);

    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.
    /// Reverts if the variable was not found or could not be parsed.
    function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);

    /// Gets the environment variable `name` and parses it as `bool`.
    /// Reverts if the variable could not be parsed.
    /// Returns `defaultValue` if the variable was not found.
    function envOr(string calldata name, bool defaultValue) external view returns (bool value);

    /// Gets the environment variable `name` and parses it as `uint256`.
    /// Reverts if the variable could not be parsed.
    /// Returns `defaultValue` if the variable was not found.
    function envOr(string calldata name, uint256 defaultValue) external view returns (uint256 value);

    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.
    /// Reverts if the variable could not be parsed.
    /// Returns `defaultValue` if the variable was not found.
    function envOr(string calldata name, string calldata delim, address[] calldata defaultValue)
        external
        view
        returns (address[] memory value);

    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.
    /// Reverts if the variable could not be parsed.
    /// Returns `defaultValue` if the variable was not found.
    function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue)
        external
        view
        returns (bytes32[] memory value);

    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.
    /// Reverts if the variable could not be parsed.
    /// Returns `defaultValue` if the variable was not found.
    function envOr(string calldata name, string calldata delim, string[] calldata defaultValue)
        external
        view
        returns (string[] memory value);

    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.
    /// Reverts if the variable could not be parsed.
    /// Returns `defaultValue` if the variable was not found.
    function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue)
        external
        view
        returns (bytes[] memory value);

    /// Gets the environment variable `name` and parses it as `int256`.
    /// Reverts if the variable could not be parsed.
    /// Returns `defaultValue` if the variable was not found.
    function envOr(string calldata name, int256 defaultValue) external view returns (int256 value);

    /// Gets the environment variable `name` and parses it as `address`.
    /// Reverts if the variable could not be parsed.
    /// Returns `defaultValue` if the variable was not found.
    function envOr(string calldata name, address defaultValue) external view returns (address value);

    /// Gets the environment variable `name` and parses it as `bytes32`.
    /// Reverts if the variable could not be parsed.
    /// Returns `defaultValue` if the variable was not found.
    function envOr(string calldata name, bytes32 defaultValue) external view returns (bytes32 value);

    /// Gets the environment variable `name` and parses it as `string`.
    /// Reverts if the variable could not be parsed.
    /// Returns `defaultValue` if the variable was not found.
    function envOr(string calldata name, string calldata defaultValue) external view returns (string memory value);

    /// Gets the environment variable `name` and parses it as `bytes`.
    /// Reverts if the variable could not be parsed.
    /// Returns `defaultValue` if the variable was not found.
    function envOr(string calldata name, bytes calldata defaultValue) external view returns (bytes memory value);

    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.
    /// Reverts if the variable could not be parsed.
    /// Returns `defaultValue` if the variable was not found.
    function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue)
        external
        view
        returns (bool[] memory value);

    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.
    /// Reverts if the variable could not be parsed.
    /// Returns `defaultValue` if the variable was not found.
    function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue)
        external
        view
        returns (uint256[] memory value);

    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.
    /// Reverts if the variable could not be parsed.
    /// Returns `defaultValue` if the variable was not found.
    function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue)
        external
        view
        returns (int256[] memory value);

    /// Gets the environment variable `name` and parses it as `string`.
    /// Reverts if the variable was not found or could not be parsed.
    function envString(string calldata name) external view returns (string memory value);

    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.
    /// Reverts if the variable was not found or could not be parsed.
    function envString(string calldata name, string calldata delim) external view returns (string[] memory value);

    /// Gets the environment variable `name` and parses it as `uint256`.
    /// Reverts if the variable was not found or could not be parsed.
    function envUint(string calldata name) external view returns (uint256 value);

    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.
    /// Reverts if the variable was not found or could not be parsed.
    function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);

    /// Returns true if `forge` command was executed in given context.
    function isContext(ForgeContext context) external view returns (bool result);

    /// Sets environment variables.
    function setEnv(string calldata name, string calldata value) external;

    // ======== EVM ========

    /// Gets all accessed reads and write slot from a `vm.record` session, for a given address.
    function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);

    /// Gets the address for a given private key.
    function addr(uint256 privateKey) external pure returns (address keyAddr);

    /// Gets all the logs according to specified filter.
    function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] calldata topics)
        external
        returns (EthGetLogs[] memory logs);

    /// Gets the current `block.blobbasefee`.
    /// You should use this instead of `block.blobbasefee` if you use `vm.blobBaseFee`, as `block.blobbasefee` is assumed to be constant across a transaction,
    /// and as a result will get optimized out by the compiler.
    /// See https://github.com/foundry-rs/foundry/issues/6180
    function getBlobBaseFee() external view returns (uint256 blobBaseFee);

    /// Gets the current `block.number`.
    /// You should use this instead of `block.number` if you use `vm.roll`, as `block.number` is assumed to be constant across a transaction,
    /// and as a result will get optimized out by the compiler.
    /// See https://github.com/foundry-rs/foundry/issues/6180
    function getBlockNumber() external view returns (uint256 height);

    /// Gets the current `block.timestamp`.
    /// You should use this instead of `block.timestamp` if you use `vm.warp`, as `block.timestamp` is assumed to be constant across a transaction,
    /// and as a result will get optimized out by the compiler.
    /// See https://github.com/foundry-rs/foundry/issues/6180
    function getBlockTimestamp() external view returns (uint256 timestamp);

    /// Gets the map key and parent of a mapping at a given slot, for a given address.
    function getMappingKeyAndParentOf(address target, bytes32 elementSlot)
        external
        returns (bool found, bytes32 key, bytes32 parent);

    /// Gets the number of elements in the mapping at the given slot, for a given address.
    function getMappingLength(address target, bytes32 mappingSlot) external returns (uint256 length);

    /// Gets the elements at index idx of the mapping at the given slot, for a given address. The
    /// index must be less than the length of the mapping (i.e. the number of keys in the mapping).
    function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) external returns (bytes32 value);

    /// Gets the nonce of an account.
    function getNonce(address account) external view returns (uint64 nonce);

    /// Get the nonce of a `Wallet`.
    function getNonce(Wallet calldata wallet) external returns (uint64 nonce);

    /// Gets all the recorded logs.
    function getRecordedLogs() external returns (Log[] memory logs);

    /// Returns state diffs from current `vm.startStateDiffRecording` session.
    function getStateDiff() external view returns (string memory diff);

    /// Returns state diffs from current `vm.startStateDiffRecording` session, in json format.
    function getStateDiffJson() external view returns (string memory diff);

    /// Gets the gas used in the last call from the callee perspective.
    function lastCallGas() external view returns (Gas memory gas);

    /// Loads a storage slot from an address.
    function load(address target, bytes32 slot) external view returns (bytes32 data);

    /// Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.
    function pauseGasMetering() external;

    /// Records all storage reads and writes.
    function record() external;

    /// Record all the transaction logs.
    function recordLogs() external;

    /// Reset gas metering (i.e. gas usage is set to gas limit).
    function resetGasMetering() external;

    /// Resumes gas metering (i.e. gas usage is counted again). Noop if already on.
    function resumeGasMetering() external;

    /// Performs an Ethereum JSON-RPC request to the current fork URL.
    function rpc(string calldata method, string calldata params) external returns (bytes memory data);

    /// Performs an Ethereum JSON-RPC request to the given endpoint.
    function rpc(string calldata urlOrAlias, string calldata method, string calldata params)
        external
        returns (bytes memory data);

    /// Records the debug trace during the run.
    function startDebugTraceRecording() external;

    /// Starts recording all map SSTOREs for later retrieval.
    function startMappingRecording() external;

    /// Record all account accesses as part of CREATE, CALL or SELFDESTRUCT opcodes in order,
    /// along with the context of the calls
    function startStateDiffRecording() external;

    /// Stop debug trace recording and returns the recorded debug trace.
    function stopAndReturnDebugTraceRecording() external returns (DebugStep[] memory step);

    /// Returns an ordered array of all account accesses from a `vm.startStateDiffRecording` session.
    function stopAndReturnStateDiff() external returns (AccountAccess[] memory accountAccesses);

    /// Stops recording all map SSTOREs for later retrieval and clears the recorded data.
    function stopMappingRecording() external;

    // ======== Filesystem ========

    /// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.
    /// `path` is relative to the project root.
    function closeFile(string calldata path) external;

    /// Copies the contents of one file to another. This function will **overwrite** the contents of `to`.
    /// On success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`.
    /// Both `from` and `to` are relative to the project root.
    function copyFile(string calldata from, string calldata to) external returns (uint64 copied);

    /// Creates a new, empty directory at the provided path.
    /// This cheatcode will revert in the following situations, but is not limited to just these cases:
    /// - User lacks permissions to modify `path`.
    /// - A parent of the given path doesn't exist and `recursive` is false.
    /// - `path` already exists and `recursive` is false.
    /// `path` is relative to the project root.
    function createDir(string calldata path, bool recursive) external;

    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the
    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.
    function deployCode(string calldata artifactPath) external returns (address deployedAddress);

    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the
    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.
    /// Additionally accepts abi-encoded constructor arguments.
    function deployCode(string calldata artifactPath, bytes calldata constructorArgs)
        external
        returns (address deployedAddress);

    /// Returns true if the given path points to an existing entity, else returns false.
    function exists(string calldata path) external view returns (bool result);

    /// Performs a foreign function call via the terminal.
    function ffi(string[] calldata commandInput) external returns (bytes memory result);

    /// Given a path, query the file system to get information about a file, directory, etc.
    function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);

    /// Gets the artifact path from code (aka. creation code).
    function getArtifactPathByCode(bytes calldata code) external view returns (string memory path);

    /// Gets the artifact path from deployed code (aka. runtime code).
    function getArtifactPathByDeployedCode(bytes calldata deployedCode) external view returns (string memory path);

    /// Returns the most recent broadcast for the given contract on `chainId` matching `txType`.
    /// For example:
    /// The most recent deployment can be fetched by passing `txType` as `CREATE` or `CREATE2`.
    /// The most recent call can be fetched by passing `txType` as `CALL`.
    function getBroadcast(string calldata contractName, uint64 chainId, BroadcastTxType txType)
        external
        view
        returns (BroadcastTxSummary memory);

    /// Returns all broadcasts for the given contract on `chainId` with the specified `txType`.
    /// Sorted such that the most recent broadcast is the first element, and the oldest is the last. i.e descending order of BroadcastTxSummary.blockNumber.
    function getBroadcasts(string calldata contractName, uint64 chainId, BroadcastTxType txType)
        external
        view
        returns (BroadcastTxSummary[] memory);

    /// Returns all broadcasts for the given contract on `chainId`.
    /// Sorted such that the most recent broadcast is the first element, and the oldest is the last. i.e descending order of BroadcastTxSummary.blockNumber.
    function getBroadcasts(string calldata contractName, uint64 chainId)
        external
        view
        returns (BroadcastTxSummary[] memory);

    /// Gets the creation bytecode from an artifact file. Takes in the relative path to the json file or the path to the
    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.
    function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);

    /// Gets the deployed bytecode from an artifact file. Takes in the relative path to the json file or the path to the
    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.
    function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);

    /// Returns the most recent deployment for the current `chainId`.
    function getDeployment(string calldata contractName) external view returns (address deployedAddress);

    /// Returns the most recent deployment for the given contract on `chainId`
    function getDeployment(string calldata contractName, uint64 chainId)
        external
        view
        returns (address deployedAddress);

    /// Returns all deployments for the given contract on `chainId`
    /// Sorted in descending order of deployment time i.e descending order of BroadcastTxSummary.blockNumber.
    /// The most recent deployment is the first element, and the oldest is the last.
    function getDeployments(string calldata contractName, uint64 chainId)
        external
        view
        returns (address[] memory deployedAddresses);

    /// Returns true if the path exists on disk and is pointing at a directory, else returns false.
    function isDir(string calldata path) external view returns (bool result);

    /// Returns true if the path exists on disk and is pointing at a regular file, else returns false.
    function isFile(string calldata path) external view returns (bool result);

    /// Get the path of the current project root.
    function projectRoot() external view returns (string memory path);

    /// Prompts the user for a string value in the terminal.
    function prompt(string calldata promptText) external returns (string memory input);

    /// Prompts the user for an address in the terminal.
    function promptAddress(string calldata promptText) external returns (address);

    /// Prompts the user for a hidden string value in the terminal.
    function promptSecret(string calldata promptText) external returns (string memory input);

    /// Prompts the user for hidden uint256 in the terminal (usually pk).
    function promptSecretUint(string calldata promptText) external returns (uint256);

    /// Prompts the user for uint256 in the terminal.
    function promptUint(string calldata promptText) external returns (uint256);

    /// Reads the directory at the given path recursively, up to `maxDepth`.
    /// `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.
    /// Follows symbolic links if `followLinks` is true.
    function readDir(string calldata path) external view returns (DirEntry[] memory entries);

    /// See `readDir(string)`.
    function readDir(string calldata path, uint64 maxDepth) external view returns (DirEntry[] memory entries);

    /// See `readDir(string)`.
    function readDir(string calldata path, uint64 maxDepth, bool followLinks)
        external
        view
        returns (DirEntry[] memory entries);

    /// Reads the entire content of file to string. `path` is relative to the project root.
    function readFile(string calldata path) external view returns (string memory data);

    /// Reads the entire content of file as binary. `path` is relative to the project root.
    function readFileBinary(string calldata path) external view returns (bytes memory data);

    /// Reads next line of file to string.
    function readLine(string calldata path) external view returns (string memory line);

    /// Reads a symbolic link, returning the path that the link points to.
    /// This cheatcode will revert in the following situations, but is not limited to just these cases:
    /// - `path` is not a symbolic link.
    /// - `path` does not exist.
    function readLink(string calldata linkPath) external view returns (string memory targetPath);

    /// Removes a directory at the provided path.
    /// This cheatcode will revert in the following situations, but is not limited to just these cases:
    /// - `path` doesn't exist.
    /// - `path` isn't a directory.
    /// - User lacks permissions to modify `path`.
    /// - The directory is not empty and `recursive` is false.
    /// `path` is relative to the project root.
    function removeDir(string calldata path, bool recursive) external;

    /// Removes a file from the filesystem.
    /// This cheatcode will revert in the following situations, but is not limited to just these cases:
    /// - `path` points to a directory.
    /// - The file doesn't exist.
    /// - The user lacks permissions to remove the file.
    /// `path` is relative to the project root.
    function removeFile(string calldata path) external;

    /// Performs a foreign function call via terminal and returns the exit code, stdout, and stderr.
    function tryFfi(string[] calldata commandInput) external returns (FfiResult memory result);

    /// Returns the time since unix epoch in milliseconds.
    function unixTime() external view returns (uint256 milliseconds);

    /// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.
    /// `path` is relative to the project root.
    function writeFile(string calldata path, string calldata data) external;

    /// Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.
    /// `path` is relative to the project root.
    function writeFileBinary(string calldata path, bytes calldata data) external;

    /// Writes line to file, creating a file if it does not exist.
    /// `path` is relative to the project root.
    function writeLine(string calldata path, string calldata data) external;

    // ======== JSON ========

    /// Checks if `key` exists in a JSON object.
    function keyExistsJson(string calldata json, string calldata key) external view returns (bool);

    /// Parses a string of JSON data at `key` and coerces it to `address`.
    function parseJsonAddress(string calldata json, string calldata key) external pure returns (address);

    /// Parses a string of JSON data at `key` and coerces it to `address[]`.
    function parseJsonAddressArray(string calldata json, string calldata key)
        external
        pure
        returns (address[] memory);

    /// Parses a string of JSON data at `key` and coerces it to `bool`.
    function parseJsonBool(string calldata json, string calldata key) external pure returns (bool);

    /// Parses a string of JSON data at `key` and coerces it to `bool[]`.
    function parseJsonBoolArray(string calldata json, string calldata key) external pure returns (bool[] memory);

    /// Parses a string of JSON data at `key` and coerces it to `bytes`.
    function parseJsonBytes(string calldata json, string calldata key) external pure returns (bytes memory);

    /// Parses a string of JSON data at `key` and coerces it to `bytes32`.
    function parseJsonBytes32(string calldata json, string calldata key) external pure returns (bytes32);

    /// Parses a string of JSON data at `key` and coerces it to `bytes32[]`.
    function parseJsonBytes32Array(string calldata json, string calldata key)
        external
        pure
        returns (bytes32[] memory);

    /// Parses a string of JSON data at `key` and coerces it to `bytes[]`.
    function parseJsonBytesArray(string calldata json, string calldata key) external pure returns (bytes[] memory);

    /// Parses a string of JSON data at `key` and coerces it to `int256`.
    function parseJsonInt(string calldata json, string calldata key) external pure returns (int256);

    /// Parses a string of JSON data at `key` and coerces it to `int256[]`.
    function parseJsonIntArray(string calldata json, string calldata key) external pure returns (int256[] memory);

    /// Returns an array of all the keys in a JSON object.
    function parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);

    /// Parses a string of JSON data at `key` and coerces it to `string`.
    function parseJsonString(string calldata json, string calldata key) external pure returns (string memory);

    /// Parses a string of JSON data at `key` and coerces it to `string[]`.
    function parseJsonStringArray(string calldata json, string calldata key) external pure returns (string[] memory);

    /// Parses a string of JSON data at `key` and coerces it to type array corresponding to `typeDescription`.
    function parseJsonTypeArray(string calldata json, string calldata key, string calldata typeDescription)
        external
        pure
        returns (bytes memory);

    /// Parses a string of JSON data and coerces it to type corresponding to `typeDescription`.
    function parseJsonType(string calldata json, string calldata typeDescription)
        external
        pure
        returns (bytes memory);

    /// Parses a string of JSON data at `key` and coerces it to type corresponding to `typeDescription`.
    function parseJsonType(string calldata json, string calldata key, string calldata typeDescription)
        external
        pure
        returns (bytes memory);

    /// Parses a string of JSON data at `key` and coerces it to `uint256`.
    function parseJsonUint(string calldata json, string calldata key) external pure returns (uint256);

    /// Parses a string of JSON data at `key` and coerces it to `uint256[]`.
    function parseJsonUintArray(string calldata json, string calldata key) external pure returns (uint256[] memory);

    /// ABI-encodes a JSON object.
    function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);

    /// ABI-encodes a JSON object at `key`.
    function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);

    /// See `serializeJson`.
    function serializeAddress(string calldata objectKey, string calldata valueKey, address value)
        external
        returns (string memory json);

    /// See `serializeJson`.
    function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)
        external
        returns (string memory json);

    /// See `serializeJson`.
    function serializeBool(string calldata objectKey, string calldata valueKey, bool value)
        external
        returns (string memory json);

    /// See `serializeJson`.
    function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)
        external
        returns (string memory json);

    /// See `serializeJson`.
    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)
        external
        returns (string memory json);

    /// See `serializeJson`.
    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)
        external
        returns (string memory json);

    /// See `serializeJson`.
    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)
        external
        returns (string memory json);

    /// See `serializeJson`.
    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)
        external
        returns (string memory json);

    /// See `serializeJson`.
    function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)
        external
        returns (string memory json);

    /// See `serializeJson`.
    function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)
        external
        returns (string memory json);

    /// Serializes a key and value to a JSON object stored in-memory that can be later written to a file.
    /// Returns the stringified version of the specific JSON file up to that moment.
    function serializeJson(string calldata objectKey, string calldata value) external returns (string memory json);

    /// See `serializeJson`.
    function serializeJsonType(string calldata typeDescription, bytes calldata value)
        external
        pure
        returns (string memory json);

    /// See `serializeJson`.
    function serializeJsonType(
        string calldata objectKey,
        string calldata valueKey,
        string calldata typeDescription,
        bytes calldata value
    ) external returns (string memory json);

    /// See `serializeJson`.
    function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)
        external
        returns (string memory json);

    /// See `serializeJson`.
    function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)
        external
        returns (string memory json);

    /// See `serializeJson`.
    function serializeUintToHex(string calldata objectKey, string calldata valueKey, uint256 value)
        external
        returns (string memory json);

    /// See `serializeJson`.
    function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)
        external
        returns (string memory json);

    /// See `serializeJson`.
    function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)
        external
        returns (string memory json);

    /// Write a serialized JSON object to a file. If the file exists, it will be overwritten.
    function writeJson(string calldata json, string calldata path) external;

    /// Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key.>
    /// This is useful to replace a specific value of a JSON file, without having to parse the entire thing.
    function writeJson(string calldata json, string calldata path, string calldata valueKey) external;

    /// Checks if `key` exists in a JSON object
    /// `keyExists` is being deprecated in favor of `keyExistsJson`. It will be removed in future versions.
    function keyExists(string calldata json, string calldata key) external view returns (bool);

    // ======== Scripting ========

    /// Designate the next call as an EIP-7702 transaction
    function attachDelegation(SignedDelegation calldata signedDelegation) external;

    /// Takes a signed transaction and broadcasts it to the network.
    function broadcastRawTransaction(bytes calldata data) external;

    /// Has the next call (at this call depth only) create transactions that can later be signed and sent onchain.
    /// Broadcasting address is determined by checking the following in order:
    /// 1. If `--sender` argument was provided, that address is used.
    /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.
    /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.
    function broadcast() external;

    /// Has the next call (at this call depth only) create a transaction with the address provided
    /// as the sender that can later be signed and sent onchain.
    function broadcast(address signer) external;

    /// Has the next call (at this call depth only) create a transaction with the private key
    /// provided as the sender that can later be signed and sent onchain.
    function broadcast(uint256 privateKey) external;

    /// Returns addresses of available unlocked wallets in the script environment.
    function getWallets() external returns (address[] memory wallets);

    /// Sign an EIP-7702 authorization and designate the next call as an EIP-7702 transaction
    function signAndAttachDelegation(address implementation, uint256 privateKey)
        external
        returns (SignedDelegation memory signedDelegation);

    /// Sign an EIP-7702 authorization for delegation
    function signDelegation(address implementation, uint256 privateKey)
        external
        returns (SignedDelegation memory signedDelegation);

    /// Has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain.
    /// Broadcasting address is determined by checking the following in order:
    /// 1. If `--sender` argument was provided, that address is used.
    /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.
    /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.
    function startBroadcast() external;

    /// Has all subsequent calls (at this call depth only) create transactions with the address
    /// provided that can later be signed and sent onchain.
    function startBroadcast(address signer) external;

    /// Has all subsequent calls (at this call depth only) create transactions with the private key
    /// provided that can later be signed and sent onchain.
    function startBroadcast(uint256 privateKey) external;

    /// Stops collecting onchain transactions.
    function stopBroadcast() external;

    // ======== String ========

    /// Returns true if `search` is found in `subject`, false otherwise.
    function contains(string calldata subject, string calldata search) external returns (bool result);

    /// Returns the index of the first occurrence of a `key` in an `input` string.
    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `key` is not found.
    /// Returns 0 in case of an empty `key`.
    function indexOf(string calldata input, string calldata key) external pure returns (uint256);

    /// Parses the given `string` into an `address`.
    function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);

    /// Parses the given `string` into a `bool`.
    function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);

    /// Parses the given `string` into `bytes`.
    function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);

    /// Parses the given `string` into a `bytes32`.
    function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);

    /// Parses the given `string` into a `int256`.
    function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);

    /// Parses the given `string` into a `uint256`.
    function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);

    /// Replaces occurrences of `from` in the given `string` with `to`.
    function replace(string calldata input, string calldata from, string calldata to)
        external
        pure
        returns (string memory output);

    /// Splits the given `string` into an array of strings divided by the `delimiter`.
    function split(string calldata input, string calldata delimiter) external pure returns (string[] memory outputs);

    /// Converts the given `string` value to Lowercase.
    function toLowercase(string calldata input) external pure returns (string memory output);

    /// Converts the given value to a `string`.
    function toString(address value) external pure returns (string memory stringifiedValue);

    /// Converts the given value to a `string`.
    function toString(bytes calldata value) external pure returns (string memory stringifiedValue);

    /// Converts the given value to a `string`.
    function toString(bytes32 value) external pure returns (string memory stringifiedValue);

    /// Converts the given value to a `string`.
    function toString(bool value) external pure returns (string memory stringifiedValue);

    /// Converts the given value to a `string`.
    function toString(uint256 value) external pure returns (string memory stringifiedValue);

    /// Converts the given value to a `string`.
    function toString(int256 value) external pure returns (string memory stringifiedValue);

    /// Converts the given `string` value to Uppercase.
    function toUppercase(string calldata input) external pure returns (string memory output);

    /// Trims leading and trailing whitespace from the given `string` value.
    function trim(string calldata input) external pure returns (string memory output);

    // ======== Testing ========

    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.
    /// Formats values with decimals in failure message.
    function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) external pure;

    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.
    /// Formats values with decimals in failure message. Includes error message into revert string on failure.
    function assertApproxEqAbsDecimal(
        uint256 left,
        uint256 right,
        uint256 maxDelta,
        uint256 decimals,
        string calldata error
    ) external pure;

    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.
    /// Formats values with decimals in failure message.
    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) external pure;

    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.
    /// Formats values with decimals in failure message. Includes error message into revert string on failure.
    function assertApproxEqAbsDecimal(
        int256 left,
        int256 right,
        uint256 maxDelta,
        uint256 decimals,
        string calldata error
    ) external pure;

    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.
    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) external pure;

    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.
    /// Includes error message into revert string on failure.
    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string calldata error) external pure;

    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.
    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) external pure;

    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.
    /// Includes error message into revert string on failure.
    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string calldata error) external pure;

    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
    /// Formats values with decimals in failure message.
    function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals)
        external
        pure;

    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
    /// Formats values with decimals in failure message. Includes error message into revert string on failure.
    function assertApproxEqRelDecimal(
        uint256 left,
        uint256 right,
        uint256 maxPercentDelta,
        uint256 decimals,
        string calldata error
    ) external pure;

    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
    /// Formats values with decimals in failure message.
    function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals)
        external
        pure;

    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
    /// Formats values with decimals in failure message. Includes error message into revert string on failure.
    function assertApproxEqRelDecimal(
        int256 left,
        int256 right,
        uint256 maxPercentDelta,
        uint256 decimals,
        string calldata error
    ) external pure;

    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) external pure;

    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
    /// Includes error message into revert string on failure.
    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string calldata error)
        external
        pure;

    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) external pure;

    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
    /// Includes error message into revert string on failure.
    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string calldata error)
        external
        pure;

    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.
    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;

    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.
    /// Includes error message into revert string on failure.
    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;

    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.
    function assertEqDecimal(int256 left, int256 right, uint256 decimals) external pure;

    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.
    /// Includes error message into revert string on failure.
    function assertEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;

    /// Asserts that two `bool` values are equal.
    function assertEq(bool left, bool right) external pure;

    /// Asserts that two `bool` values are equal and includes error message into revert string on failure.
    function assertEq(bool left, bool right, string calldata error) external pure;

    /// Asserts that two `string` values are equal.
    function assertEq(string calldata left, string calldata right) external pure;

    /// Asserts that two `string` values are equal and includes error message into revert string on failure.
    function assertEq(string calldata left, string calldata right, string calldata error) external pure;

    /// Asserts that two `bytes` values are equal.
    function assertEq(bytes calldata left, bytes calldata right) external pure;

    /// Asserts that two `bytes` values are equal and includes error message into revert string on failure.
    function assertEq(bytes calldata left, bytes calldata right, string calldata error) external pure;

    /// Asserts that two arrays of `bool` values are equal.
    function assertEq(bool[] calldata left, bool[] calldata right) external pure;

    /// Asserts that two arrays of `bool` values are equal and includes error message into revert string on failure.
    function assertEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;

    /// Asserts that two arrays of `uint256 values are equal.
    function assertEq(uint256[] calldata left, uint256[] calldata right) external pure;

    /// Asserts that two arrays of `uint256` values are equal and includes error message into revert string on failure.
    function assertEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;

    /// Asserts that two arrays of `int256` values are equal.
    function assertEq(int256[] calldata left, int256[] calldata right) external pure;

    /// Asserts that two arrays of `int256` values are equal and includes error message into revert string on failure.
    function assertEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;

    /// Asserts that two `uint256` values are equal.
    function assertEq(uint256 left, uint256 right) external pure;

    /// Asserts that two arrays of `address` values are equal.
    function assertEq(address[] calldata left, address[] calldata right) external pure;

    /// Asserts that two arrays of `address` values are equal and includes error message into revert string on failure.
    function assertEq(address[] calldata left, address[] calldata right, string calldata error) external pure;

    /// Asserts that two arrays of `bytes32` values are equal.
    function assertEq(bytes32[] calldata left, bytes32[] calldata right) external pure;

    /// Asserts that two arrays of `bytes32` values are equal and includes error message into revert string on failure.
    function assertEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;

    /// Asserts that two arrays of `string` values are equal.
    function assertEq(string[] calldata left, string[] calldata right) external pure;

    /// Asserts that two arrays of `string` values are equal and includes error message into revert string on failure.
    function assertEq(string[] calldata left, string[] calldata right, string calldata error) external pure;

    /// Asserts that two arrays of `bytes` values are equal.
    function assertEq(bytes[] calldata left, bytes[] calldata right) external pure;

    /// Asserts that two arrays of `bytes` values are equal and includes error message into revert string on failure.
    function assertEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;

    /// Asserts that two `uint256` values are equal and includes error message into revert string on failure.
    function assertEq(uint256 left, uint256 right, string calldata error) external pure;

    /// Asserts that two `int256` values are equal.
    function assertEq(int256 left, int256 right) external pure;

    /// Asserts that two `int256` values are equal and includes error message into revert string on failure.
    function assertEq(int256 left, int256 right, string calldata error) external pure;

    /// Asserts that two `address` values are equal.
    function assertEq(address left, address right) external pure;

    /// Asserts that two `address` values are equal and includes error message into revert string on failure.
    function assertEq(address left, address right, string calldata error) external pure;

    /// Asserts that two `bytes32` values are equal.
    function assertEq(bytes32 left, bytes32 right) external pure;

    /// Asserts that two `bytes32` values are equal and includes error message into revert string on failure.
    function assertEq(bytes32 left, bytes32 right, string calldata error) external pure;

    /// Asserts that the given condition is false.
    function assertFalse(bool condition) external pure;

    /// Asserts that the given condition is false and includes error message into revert string on failure.
    function assertFalse(bool condition, string calldata error) external pure;

    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.
    /// Formats values with decimals in failure message.
    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;

    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.
    /// Formats values with decimals in failure message. Includes error message into revert string on failure.
    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;

    /// Compares two `int256` values. Expects first value to be greater than or equal to second.
    /// Formats values with decimals in failure message.
    function assertGeDecimal(int256 left, int256 right, uint256 decimals) external pure;

    /// Compares two `int256` values. Expects first value to be greater than or equal to second.
    /// Formats values with decimals in failure message. Includes error message into revert string on failure.
    function assertGeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;

    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.
    function assertGe(uint256 left, uint256 right) external pure;

    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.
    /// Includes error message into revert string on failure.
    function assertGe(uint256 left, uint256 right, string calldata error) external pure;

    /// Compares two `int256` values. Expects first value to be greater than or equal to second.
    function assertGe(int256 left, int256 right) external pure;

    /// Compares two `int256` values. Expects first value to be greater than or equal to second.
    /// Includes error message into revert string on failure.
    function assertGe(int256 left, int256 right, string calldata error) external pure;

    /// Compares two `uint256` values. Expects first value to be greater than second.
    /// Formats values with decimals in failure message.
    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;

    /// Compares two `uint256` values. Expects first value to be greater than second.
    /// Formats values with decimals in failure message. Includes error message into revert string on failure.
    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;

    /// Compares two `int256` values. Expects first value to be greater than second.
    /// Formats values with decimals in failure message.
    function assertGtDecimal(int256 left, int256 right, uint256 decimals) external pure;

    /// Compares two `int256` values. Expects first value to be greater than second.
    /// Formats values with decimals in failure message. Includes error message into revert string on failure.
    function assertGtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;

    /// Compares two `uint256` values. Expects first value to be greater than second.
    function assertGt(uint256 left, uint256 right) external pure;

    /// Compares two `uint256` values. Expects first value to be greater than second.
    /// Includes error message into revert string on failure.
    function assertGt(uint256 left, uint256 right, string calldata error) external pure;

    /// Compares two `int256` values. Expects first value to be greater than second.
    function assertGt(int256 left, int256 right) external pure;

    /// Compares two `int256` values. Expects first value to be greater than second.
    /// Includes error message into revert string on failure.
    function assertGt(int256 left, int256 right, string calldata error) external pure;

    /// Compares two `uint256` values. Expects first value to be less than or equal to second.
    /// Formats values with decimals in failure message.
    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;

    /// Compares two `uint256` values. Expects first value to be less than or equal to second.
    /// Formats values with decimals in failure message. Includes error message into revert string on failure.
    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;

    /// Compares two `int256` values. Expects first value to be less than or equal to second.
    /// Formats values with decimals in failure message.
    function assertLeDecimal(int256 left, int256 right, uint256 decimals) external pure;

    /// Compares two `int256` values. Expects first value to be less than or equal to second.
    /// Formats values with decimals in failure message. Includes error message into revert string on failure.
    function assertLeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;

    /// Compares two `uint256` values. Expects first value to be less than or equal to second.
    function assertLe(uint256 left, uint256 right) external pure;

    /// Compares two `uint256` values. Expects first value to be less than or equal to second.
    /// Includes error message into revert string on failure.
    function assertLe(uint256 left, uint256 right, string calldata error) external pure;

    /// Compares two `int256` values. Expects first value to be less than or equal to second.
    function assertLe(int256 left, int256 right) external pure;

    /// Compares two `int256` values. Expects first value to be less than or equal to second.
    /// Includes error message into revert string on failure.
    function assertLe(int256 left, int256 right, string calldata error) external pure;

    /// Compares two `uint256` values. Expects first value to be less than second.
    /// Formats values with decimals in failure message.
    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;

    /// Compares two `uint256` values. Expects first value to be less than second.
    /// Formats values with decimals in failure message. Includes error message into revert string on failure.
    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;

    /// Compares two `int256` values. Expects first value to be less than second.
    /// Formats values with decimals in failure message.
    function assertLtDecimal(int256 left, int256 right, uint256 decimals) external pure;

    /// Compares two `int256` values. Expects first value to be less than second.
    /// Formats values with decimals in failure message. Includes error message into revert string on failure.
    function assertLtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;

    /// Compares two `uint256` values. Expects first value to be less than second.
    function assertLt(uint256 left, uint256 right) external pure;

    /// Compares two `uint256` values. Expects first value to be less than second.
    /// Includes error message into revert string on failure.
    function assertLt(uint256 left, uint256 right, string calldata error) external pure;

    /// Compares two `int256` values. Expects first value to be less than second.
    function assertLt(int256 left, int256 right) external pure;

    /// Compares two `int256` values. Expects first value to be less than second.
    /// Includes error message into revert string on failure.
    function assertLt(int256 left, int256 right, string calldata error) external pure;

    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.
    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;

    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.
    /// Includes error message into revert string on failure.
    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;

    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.
    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) external pure;

    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.
    /// Includes error message into revert string on failure.
    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;

    /// Asserts that two `bool` values are not equal.
    function assertNotEq(bool left, bool right) external pure;

    /// Asserts that two `bool` values are not equal and includes error message into revert string on failure.
    function assertNotEq(bool left, bool right, string calldata error) external pure;

    /// Asserts that two `string` values are not equal.
    function assertNotEq(string calldata left, string calldata right) external pure;

    /// Asserts that two `string` values are not equal and includes error message into revert string on failure.
    function assertNotEq(string calldata left, string calldata right, string calldata error) external pure;

    /// Asserts that two `bytes` values are not equal.
    function assertNotEq(bytes calldata left, bytes calldata right) external pure;

    /// Asserts that two `bytes` values are not equal and includes error message into revert string on failure.
    function assertNotEq(bytes calldata left, bytes calldata right, string calldata error) external pure;

    /// Asserts that two arrays of `bool` values are not equal.
    function assertNotEq(bool[] calldata left, bool[] calldata right) external pure;

    /// Asserts that two arrays of `bool` values are not equal and includes error message into revert string on failure.
    function assertNotEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;

    /// Asserts that two arrays of `uint256` values are not equal.
    function assertNotEq(uint256[] calldata left, uint256[] calldata right) external pure;

    /// Asserts that two arrays of `uint256` values are not equal and includes error message into revert string on failure.
    function assertNotEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;

    /// Asserts that two arrays of `int256` values are not equal.
    function assertNotEq(int256[] calldata left, int256[] calldata right) external pure;

    /// Asserts that two arrays of `int256` values are not equal and includes error message into revert string on failure.
    function assertNotEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;

    /// Asserts that two `uint256` values are not equal.
    function assertNotEq(uint256 left, uint256 right) external pure;

    /// Asserts that two arrays of `address` values are not equal.
    function assertNotEq(address[] calldata left, address[] calldata right) external pure;

    /// Asserts that two arrays of `address` values are not equal and includes error message into revert string on failure.
    function assertNotEq(address[] calldata left, address[] calldata right, string calldata error) external pure;

    /// Asserts that two arrays of `bytes32` values are not equal.
    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right) external pure;

    /// Asserts that two arrays of `bytes32` values are not equal and includes error message into revert string on failure.
    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;

    /// Asserts that two arrays of `string` values are not equal.
    function assertNotEq(string[] calldata left, string[] calldata right) external pure;

    /// Asserts that two arrays of `string` values are not equal and includes error message into revert string on failure.
    function assertNotEq(string[] calldata left, string[] calldata right, string calldata error) external pure;

    /// Asserts that two arrays of `bytes` values are not equal.
    function assertNotEq(bytes[] calldata left, bytes[] calldata right) external pure;

    /// Asserts that two arrays of `bytes` values are not equal and includes error message into revert string on failure.
    function assertNotEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;

    /// Asserts that two `uint256` values are not equal and includes error message into revert string on failure.
    function assertNotEq(uint256 left, uint256 right, string calldata error) external pure;

    /// Asserts that two `int256` values are not equal.
    function assertNotEq(int256 left, int256 right) external pure;

    /// Asserts that two `int256` values are not equal and includes error message into revert string on failure.
    function assertNotEq(int256 left, int256 right, string calldata error) external pure;

    /// Asserts that two `address` values are not equal.
    function assertNotEq(address left, address right) external pure;

    /// Asserts that two `address` values are not equal and includes error message into revert string on failure.
    function assertNotEq(address left, address right, string calldata error) external pure;

    /// Asserts that two `bytes32` values are not equal.
    function assertNotEq(bytes32 left, bytes32 right) external pure;

    /// Asserts that two `bytes32` values are not equal and includes error message into revert string on failure.
    function assertNotEq(bytes32 left, bytes32 right, string calldata error) external pure;

    /// Asserts that the given condition is true.
    function assertTrue(bool condition) external pure;

    /// Asserts that the given condition is true and includes error message into revert string on failure.
    function assertTrue(bool condition, string calldata error) external pure;

    /// If the condition is false, discard this run's fuzz inputs and generate new ones.
    function assume(bool condition) external pure;

    /// Discard this run's fuzz inputs and generate new ones if next call reverted.
    function assumeNoRevert() external pure;

    /// Discard this run's fuzz inputs and generate new ones if next call reverts with the potential revert parameters.
    function assumeNoRevert(PotentialRevert calldata potentialRevert) external pure;

    /// Discard this run's fuzz inputs and generate new ones if next call reverts with the any of the potential revert parameters.
    function assumeNoRevert(PotentialRevert[] calldata potentialReverts) external pure;

    /// Writes a breakpoint to jump to in the debugger.
    function breakpoint(string calldata char) external pure;

    /// Writes a conditional breakpoint to jump to in the debugger.
    function breakpoint(string calldata char, bool value) external pure;

    /// Returns the Foundry version.
    /// Format: <cargo_version>-<tag>+<git_sha_short>.<unix_build_timestamp>.<profile>
    /// Sample output: 0.3.0-nightly+3cb96bde9b.1737036656.debug
    /// Note: Build timestamps may vary slightly across platforms due to separate CI jobs.
    /// For reliable version comparisons, use UNIX format (e.g., >= 1700000000)
    /// to compare timestamps while ignoring minor time differences.
    function getFoundryVersion() external view returns (string memory version);

    /// Returns the RPC url for the given alias.
    function rpcUrl(string calldata rpcAlias) external view returns (string memory json);

    /// Returns all rpc urls and their aliases as structs.
    function rpcUrlStructs() external view returns (Rpc[] memory urls);

    /// Returns all rpc urls and their aliases `[alias, url][]`.
    function rpcUrls() external view returns (string[2][] memory urls);

    /// Suspends execution of the main thread for `duration` milliseconds.
    function sleep(uint256 duration) external;

    // ======== Toml ========

    /// Checks if `key` exists in a TOML table.
    function keyExistsToml(string calldata toml, string calldata key) external view returns (bool);

    /// Parses a string of TOML data at `key` and coerces it to `address`.
    function parseTomlAddress(string calldata toml, string calldata key) external pure returns (address);

    /// Parses a string of TOML data at `key` and coerces it to `address[]`.
    function parseTomlAddressArray(string calldata toml, string calldata key)
        external
        pure
        returns (address[] memory);

    /// Parses a string of TOML data at `key` and coerces it to `bool`.
    function parseTomlBool(string calldata toml, string calldata key) external pure returns (bool);

    /// Parses a string of TOML data at `key` and coerces it to `bool[]`.
    function parseTomlBoolArray(string calldata toml, string calldata key) external pure returns (bool[] memory);

    /// Parses a string of TOML data at `key` and coerces it to `bytes`.
    function parseTomlBytes(string calldata toml, string calldata key) external pure returns (bytes memory);

    /// Parses a string of TOML data at `key` and coerces it to `bytes32`.
    function parseTomlBytes32(string calldata toml, string calldata key) external pure returns (bytes32);

    /// Parses a string of TOML data at `key` and coerces it to `bytes32[]`.
    function parseTomlBytes32Array(string calldata toml, string calldata key)
        external
        pure
        returns (bytes32[] memory);

    /// Parses a string of TOML data at `key` and coerces it to `bytes[]`.
    function parseTomlBytesArray(string calldata toml, string calldata key) external pure returns (bytes[] memory);

    /// Parses a string of TOML data at `key` and coerces it to `int256`.
    function parseTomlInt(string calldata toml, string calldata key) external pure returns (int256);

    /// Parses a string of TOML data at `key` and coerces it to `int256[]`.
    function parseTomlIntArray(string calldata toml, string calldata key) external pure returns (int256[] memory);

    /// Returns an array of all the keys in a TOML table.
    function parseTomlKeys(string calldata toml, string calldata key) external pure returns (string[] memory keys);

    /// Parses a string of TOML data at `key` and coerces it to `string`.
    function parseTomlString(string calldata toml, string calldata key) external pure returns (string memory);

    /// Parses a string of TOML data at `key` and coerces it to `string[]`.
    function parseTomlStringArray(string calldata toml, string calldata key) external pure returns (string[] memory);

    /// Parses a string of TOML data at `key` and coerces it to type array corresponding to `typeDescription`.
    function parseTomlTypeArray(string calldata toml, string calldata key, string calldata typeDescription)
        external
        pure
        returns (bytes memory);

    /// Parses a string of TOML data and coerces it to type corresponding to `typeDescription`.
    function parseTomlType(string calldata toml, string calldata typeDescription)
        external
        pure
        returns (bytes memory);

    /// Parses a string of TOML data at `key` and coerces it to type corresponding to `typeDescription`.
    function parseTomlType(string calldata toml, string calldata key, string calldata typeDescription)
        external
        pure
        returns (bytes memory);

    /// Parses a string of TOML data at `key` and coerces it to `uint256`.
    function parseTomlUint(string calldata toml, string calldata key) external pure returns (uint256);

    /// Parses a string of TOML data at `key` and coerces it to `uint256[]`.
    function parseTomlUintArray(string calldata toml, string calldata key) external pure returns (uint256[] memory);

    /// ABI-encodes a TOML table.
    function parseToml(string calldata toml) external pure returns (bytes memory abiEncodedData);

    /// ABI-encodes a TOML table at `key`.
    function parseToml(string calldata toml, string calldata key) external pure returns (bytes memory abiEncodedData);

    /// Takes serialized JSON, converts to TOML and write a serialized TOML to a file.
    function writeToml(string calldata json, string calldata path) external;

    /// Takes serialized JSON, converts to TOML and write a serialized TOML table to an **existing** TOML file, replacing a value with key = <value_key.>
    /// This is useful to replace a specific value of a TOML file, without having to parse the entire thing.
    function writeToml(string calldata json, string calldata path, string calldata valueKey) external;

    // ======== Utilities ========

    /// Compute the address of a contract created with CREATE2 using the given CREATE2 deployer.
    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer)
        external
        pure
        returns (address);

    /// Compute the address of a contract created with CREATE2 using the default CREATE2 deployer.
    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) external pure returns (address);

    /// Compute the address a contract will be deployed at for a given deployer address and nonce.
    function computeCreateAddress(address deployer, uint256 nonce) external pure returns (address);

    /// Utility cheatcode to copy storage of `from` contract to another `to` contract.
    function copyStorage(address from, address to) external;

    /// Returns ENS namehash for provided string.
    function ensNamehash(string calldata name) external pure returns (bytes32);

    /// Gets the label for the specified address.
    function getLabel(address account) external view returns (string memory currentLabel);

    /// Labels an address in call traces.
    function label(address account, string calldata newLabel) external;

    /// Pauses collection of call traces. Useful in cases when you want to skip tracing of
    /// complex calls which are not useful for debugging.
    function pauseTracing() external view;

    /// Returns a random `address`.
    function randomAddress() external returns (address);

    /// Returns a random `bool`.
    function randomBool() external view returns (bool);

    /// Returns a random byte array value of the given length.
    function randomBytes(uint256 len) external view returns (bytes memory);

    /// Returns a random fixed-size byte array of length 4.
    function randomBytes4() external view returns (bytes4);

    /// Returns a random fixed-size byte array of length 8.
    function randomBytes8() external view returns (bytes8);

    /// Returns a random `int256` value.
    function randomInt() external view returns (int256);

    /// Returns a random `int256` value of given bits.
    function randomInt(uint256 bits) external view returns (int256);

    /// Returns a random uint256 value.
    function randomUint() external returns (uint256);

    /// Returns random uint256 value between the provided range (=min..=max).
    function randomUint(uint256 min, uint256 max) external returns (uint256);

    /// Returns a random `uint256` value of given bits.
    function randomUint(uint256 bits) external view returns (uint256);

    /// Unpauses collection of call traces.
    function resumeTracing() external view;

    /// Utility cheatcode to set arbitrary storage for given target address.
    function setArbitraryStorage(address target) external;

    /// Encodes a `bytes` value to a base64url string.
    function toBase64URL(bytes calldata data) external pure returns (string memory);

    /// Encodes a `string` value to a base64url string.
    function toBase64URL(string calldata data) external pure returns (string memory);

    /// Encodes a `bytes` value to a base64 string.
    function toBase64(bytes calldata data) external pure returns (string memory);

    /// Encodes a `string` value to a base64 string.
    function toBase64(string calldata data) external pure returns (string memory);
}

/// The `Vm` interface does allow manipulation of the EVM state. These are all intended to be used
/// in tests, but it is not recommended to use these cheats in scripts.
interface Vm is VmSafe {
    // ======== EVM ========

    /// Returns the identifier of the currently active fork. Reverts if no fork is currently active.
    function activeFork() external view returns (uint256 forkId);

    /// In forking mode, explicitly grant the given address cheatcode access.
    function allowCheatcodes(address account) external;

    /// Sets `block.blobbasefee`
    function blobBaseFee(uint256 newBlobBaseFee) external;

    /// Sets the blobhashes in the transaction.
    /// Not available on EVM versions before Cancun.
    /// If used on unsupported EVM versions it will revert.
    function blobhashes(bytes32[] calldata hashes) external;

    /// Sets `block.chainid`.
    function chainId(uint256 newChainId) external;

    /// Clears all mocked calls.
    function clearMockedCalls() external;

    /// Clones a source account code, state, balance and nonce to a target account and updates in-memory EVM state.
    function cloneAccount(address source, address target) external;

    /// Sets `block.coinbase`.
    function coinbase(address newCoinbase) external;

    /// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork.
    function createFork(string calldata urlOrAlias) external returns (uint256 forkId);

    /// Creates a new fork with the given endpoint and block and returns the identifier of the fork.
    function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);

    /// Creates a new fork with the given endpoint and at the block the given transaction was mined in,
    /// replays all transaction mined in the block before the transaction, and returns the identifier of the fork.
    function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);

    /// Creates and also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork.
    function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);

    /// Creates and also selects a new fork with the given endpoint and block and returns the identifier of the fork.
    function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);

    /// Creates and also selects new fork with the given endpoint and at the block the given transaction was mined in,
    /// replays all transaction mined in the block before the transaction, returns the identifier of the fork.
    function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);

    /// Sets an address' balance.
    function deal(address account, uint256 newBalance) external;

    /// Removes the snapshot with the given ID created by `snapshot`.
    /// Takes the snapshot ID to delete.
    /// Returns `true` if the snapshot was successfully deleted.
    /// Returns `false` if the snapshot does not exist.
    function deleteStateSnapshot(uint256 snapshotId) external returns (bool success);

    /// Removes _all_ snapshots previously created by `snapshot`.
    function deleteStateSnapshots() external;

    /// Sets `block.difficulty`.
    /// Not available on EVM versions from Paris onwards. Use `prevrandao` instead.
    /// Reverts if used on unsupported EVM versions.
    function difficulty(uint256 newDifficulty) external;

    /// Dump a genesis JSON file's `allocs` to disk.
    function dumpState(string calldata pathToStateJson) external;

    /// Sets an address' code.
    function etch(address target, bytes calldata newRuntimeBytecode) external;

    /// Sets `block.basefee`.
    function fee(uint256 newBasefee) external;

    /// Gets the blockhashes from the current transaction.
    /// Not available on EVM versions before Cancun.
    /// If used on unsupported EVM versions it will revert.
    function getBlobhashes() external view returns (bytes32[] memory hashes);

    /// Returns true if the account is marked as persistent.
    function isPersistent(address account) external view returns (bool persistent);

    /// Load a genesis JSON file's `allocs` into the in-memory EVM state.
    function loadAllocs(string calldata pathToAllocsJson) external;

    /// Marks that the account(s) should use persistent storage across fork swaps in a multifork setup
    /// Meaning, changes made to the state of this account will be kept when switching forks.
    function makePersistent(address account) external;

    /// See `makePersistent(address)`.
    function makePersistent(address account0, address account1) external;

    /// See `makePersistent(address)`.
    function makePersistent(address account0, address account1, address account2) external;

    /// See `makePersistent(address)`.
    function makePersistent(address[] calldata accounts) external;

    /// Reverts a call to an address with specified revert data.
    function mockCallRevert(address callee, bytes calldata data, bytes calldata revertData) external;

    /// Reverts a call to an address with a specific `msg.value`, with specified revert data.
    function mockCallRevert(address callee, uint256 msgValue, bytes calldata data, bytes calldata revertData)
        external;

    /// Reverts a call to an address with specified revert data.
    /// Overload to pass the function selector directly `token.approve.selector` instead of `abi.encodeWithSelector(token.approve.selector)`.
    function mockCallRevert(address callee, bytes4 data, bytes calldata revertData) external;

    /// Reverts a call to an address with a specific `msg.value`, with specified revert data.
    /// Overload to pass the function selector directly `token.approve.selector` instead of `abi.encodeWithSelector(token.approve.selector)`.
    function mockCallRevert(address callee, uint256 msgValue, bytes4 data, bytes calldata revertData) external;

    /// Mocks a call to an address, returning specified data.
    /// Calldata can either be strict or a partial match, e.g. if you only
    /// pass a Solidity selector to the expected calldata, then the entire Solidity
    /// function will be mocked.
    function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;

    /// Mocks a call to an address with a specific `msg.value`, returning specified data.
    /// Calldata match takes precedence over `msg.value` in case of ambiguity.
    function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;

    /// Mocks a call to an address, returning specified data.
    /// Calldata can either be strict or a partial match, e.g. if you only
    /// pass a Solidity selector to the expected calldata, then the entire Solidity
    /// function will be mocked.
    /// Overload to pass the function selector directly `token.approve.selector` instead of `abi.encodeWithSelector(token.approve.selector)`.
    function mockCall(address callee, bytes4 data, bytes calldata returnData) external;

    /// Mocks a call to an address with a specific `msg.value`, returning specified data.
    /// Calldata match takes precedence over `msg.value` in case of ambiguity.
    /// Overload to pass the function selector directly `token.approve.selector` instead of `abi.encodeWithSelector(token.approve.selector)`.
    function mockCall(address callee, uint256 msgValue, bytes4 data, bytes calldata returnData) external;

    /// Mocks multiple calls to an address, returning specified data for each call.
    function mockCalls(address callee, bytes calldata data, bytes[] calldata returnData) external;

    /// Mocks multiple calls to an address with a specific `msg.value`, returning specified data for each call.
    function mockCalls(address callee, uint256 msgValue, bytes calldata data, bytes[] calldata returnData) external;

    /// Whenever a call is made to `callee` with calldata `data`, this cheatcode instead calls
    /// `target` with the same calldata. This functionality is similar to a delegate call made to
    /// `target` contract from `callee`.
    /// Can be used to substitute a call to a function with another implementation that captures
    /// the primary logic of the original function but is easier to reason about.
    /// If calldata is not a strict match then partial match by selector is attempted.
    function mockFunction(address callee, address target, bytes calldata data) external;

    /// Sets the *next* call's `msg.sender` to be the input address.
    function prank(address msgSender) external;

    /// Sets the *next* call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.
    function prank(address msgSender, address txOrigin) external;

    /// Sets the *next* delegate call's `msg.sender` to be the input address.
    function prank(address msgSender, bool delegateCall) external;

    /// Sets the *next* delegate call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.
    function prank(address msgSender, address txOrigin, bool delegateCall) external;

    /// Sets `block.prevrandao`.
    /// Not available on EVM versions before Paris. Use `difficulty` instead.
    /// If used on unsupported EVM versions it will revert.
    function prevrandao(bytes32 newPrevrandao) external;

    /// Sets `block.prevrandao`.
    /// Not available on EVM versions before Paris. Use `difficulty` instead.
    /// If used on unsupported EVM versions it will revert.
    function prevrandao(uint256 newPrevrandao) external;

    /// Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification.
    function readCallers() external returns (CallerMode callerMode, address msgSender, address txOrigin);

    /// Resets the nonce of an account to 0 for EOAs and 1 for contract accounts.
    function resetNonce(address account) external;

    /// Revert the state of the EVM to a previous snapshot
    /// Takes the snapshot ID to revert to.
    /// Returns `true` if the snapshot was successfully reverted.
    /// Returns `false` if the snapshot does not exist.
    /// **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteStateSnapshot`.
    function revertToState(uint256 snapshotId) external returns (bool success);

    /// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots
    /// Takes the snapshot ID to revert to.
    /// Returns `true` if the snapshot was successfully reverted and deleted.
    /// Returns `false` if the snapshot does not exist.
    function revertToStateAndDelete(uint256 snapshotId) external returns (bool success);

    /// Revokes persistent status from the address, previously added via `makePersistent`.
    function revokePersistent(address account) external;

    /// See `revokePersistent(address)`.
    function revokePersistent(address[] calldata accounts) external;

    /// Sets `block.height`.
    function roll(uint256 newHeight) external;

    /// Updates the currently active fork to given block number
    /// This is similar to `roll` but for the currently active fork.
    function rollFork(uint256 blockNumber) external;

    /// Updates the currently active fork to given transaction. This will `rollFork` with the number
    /// of the block the transaction was mined in and replays all transaction mined before it in the block.
    function rollFork(bytes32 txHash) external;

    /// Updates the given fork to given block number.
    function rollFork(uint256 forkId, uint256 blockNumber) external;

    /// Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block.
    function rollFork(uint256 forkId, bytes32 txHash) external;

    /// Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.
    function selectFork(uint256 forkId) external;

    /// Set blockhash for the current block.
    /// It only sets the blockhash for blocks where `block.number - 256 <= number < block.number`.
    function setBlockhash(uint256 blockNumber, bytes32 blockHash) external;

    /// Sets the nonce of an account. Must be higher than the current nonce of the account.
    function setNonce(address account, uint64 newNonce) external;

    /// Sets the nonce of an account to an arbitrary value.
    function setNonceUnsafe(address account, uint64 newNonce) external;

    /// Snapshot capture the gas usage of the last call by name from the callee perspective.
    function snapshotGasLastCall(string calldata name) external returns (uint256 gasUsed);

    /// Snapshot capture the gas usage of the last call by name in a group from the callee perspective.
    function snapshotGasLastCall(string calldata group, string calldata name) external returns (uint256 gasUsed);

    /// Snapshot the current state of the evm.
    /// Returns the ID of the snapshot that was created.
    /// To revert a snapshot use `revertToState`.
    function snapshotState() external returns (uint256 snapshotId);

    /// Snapshot capture an arbitrary numerical value by name.
    /// The group name is derived from the contract name.
    function snapshotValue(string calldata name, uint256 value) external;

    /// Snapshot capture an arbitrary numerical value by name in a group.
    function snapshotValue(string calldata group, string calldata name, uint256 value) external;

    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called.
    function startPrank(address msgSender) external;

    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.
    function startPrank(address msgSender, address txOrigin) external;

    /// Sets all subsequent delegate calls' `msg.sender` to be the input address until `stopPrank` is called.
    function startPrank(address msgSender, bool delegateCall) external;

    /// Sets all subsequent delegate calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.
    function startPrank(address msgSender, address txOrigin, bool delegateCall) external;

    /// Start a snapshot capture of the current gas usage by name.
    /// The group name is derived from the contract name.
    function startSnapshotGas(string calldata name) external;

    /// Start a snapshot capture of the current gas usage by name in a group.
    function startSnapshotGas(string calldata group, string calldata name) external;

    /// Resets subsequent calls' `msg.sender` to be `address(this)`.
    function stopPrank() external;

    /// Stop the snapshot capture of the current gas by latest snapshot name, capturing the gas used since the start.
    function stopSnapshotGas() external returns (uint256 gasUsed);

    /// Stop the snapshot capture of the current gas usage by name, capturing the gas used since the start.
    /// The group name is derived from the contract name.
    function stopSnapshotGas(string calldata name) external returns (uint256 gasUsed);

    /// Stop the snapshot capture of the current gas usage by name in a group, capturing the gas used since the start.
    function stopSnapshotGas(string calldata group, string calldata name) external returns (uint256 gasUsed);

    /// Stores a value to an address' storage slot.
    function store(address target, bytes32 slot, bytes32 value) external;

    /// Fetches the given transaction from the active fork and executes it on the current state.
    function transact(bytes32 txHash) external;

    /// Fetches the given transaction from the given fork and executes it on the current state.
    function transact(uint256 forkId, bytes32 txHash) external;

    /// Sets `tx.gasprice`.
    function txGasPrice(uint256 newGasPrice) external;

    /// Sets `block.timestamp`.
    function warp(uint256 newTimestamp) external;

    /// `deleteSnapshot` is being deprecated in favor of `deleteStateSnapshot`. It will be removed in future versions.
    function deleteSnapshot(uint256 snapshotId) external returns (bool success);

    /// `deleteSnapshots` is being deprecated in favor of `deleteStateSnapshots`. It will be removed in future versions.
    function deleteSnapshots() external;

    /// `revertToAndDelete` is being deprecated in favor of `revertToStateAndDelete`. It will be removed in future versions.
    function revertToAndDelete(uint256 snapshotId) external returns (bool success);

    /// `revertTo` is being deprecated in favor of `revertToState`. It will be removed in future versions.
    function revertTo(uint256 snapshotId) external returns (bool success);

    /// `snapshot` is being deprecated in favor of `snapshotState`. It will be removed in future versions.
    function snapshot() external returns (uint256 snapshotId);

    // ======== Testing ========

    /// Expect a call to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.
    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;

    /// Expect given number of calls to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.
    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data, uint64 count)
        external;

    /// Expects a call to an address with the specified calldata.
    /// Calldata can either be a strict or a partial match.
    function expectCall(address callee, bytes calldata data) external;

    /// Expects given number of calls to an address with the specified calldata.
    function expectCall(address callee, bytes calldata data, uint64 count) external;

    /// Expects a call to an address with the specified `msg.value` and calldata.
    function expectCall(address callee, uint256 msgValue, bytes calldata data) external;

    /// Expects given number of calls to an address with the specified `msg.value` and calldata.
    function expectCall(address callee, uint256 msgValue, bytes calldata data, uint64 count) external;

    /// Expect a call to an address with the specified `msg.value`, gas, and calldata.
    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;

    /// Expects given number of calls to an address with the specified `msg.value`, gas, and calldata.
    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data, uint64 count) external;

    /// Prepare an expected anonymous log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).
    /// Call this function, then emit an anonymous event, then call a function. Internally after the call, we check if
    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).
    function expectEmitAnonymous(bool checkTopic0, bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData)
        external;

    /// Same as the previous method, but also checks supplied address against emitting contract.
    function expectEmitAnonymous(
        bool checkTopic0,
        bool checkTopic1,
        bool checkTopic2,
        bool checkTopic3,
        bool checkData,
        address emitter
    ) external;

    /// Prepare an expected anonymous log with all topic and data checks enabled.
    /// Call this function, then emit an anonymous event, then call a function. Internally after the call, we check if
    /// logs were emitted in the expected order with the expected topics and data.
    function expectEmitAnonymous() external;

    /// Same as the previous method, but also checks supplied address against emitting contract.
    function expectEmitAnonymous(address emitter) external;

    /// Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).
    /// Call this function, then emit an event, then call a function. Internally after the call, we check if
    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).
    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;

    /// Same as the previous method, but also checks supplied address against emitting contract.
    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter)
        external;

    /// Prepare an expected log with all topic and data checks enabled.
    /// Call this function, then emit an event, then call a function. Internally after the call, we check if
    /// logs were emitted in the expected order with the expected topics and data.
    function expectEmit() external;

    /// Same as the previous method, but also checks supplied address against emitting contract.
    function expectEmit(address emitter) external;

    /// Expect a given number of logs with the provided topics.
    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, uint64 count) external;

    /// Expect a given number of logs from a specific emitter with the provided topics.
    function expectEmit(
        bool checkTopic1,
        bool checkTopic2,
        bool checkTopic3,
        bool checkData,
        address emitter,
        uint64 count
    ) external;

    /// Expect a given number of logs with all topic and data checks enabled.
    function expectEmit(uint64 count) external;

    /// Expect a given number of logs from a specific emitter with all topic and data checks enabled.
    function expectEmit(address emitter, uint64 count) external;

    /// Expects an error on next call that starts with the revert data.
    function expectPartialRevert(bytes4 revertData) external;

    /// Expects an error on next call to reverter address, that starts with the revert data.
    function expectPartialRevert(bytes4 revertData, address reverter) external;

    /// Expects an error on next call with any revert data.
    function expectRevert() external;

    /// Expects an error on next call that exactly matches the revert data.
    function expectRevert(bytes4 revertData) external;

    /// Expects a `count` number of reverts from the upcoming calls from the reverter address that match the revert data.
    function expectRevert(bytes4 revertData, address reverter, uint64 count) external;

    /// Expects a `count` number of reverts from the upcoming calls from the reverter address that exactly match the revert data.
    function expectRevert(bytes calldata revertData, address reverter, uint64 count) external;

    /// Expects an error on next call that exactly matches the revert data.
    function expectRevert(bytes calldata revertData) external;

    /// Expects an error with any revert data on next call to reverter address.
    function expectRevert(address reverter) external;

    /// Expects an error from reverter address on next call, with any revert data.
    function expectRevert(bytes4 revertData, address reverter) external;

    /// Expects an error from reverter address on next call, that exactly matches the revert data.
    function expectRevert(bytes calldata revertData, address reverter) external;

    /// Expects a `count` number of reverts from the upcoming calls with any revert data or reverter.
    function expectRevert(uint64 count) external;

    /// Expects a `count` number of reverts from the upcoming calls that match the revert data.
    function expectRevert(bytes4 revertData, uint64 count) external;

    /// Expects a `count` number of reverts from the upcoming calls that exactly match the revert data.
    function expectRevert(bytes calldata revertData, uint64 count) external;

    /// Expects a `count` number of reverts from the upcoming calls from the reverter address.
    function expectRevert(address reverter, uint64 count) external;

    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the current subcontext. If any other
    /// memory is written to, the test will fail. Can be called multiple times to add more ranges to the set.
    function expectSafeMemory(uint64 min, uint64 max) external;

    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the next created subcontext.
    /// If any other memory is written to, the test will fail. Can be called multiple times to add more ranges
    /// to the set.
    function expectSafeMemoryCall(uint64 min, uint64 max) external;

    /// Marks a test as skipped. Must be called at the top level of a test.
    function skip(bool skipTest) external;

    /// Marks a test as skipped with a reason. Must be called at the top level of a test.
    function skip(bool skipTest, string calldata reason) external;

    /// Stops all safe memory expectation in the current subcontext.
    function stopExpectSafeMemory() external;
}

================
File: lib/forge-std/test/compilation/CompilationScript.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

pragma experimental ABIEncoderV2;

import "../../src/Script.sol";

// The purpose of this contract is to benchmark compilation time to avoid accidentally introducing
// a change that results in very long compilation times with via-ir. See https://github.com/foundry-rs/forge-std/issues/207
contract CompilationScript is Script {}

================
File: lib/forge-std/test/compilation/CompilationScriptBase.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

pragma experimental ABIEncoderV2;

import "../../src/Script.sol";

// The purpose of this contract is to benchmark compilation time to avoid accidentally introducing
// a change that results in very long compilation times with via-ir. See https://github.com/foundry-rs/forge-std/issues/207
contract CompilationScriptBase is ScriptBase {}

================
File: lib/forge-std/test/compilation/CompilationTest.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

pragma experimental ABIEncoderV2;

import "../../src/Test.sol";

// The purpose of this contract is to benchmark compilation time to avoid accidentally introducing
// a change that results in very long compilation times with via-ir. See https://github.com/foundry-rs/forge-std/issues/207
contract CompilationTest is Test {}

================
File: lib/forge-std/test/compilation/CompilationTestBase.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

pragma experimental ABIEncoderV2;

import "../../src/Test.sol";

// The purpose of this contract is to benchmark compilation time to avoid accidentally introducing
// a change that results in very long compilation times with via-ir. See https://github.com/foundry-rs/forge-std/issues/207
contract CompilationTestBase is TestBase {}

================
File: lib/forge-std/test/fixtures/broadcast.log.json
================
{
  "transactions": [
    {
      "hash": "0xc6006863c267735a11476b7f15b15bc718e117e2da114a2be815dd651e1a509f",
      "type": "CALL",
      "contractName": "Test",
      "contractAddress": "0xe7f1725e7734ce288f8367e1bb143e90bb3f0512",
      "function": "multiple_arguments(uint256,address,uint256[]):(uint256)",
      "arguments": ["1", "0000000000000000000000000000000000001337", "[3,4]"],
      "tx": {
        "type": "0x02",
        "from": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
        "to": "0xe7f1725e7734ce288f8367e1bb143e90bb3f0512",
        "gas": "0x73b9",
        "value": "0x0",
        "data": "0x23e99187000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000013370000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004",
        "nonce": "0x3",
        "accessList": []
      }
    },
    {
      "hash": "0xedf2b38d8d896519a947a1acf720f859bb35c0c5ecb8dd7511995b67b9853298",
      "type": "CALL",
      "contractName": "Test",
      "contractAddress": "0xe7f1725e7734ce288f8367e1bb143e90bb3f0512",
      "function": "inc():(uint256)",
      "arguments": [],
      "tx": {
        "type": "0x02",
        "from": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
        "to": "0xe7f1725e7734ce288f8367e1bb143e90bb3f0512",
        "gas": "0xdcb2",
        "value": "0x0",
        "data": "0x371303c0",
        "nonce": "0x4",
        "accessList": []
      }
    },
    {
      "hash": "0xa57e8e3981a6c861442e46c9471bd19cb3e21f9a8a6c63a72e7b5c47c6675a7c",
      "type": "CALL",
      "contractName": "Test",
      "contractAddress": "0x7c6b4bbe207d642d98d5c537142d85209e585087",
      "function": "t(uint256):(uint256)",
      "arguments": ["1"],
      "tx": {
        "type": "0x02",
        "from": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
        "to": "0x7c6b4bbe207d642d98d5c537142d85209e585087",
        "gas": "0x8599",
        "value": "0x0",
        "data": "0xafe29f710000000000000000000000000000000000000000000000000000000000000001",
        "nonce": "0x5",
        "accessList": []
      }
    }
  ],
  "receipts": [
    {
      "transactionHash": "0x481dc86e40bba90403c76f8e144aa9ff04c1da2164299d0298573835f0991181",
      "transactionIndex": "0x0",
      "blockHash": "0xef0730448490304e5403be0fa8f8ce64f118e9adcca60c07a2ae1ab921d748af",
      "blockNumber": "0x1",
      "from": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
      "to": null,
      "cumulativeGasUsed": "0x13f3a",
      "gasUsed": "0x13f3a",
      "contractAddress": "0x5fbdb2315678afecb367f032d93f642f64180aa3",
      "logs": [],
      "status": "0x1",
      "logsBloom": "0x
      "effectiveGasPrice": "0xee6b2800"
    },
    {
      "transactionHash": "0x6a187183545b8a9e7f1790e847139379bf5622baff2cb43acf3f5c79470af782",
      "transactionIndex": "0x0",
      "blockHash": "0xf3acb96a90071640c2a8c067ae4e16aad87e634ea8d8bbbb5b352fba86ba0148",
      "blockNumber": "0x2",
      "from": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
      "to": null,
      "cumulativeGasUsed": "0x45d80",
      "gasUsed": "0x45d80",
      "contractAddress": "0xe7f1725e7734ce288f8367e1bb143e90bb3f0512",
      "logs": [],
      "status": "0x1",
      "logsBloom": "0x
      "effectiveGasPrice": "0xee6b2800"
    },
    {
      "transactionHash": "0x064ad173b4867bdef2fb60060bbdaf01735fbf10414541ea857772974e74ea9d",
      "transactionIndex": "0x0",
      "blockHash": "0x8373d02109d3ee06a0225f23da4c161c656ccc48fe0fcee931d325508ae73e58",
      "blockNumber": "0x3",
      "from": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
      "to": "0x4e59b44847b379578588920ca78fbf26c0b4956c",
      "cumulativeGasUsed": "0x45feb",
      "gasUsed": "0x45feb",
      "contractAddress": null,
      "logs": [],
      "status": "0x1",
      "logsBloom": "0x
      "effectiveGasPrice": "0xee6b2800"
    },
    {
      "transactionHash": "0xc6006863c267735a11476b7f15b15bc718e117e2da114a2be815dd651e1a509f",
      "transactionIndex": "0x0",
      "blockHash": "0x16712fae5c0e18f75045f84363fb6b4d9a9fe25e660c4ce286833a533c97f629",
      "blockNumber": "0x4",
      "from": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
      "to": "0xe7f1725e7734ce288f8367e1bb143e90bb3f0512",
      "cumulativeGasUsed": "0x5905",
      "gasUsed": "0x5905",
      "contractAddress": null,
      "logs": [],
      "status": "0x1",
      "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "effectiveGasPrice": "0xee6b2800"
    },
    {
      "transactionHash": "0xedf2b38d8d896519a947a1acf720f859bb35c0c5ecb8dd7511995b67b9853298",
      "transactionIndex": "0x0",
      "blockHash": "0x156b88c3eb9a1244ba00a1834f3f70de735b39e3e59006dd03af4fe7d5480c11",
      "blockNumber": "0x5",
      "from": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
      "to": "0xe7f1725e7734ce288f8367e1bb143e90bb3f0512",
      "cumulativeGasUsed": "0xa9c4",
      "gasUsed": "0xa9c4",
      "contractAddress": null,
      "logs": [],
      "status": "0x1",
      "logsBloom": "0x
      "effectiveGasPrice": "0xee6b2800"
    },
    {
      "transactionHash": "0xa57e8e3981a6c861442e46c9471bd19cb3e21f9a8a6c63a72e7b5c47c6675a7c",
      "transactionIndex": "0x0",
      "blockHash": "0xcf61faca67dbb2c28952b0b8a379e53b1505ae0821e84779679390cb8571cadb",
      "blockNumber": "0x6",
      "from": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
      "to": "0x7c6b4bbe207d642d98d5c537142d85209e585087",
      "cumulativeGasUsed": "0x66c5",
      "gasUsed": "0x66c5",
      "contractAddress": null,
      "logs": [
        {
          "address": "0x7c6b4bbe207d642d98d5c537142d85209e585087",
          "topics": [
            "0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b"
          ],
          "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000046865726500000000000000000000000000000000000000000000000000000000",
          "blockHash": "0xcf61faca67dbb2c28952b0b8a379e53b1505ae0821e84779679390cb8571cadb",
          "blockNumber": "0x6",
          "transactionHash": "0xa57e8e3981a6c861442e46c9471bd19cb3e21f9a8a6c63a72e7b5c47c6675a7c",
          "transactionIndex": "0x1",
          "logIndex": "0x0",
          "transactionLogIndex": "0x0",
          "removed": false
        }
      ],
      "status": "0x1",
      "logsBloom": "0x
      "effectiveGasPrice": "0xee6b2800"
    },
    {
      "transactionHash": "0x11fbb10230c168ca1e36a7e5c69a6dbcd04fd9e64ede39d10a83e36ee8065c16",
      "transactionIndex": "0x0",
      "blockHash": "0xf1e0ed2eda4e923626ec74621006ed50b3fc27580dc7b4cf68a07ca77420e29c",
      "blockNumber": "0x7",
      "from": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
      "to": "0x0000000000000000000000000000000000001337",
      "cumulativeGasUsed": "0x5208",
      "gasUsed": "0x5208",
      "contractAddress": null,
      "logs": [],
      "status": "0x1",
      "logsBloom": "0x
      "effectiveGasPrice": "0xee6b2800"
    }
  ],
  "libraries": [
    "src/Broadcast.t.sol:F:0x5fbdb2315678afecb367f032d93f642f64180aa3"
  ],
  "pending": [],
  "path": "broadcast/Broadcast.t.sol/31337/run-latest.json",
  "returns": {},
  "timestamp": 1655140035
}

================
File: lib/forge-std/test/fixtures/test.json
================
{
  "a": 123,
  "b": "test",
  "c": {
    "a": 123,
    "b": "test"
  }
}

================
File: lib/forge-std/test/fixtures/test.toml
================
a = 123
b = "test"

[c]
a = 123
b = "test"

================
File: lib/forge-std/test/StdAssertions.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

import {StdAssertions} from "../src/StdAssertions.sol";
import {Vm} from "../src/Vm.sol";

interface VmInternal is Vm {
    function _expectCheatcodeRevert(bytes memory message) external;
}

contract StdAssertionsTest is StdAssertions {
    string constant errorMessage = "User provided message";
    uint256 constant maxDecimals = 77;

    bool constant SHOULD_REVERT = true;
    bool constant SHOULD_RETURN = false;

    bool constant STRICT_REVERT_DATA = true;
    bool constant NON_STRICT_REVERT_DATA = false;

    VmInternal constant vm = VmInternal(address(uint160(uint256(keccak256("hevm cheat code")))));

    function testFuzz_AssertEqCall_Return_Pass(
        bytes memory callDataA,
        bytes memory callDataB,
        bytes memory returnData,
        bool strictRevertData
    ) external {
        address targetA = address(new TestMockCall(returnData, SHOULD_RETURN));
        address targetB = address(new TestMockCall(returnData, SHOULD_RETURN));

        assertEqCall(targetA, callDataA, targetB, callDataB, strictRevertData);
    }

    function testFuzz_RevertWhenCalled_AssertEqCall_Return_Fail(
        bytes memory callDataA,
        bytes memory callDataB,
        bytes memory returnDataA,
        bytes memory returnDataB,
        bool strictRevertData
    ) external {
        vm.assume(keccak256(returnDataA) != keccak256(returnDataB));

        address targetA = address(new TestMockCall(returnDataA, SHOULD_RETURN));
        address targetB = address(new TestMockCall(returnDataB, SHOULD_RETURN));

        vm._expectCheatcodeRevert(
            bytes(
                string.concat(
                    "Call return data does not match: ", vm.toString(returnDataA), " != ", vm.toString(returnDataB)
                )
            )
        );
        assertEqCall(targetA, callDataA, targetB, callDataB, strictRevertData);
    }

    function testFuzz_AssertEqCall_Revert_Pass(
        bytes memory callDataA,
        bytes memory callDataB,
        bytes memory revertDataA,
        bytes memory revertDataB
    ) external {
        address targetA = address(new TestMockCall(revertDataA, SHOULD_REVERT));
        address targetB = address(new TestMockCall(revertDataB, SHOULD_REVERT));

        assertEqCall(targetA, callDataA, targetB, callDataB, NON_STRICT_REVERT_DATA);
    }

    function testFuzz_RevertWhenCalled_AssertEqCall_Revert_Fail(
        bytes memory callDataA,
        bytes memory callDataB,
        bytes memory revertDataA,
        bytes memory revertDataB
    ) external {
        vm.assume(keccak256(revertDataA) != keccak256(revertDataB));

        address targetA = address(new TestMockCall(revertDataA, SHOULD_REVERT));
        address targetB = address(new TestMockCall(revertDataB, SHOULD_REVERT));

        vm._expectCheatcodeRevert(
            bytes(
                string.concat(
                    "Call revert data does not match: ", vm.toString(revertDataA), " != ", vm.toString(revertDataB)
                )
            )
        );
        assertEqCall(targetA, callDataA, targetB, callDataB, STRICT_REVERT_DATA);
    }

    function testFuzz_RevertWhenCalled_AssertEqCall_Fail(
        bytes memory callDataA,
        bytes memory callDataB,
        bytes memory returnDataA,
        bytes memory returnDataB,
        bool strictRevertData
    ) external {
        address targetA = address(new TestMockCall(returnDataA, SHOULD_RETURN));
        address targetB = address(new TestMockCall(returnDataB, SHOULD_REVERT));

        vm.expectRevert(bytes("assertion failed"));
        this.assertEqCallExternal(targetA, callDataA, targetB, callDataB, strictRevertData);

        vm.expectRevert(bytes("assertion failed"));
        this.assertEqCallExternal(targetB, callDataB, targetA, callDataA, strictRevertData);
    }

    // Helper function to test outcome of assertEqCall via `expect` cheatcodes
    function assertEqCallExternal(
        address targetA,
        bytes memory callDataA,
        address targetB,
        bytes memory callDataB,
        bool strictRevertData
    ) public {
        assertEqCall(targetA, callDataA, targetB, callDataB, strictRevertData);
    }
}

contract TestMockCall {
    bytes returnData;
    bool shouldRevert;

    constructor(bytes memory returnData_, bool shouldRevert_) {
        returnData = returnData_;
        shouldRevert = shouldRevert_;
    }

    fallback() external payable {
        bytes memory returnData_ = returnData;

        if (shouldRevert) {
            assembly {
                revert(add(returnData_, 0x20), mload(returnData_))
            }
        } else {
            assembly {
                return(add(returnData_, 0x20), mload(returnData_))
            }
        }
    }
}

================
File: lib/forge-std/test/StdChains.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

import {Test} from "../src/Test.sol";

contract StdChainsMock is Test {
    function exposed_getChain(string memory chainAlias) public returns (Chain memory) {
        return getChain(chainAlias);
    }

    function exposed_getChain(uint256 chainId) public returns (Chain memory) {
        return getChain(chainId);
    }

    function exposed_setChain(string memory chainAlias, ChainData memory chainData) public {
        setChain(chainAlias, chainData);
    }

    function exposed_setFallbackToDefaultRpcUrls(bool useDefault) public {
        setFallbackToDefaultRpcUrls(useDefault);
    }
}

contract StdChainsTest is Test {
    function test_ChainRpcInitialization() public {
        // RPCs specified in `foundry.toml` should be updated.
        assertEq(getChain(1).rpcUrl, "https://eth-mainnet.alchemyapi.io/v2/WV407BEiBmjNJfKo9Uo_55u0z0ITyCOX");
        assertEq(getChain("optimism_sepolia").rpcUrl, "https://sepolia.optimism.io/");
        assertEq(getChain("arbitrum_one_sepolia").rpcUrl, "https://sepolia-rollup.arbitrum.io/rpc/");

        // Environment variables should be the next fallback
        assertEq(getChain("arbitrum_nova").rpcUrl, "https://nova.arbitrum.io/rpc");
        vm.setEnv("ARBITRUM_NOVA_RPC_URL", "myoverride");
        assertEq(getChain("arbitrum_nova").rpcUrl, "myoverride");
        vm.setEnv("ARBITRUM_NOVA_RPC_URL", "https://nova.arbitrum.io/rpc");

        // Cannot override RPCs defined in `foundry.toml`
        vm.setEnv("MAINNET_RPC_URL", "myoverride2");
        assertEq(getChain("mainnet").rpcUrl, "https://eth-mainnet.alchemyapi.io/v2/WV407BEiBmjNJfKo9Uo_55u0z0ITyCOX");

        // Other RPCs should remain unchanged.
        assertEq(getChain(31337).rpcUrl, "http://127.0.0.1:8545");
        assertEq(getChain("sepolia").rpcUrl, "https://sepolia.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001");
    }

    // Named with a leading underscore to clarify this is not intended to be run as a normal test,
    // and is intended to be used in the below `test_Rpcs` test.
    function _testRpc(string memory rpcAlias) internal {
        string memory rpcUrl = getChain(rpcAlias).rpcUrl;
        vm.createSelectFork(rpcUrl);
    }

    // Ensure we can connect to the default RPC URL for each chain.
    // Currently commented out since this is slow and public RPCs are flaky, often resulting in failing CI.
    // function test_Rpcs() public {
    //     _testRpc("mainnet");
    //     _testRpc("sepolia");
    //     _testRpc("holesky");
    //     _testRpc("optimism");
    //     _testRpc("optimism_sepolia");
    //     _testRpc("arbitrum_one");
    //     _testRpc("arbitrum_one_sepolia");
    //     _testRpc("arbitrum_nova");
    //     _testRpc("polygon");
    //     _testRpc("polygon_amoy");
    //     _testRpc("avalanche");
    //     _testRpc("avalanche_fuji");
    //     _testRpc("bnb_smart_chain");
    //     _testRpc("bnb_smart_chain_testnet");
    //     _testRpc("gnosis_chain");
    //     _testRpc("moonbeam");
    //     _testRpc("moonriver");
    //     _testRpc("moonbase");
    //     _testRpc("base_sepolia");
    //     _testRpc("base");
    //     _testRpc("blast_sepolia");
    //     _testRpc("blast");
    //     _testRpc("fantom_opera");
    //     _testRpc("fantom_opera_testnet");
    //     _testRpc("fraxtal");
    //     _testRpc("fraxtal_testnet");
    //     _testRpc("berachain_bartio_testnet");
    //     _testRpc("flare");
    //     _testRpc("flare_coston2");
    // }

    function test_RevertIf_ChainNotFound() public {
        // We deploy a mock to properly test the revert.
        StdChainsMock stdChainsMock = new StdChainsMock();

        vm.expectRevert("StdChains getChain(string): Chain with alias \"does_not_exist\" not found.");
        stdChainsMock.exposed_getChain("does_not_exist");
    }

    function test_RevertIf_SetChain_ChainIdExist_FirstTest() public {
        // We deploy a mock to properly test the revert.
        StdChainsMock stdChainsMock = new StdChainsMock();

        vm.expectRevert("StdChains setChain(string,ChainData): Chain ID 31337 already used by \"anvil\".");
        stdChainsMock.exposed_setChain("anvil2", ChainData("Anvil", 31337, "URL"));
    }

    function test_RevertIf_ChainBubbleUp() public {
        // We deploy a mock to properly test the revert.
        StdChainsMock stdChainsMock = new StdChainsMock();

        stdChainsMock.exposed_setChain("needs_undefined_env_var", ChainData("", 123456789, ""));
        // Forge environment variable error.
        vm.expectRevert();
        stdChainsMock.exposed_getChain("needs_undefined_env_var");
    }

    function test_RevertIf_SetChain_ChainIdExists_SecondTest() public {
        // We deploy a mock to properly test the revert.
        StdChainsMock stdChainsMock = new StdChainsMock();

        stdChainsMock.exposed_setChain("custom_chain", ChainData("Custom Chain", 123456789, "https://custom.chain/"));

        vm.expectRevert('StdChains setChain(string,ChainData): Chain ID 123456789 already used by "custom_chain".');

        stdChainsMock.exposed_setChain("another_custom_chain", ChainData("", 123456789, ""));
    }

    function test_SetChain() public {
        setChain("custom_chain", ChainData("Custom Chain", 123456789, "https://custom.chain/"));
        Chain memory customChain = getChain("custom_chain");
        assertEq(customChain.name, "Custom Chain");
        assertEq(customChain.chainId, 123456789);
        assertEq(customChain.chainAlias, "custom_chain");
        assertEq(customChain.rpcUrl, "https://custom.chain/");
        Chain memory chainById = getChain(123456789);
        assertEq(chainById.name, customChain.name);
        assertEq(chainById.chainId, customChain.chainId);
        assertEq(chainById.chainAlias, customChain.chainAlias);
        assertEq(chainById.rpcUrl, customChain.rpcUrl);
        customChain.name = "Another Custom Chain";
        customChain.chainId = 987654321;
        setChain("another_custom_chain", customChain);
        Chain memory anotherCustomChain = getChain("another_custom_chain");
        assertEq(anotherCustomChain.name, "Another Custom Chain");
        assertEq(anotherCustomChain.chainId, 987654321);
        assertEq(anotherCustomChain.chainAlias, "another_custom_chain");
        assertEq(anotherCustomChain.rpcUrl, "https://custom.chain/");
        // Verify the first chain data was not overwritten
        chainById = getChain(123456789);
        assertEq(chainById.name, "Custom Chain");
        assertEq(chainById.chainId, 123456789);
    }

    function test_RevertIf_SetEmptyAlias() public {
        // We deploy a mock to properly test the revert.
        StdChainsMock stdChainsMock = new StdChainsMock();

        vm.expectRevert("StdChains setChain(string,ChainData): Chain alias cannot be the empty string.");
        stdChainsMock.exposed_setChain("", ChainData("", 123456789, ""));
    }

    function test_RevertIf_SetNoChainId0() public {
        // We deploy a mock to properly test the revert.
        StdChainsMock stdChainsMock = new StdChainsMock();

        vm.expectRevert("StdChains setChain(string,ChainData): Chain ID cannot be 0.");
        stdChainsMock.exposed_setChain("alias", ChainData("", 0, ""));
    }

    function test_RevertIf_GetNoChainId0() public {
        // We deploy a mock to properly test the revert.
        StdChainsMock stdChainsMock = new StdChainsMock();

        vm.expectRevert("StdChains getChain(uint256): Chain ID cannot be 0.");
        stdChainsMock.exposed_getChain(0);
    }

    function test_RevertIf_GetNoEmptyAlias() public {
        // We deploy a mock to properly test the revert.
        StdChainsMock stdChainsMock = new StdChainsMock();

        vm.expectRevert("StdChains getChain(string): Chain alias cannot be the empty string.");
        stdChainsMock.exposed_getChain("");
    }

    function test_RevertIf_ChainIdNotFound() public {
        // We deploy a mock to properly test the revert.
        StdChainsMock stdChainsMock = new StdChainsMock();

        vm.expectRevert("StdChains getChain(string): Chain with alias \"no_such_alias\" not found.");
        stdChainsMock.exposed_getChain("no_such_alias");
    }

    function test_RevertIf_ChainAliasNotFound() public {
        // We deploy a mock to properly test the revert.
        StdChainsMock stdChainsMock = new StdChainsMock();

        vm.expectRevert("StdChains getChain(uint256): Chain with ID 321 not found.");

        stdChainsMock.exposed_getChain(321);
    }

    function test_SetChain_ExistingOne() public {
        // We deploy a mock to properly test the revert.
        StdChainsMock stdChainsMock = new StdChainsMock();

        setChain("custom_chain", ChainData("Custom Chain", 123456789, "https://custom.chain/"));
        assertEq(getChain(123456789).chainId, 123456789);

        setChain("custom_chain", ChainData("Modified Chain", 9999999999999999999, "https://modified.chain/"));
        vm.expectRevert("StdChains getChain(uint256): Chain with ID 123456789 not found.");
        stdChainsMock.exposed_getChain(123456789);

        Chain memory modifiedChain = getChain(9999999999999999999);
        assertEq(modifiedChain.name, "Modified Chain");
        assertEq(modifiedChain.chainId, 9999999999999999999);
        assertEq(modifiedChain.rpcUrl, "https://modified.chain/");
    }

    function test_RevertIf_DontUseDefaultRpcUrl() public {
        // We deploy a mock to properly test the revert.
        StdChainsMock stdChainsMock = new StdChainsMock();

        // Should error if default RPCs flag is set to false.
        stdChainsMock.exposed_setFallbackToDefaultRpcUrls(false);
        vm.expectRevert();
        stdChainsMock.exposed_getChain(31337);
        vm.expectRevert();
        stdChainsMock.exposed_getChain("sepolia");
    }
}

================
File: lib/forge-std/test/StdCheats.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

import {StdCheats} from "../src/StdCheats.sol";
import {Test} from "../src/Test.sol";
import {stdJson} from "../src/StdJson.sol";
import {stdToml} from "../src/StdToml.sol";
import {IERC20} from "../src/interfaces/IERC20.sol";

contract StdCheatsTest is Test {
    Bar test;

    using stdJson for string;

    function setUp() public {
        test = new Bar();
    }

    function test_Skip() public {
        vm.warp(100);
        skip(25);
        assertEq(block.timestamp, 125);
    }

    function test_Rewind() public {
        vm.warp(100);
        rewind(25);
        assertEq(block.timestamp, 75);
    }

    function test_Hoax() public {
        hoax(address(1337));
        test.bar{value: 100}(address(1337));
    }

    function test_HoaxOrigin() public {
        hoax(address(1337), address(1337));
        test.origin{value: 100}(address(1337));
    }

    function test_HoaxDifferentAddresses() public {
        hoax(address(1337), address(7331));
        test.origin{value: 100}(address(1337), address(7331));
    }

    function test_StartHoax() public {
        startHoax(address(1337));
        test.bar{value: 100}(address(1337));
        test.bar{value: 100}(address(1337));
        vm.stopPrank();
        test.bar(address(this));
    }

    function test_StartHoaxOrigin() public {
        startHoax(address(1337), address(1337));
        test.origin{value: 100}(address(1337));
        test.origin{value: 100}(address(1337));
        vm.stopPrank();
        test.bar(address(this));
    }

    function test_ChangePrankMsgSender() public {
        vm.startPrank(address(1337));
        test.bar(address(1337));
        changePrank(address(0xdead));
        test.bar(address(0xdead));
        changePrank(address(1337));
        test.bar(address(1337));
        vm.stopPrank();
    }

    function test_ChangePrankMsgSenderAndTxOrigin() public {
        vm.startPrank(address(1337), address(1338));
        test.origin(address(1337), address(1338));
        changePrank(address(0xdead), address(0xbeef));
        test.origin(address(0xdead), address(0xbeef));
        changePrank(address(1337), address(1338));
        test.origin(address(1337), address(1338));
        vm.stopPrank();
    }

    function test_MakeAccountEquivalence() public {
        Account memory account = makeAccount("1337");
        (address addr, uint256 key) = makeAddrAndKey("1337");
        assertEq(account.addr, addr);
        assertEq(account.key, key);
    }

    function test_MakeAddrEquivalence() public {
        (address addr,) = makeAddrAndKey("1337");
        assertEq(makeAddr("1337"), addr);
    }

    function test_MakeAddrSigning() public {
        (address addr, uint256 key) = makeAddrAndKey("1337");
        bytes32 hash = keccak256("some_message");

        (uint8 v, bytes32 r, bytes32 s) = vm.sign(key, hash);
        assertEq(ecrecover(hash, v, r, s), addr);
    }

    function test_Deal() public {
        deal(address(this), 1 ether);
        assertEq(address(this).balance, 1 ether);
    }

    function test_DealToken() public {
        Bar barToken = new Bar();
        address bar = address(barToken);
        deal(bar, address(this), 10000e18);
        assertEq(barToken.balanceOf(address(this)), 10000e18);
    }

    function test_DealTokenAdjustTotalSupply() public {
        Bar barToken = new Bar();
        address bar = address(barToken);
        deal(bar, address(this), 10000e18, true);
        assertEq(barToken.balanceOf(address(this)), 10000e18);
        assertEq(barToken.totalSupply(), 20000e18);
        deal(bar, address(this), 0, true);
        assertEq(barToken.balanceOf(address(this)), 0);
        assertEq(barToken.totalSupply(), 10000e18);
    }

    function test_DealERC1155Token() public {
        BarERC1155 barToken = new BarERC1155();
        address bar = address(barToken);
        dealERC1155(bar, address(this), 0, 10000e18, false);
        assertEq(barToken.balanceOf(address(this), 0), 10000e18);
    }

    function test_DealERC1155TokenAdjustTotalSupply() public {
        BarERC1155 barToken = new BarERC1155();
        address bar = address(barToken);
        dealERC1155(bar, address(this), 0, 10000e18, true);
        assertEq(barToken.balanceOf(address(this), 0), 10000e18);
        assertEq(barToken.totalSupply(0), 20000e18);
        dealERC1155(bar, address(this), 0, 0, true);
        assertEq(barToken.balanceOf(address(this), 0), 0);
        assertEq(barToken.totalSupply(0), 10000e18);
    }

    function test_DealERC721Token() public {
        BarERC721 barToken = new BarERC721();
        address bar = address(barToken);
        dealERC721(bar, address(2), 1);
        assertEq(barToken.balanceOf(address(2)), 1);
        assertEq(barToken.balanceOf(address(1)), 0);
        dealERC721(bar, address(1), 2);
        assertEq(barToken.balanceOf(address(1)), 1);
        assertEq(barToken.balanceOf(bar), 1);
    }

    function test_DeployCode() public {
        address deployed = deployCode("StdCheats.t.sol:Bar", bytes(""));
        assertEq(string(getCode(deployed)), string(getCode(address(test))));
    }

    function test_DestroyAccount() public {
        // deploy something to destroy it
        BarERC721 barToken = new BarERC721();
        address bar = address(barToken);
        vm.setNonce(bar, 10);
        deal(bar, 100);

        uint256 prevThisBalance = address(this).balance;
        uint256 size;
        assembly {
            size := extcodesize(bar)
        }

        assertGt(size, 0);
        assertEq(bar.balance, 100);
        assertEq(vm.getNonce(bar), 10);

        destroyAccount(bar, address(this));
        assembly {
            size := extcodesize(bar)
        }
        assertEq(address(this).balance, prevThisBalance + 100);
        assertEq(vm.getNonce(bar), 0);
        assertEq(size, 0);
        assertEq(bar.balance, 0);
    }

    function test_DeployCodeNoArgs() public {
        address deployed = deployCode("StdCheats.t.sol:Bar");
        assertEq(string(getCode(deployed)), string(getCode(address(test))));
    }

    function test_DeployCodeVal() public {
        address deployed = deployCode("StdCheats.t.sol:Bar", bytes(""), 1 ether);
        assertEq(string(getCode(deployed)), string(getCode(address(test))));
        assertEq(deployed.balance, 1 ether);
    }

    function test_DeployCodeValNoArgs() public {
        address deployed = deployCode("StdCheats.t.sol:Bar", 1 ether);
        assertEq(string(getCode(deployed)), string(getCode(address(test))));
        assertEq(deployed.balance, 1 ether);
    }

    // We need this so we can call "this.deployCode" rather than "deployCode" directly
    function deployCodeHelper(string memory what) external {
        deployCode(what);
    }

    function test_RevertIf_DeployCodeFail() public {
        vm.expectRevert(bytes("StdCheats deployCode(string): Deployment failed."));
        this.deployCodeHelper("StdCheats.t.sol:RevertingContract");
    }

    function getCode(address who) internal view returns (bytes memory o_code) {
        /// @solidity memory-safe-assembly
        assembly {
            // retrieve the size of the code, this needs assembly
            let size := extcodesize(who)
            // allocate output byte array - this could also be done without assembly
            // by using o_code = new bytes(size)
            o_code := mload(0x40)
            // new "memory end" including padding
            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))
            // store length in memory
            mstore(o_code, size)
            // actually retrieve the code, this needs assembly
            extcodecopy(who, add(o_code, 0x20), 0, size)
        }
    }

    function test_DeriveRememberKey() public {
        string memory mnemonic = "test test test test test test test test test test test junk";

        (address deployer, uint256 privateKey) = deriveRememberKey(mnemonic, 0);
        assertEq(deployer, 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266);
        assertEq(privateKey, 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80);
    }

    function test_BytesToUint() public pure {
        assertEq(3, bytesToUint_test(hex"03"));
        assertEq(2, bytesToUint_test(hex"02"));
        assertEq(255, bytesToUint_test(hex"ff"));
        assertEq(29625, bytesToUint_test(hex"73b9"));
    }

    function test_ParseJsonTxDetail() public view {
        string memory root = vm.projectRoot();
        string memory path = string.concat(root, "/test/fixtures/broadcast.log.json");
        string memory json = vm.readFile(path);
        bytes memory transactionDetails = json.parseRaw(".transactions[0].tx");
        RawTx1559Detail memory rawTxDetail = abi.decode(transactionDetails, (RawTx1559Detail));
        Tx1559Detail memory txDetail = rawToConvertedEIP1559Detail(rawTxDetail);
        assertEq(txDetail.from, 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266);
        assertEq(txDetail.to, 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512);
        assertEq(
            txDetail.data,
            hex"23e99187000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000013370000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004"
        );
        assertEq(txDetail.nonce, 3);
        assertEq(txDetail.txType, 2);
        assertEq(txDetail.gas, 29625);
        assertEq(txDetail.value, 0);
    }

    function test_ReadEIP1559Transaction() public view {
        string memory root = vm.projectRoot();
        string memory path = string.concat(root, "/test/fixtures/broadcast.log.json");
        uint256 index = 0;
        Tx1559 memory transaction = readTx1559(path, index);
        transaction;
    }

    function test_ReadEIP1559Transactions() public view {
        string memory root = vm.projectRoot();
        string memory path = string.concat(root, "/test/fixtures/broadcast.log.json");
        Tx1559[] memory transactions = readTx1559s(path);
        transactions;
    }

    function test_ReadReceipt() public view {
        string memory root = vm.projectRoot();
        string memory path = string.concat(root, "/test/fixtures/broadcast.log.json");
        uint256 index = 5;
        Receipt memory receipt = readReceipt(path, index);
        assertEq(
            receipt.logsBloom,
            hex
        );
    }

    function test_ReadReceipts() public view {
        string memory root = vm.projectRoot();
        string memory path = string.concat(root, "/test/fixtures/broadcast.log.json");
        Receipt[] memory receipts = readReceipts(path);
        receipts;
    }

    function test_GasMeteringModifier() public {
        uint256 gas_start_normal = gasleft();
        addInLoop();
        uint256 gas_used_normal = gas_start_normal - gasleft();

        uint256 gas_start_single = gasleft();
        addInLoopNoGas();
        uint256 gas_used_single = gas_start_single - gasleft();

        uint256 gas_start_double = gasleft();
        addInLoopNoGasNoGas();
        uint256 gas_used_double = gas_start_double - gasleft();

        assertTrue(gas_used_double + gas_used_single < gas_used_normal);
    }

    function addInLoop() internal pure returns (uint256) {
        uint256 b;
        for (uint256 i; i < 10000; i++) {
            b += i;
        }
        return b;
    }

    function addInLoopNoGas() internal noGasMetering returns (uint256) {
        return addInLoop();
    }

    function addInLoopNoGasNoGas() internal noGasMetering returns (uint256) {
        return addInLoopNoGas();
    }

    function bytesToUint_test(bytes memory b) private pure returns (uint256) {
        uint256 number;
        for (uint256 i = 0; i < b.length; i++) {
            number = number + uint256(uint8(b[i])) * (2 ** (8 * (b.length - (i + 1))));
        }
        return number;
    }

    function testFuzz_AssumeAddressIsNot(address addr) external {
        // skip over Payable and NonPayable enums
        for (uint8 i = 2; i < uint8(type(AddressType).max); i++) {
            assumeAddressIsNot(addr, AddressType(i));
        }
        assertTrue(addr != address(0));
        assertTrue(addr < address(1) || addr > address(9));
        assertTrue(addr != address(vm) || addr != 0x000000000000000000636F6e736F6c652e6c6f67);
    }

    function test_AssumePayable() external {
        // We deploy a mock version so we can properly test the revert.
        StdCheatsMock stdCheatsMock = new StdCheatsMock();

        // all should revert since these addresses are not payable

        // VM address
        vm.expectRevert();
        stdCheatsMock.exposed_assumePayable(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);

        // Console address
        vm.expectRevert();
        stdCheatsMock.exposed_assumePayable(0x000000000000000000636F6e736F6c652e6c6f67);

        // Create2Deployer
        vm.expectRevert();
        stdCheatsMock.exposed_assumePayable(0x4e59b44847b379578588920cA78FbF26c0B4956C);

        // all should pass since these addresses are payable

        // vitalik.eth
        stdCheatsMock.exposed_assumePayable(0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045);

        // mock payable contract
        MockContractPayable cp = new MockContractPayable();
        stdCheatsMock.exposed_assumePayable(address(cp));
    }

    function test_AssumeNotPayable() external {
        // We deploy a mock version so we can properly test the revert.
        StdCheatsMock stdCheatsMock = new StdCheatsMock();

        // all should pass since these addresses are not payable

        // VM address
        stdCheatsMock.exposed_assumeNotPayable(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);

        // Console address
        stdCheatsMock.exposed_assumeNotPayable(0x000000000000000000636F6e736F6c652e6c6f67);

        // Create2Deployer
        stdCheatsMock.exposed_assumeNotPayable(0x4e59b44847b379578588920cA78FbF26c0B4956C);

        // all should revert since these addresses are payable

        // vitalik.eth
        vm.expectRevert();
        stdCheatsMock.exposed_assumeNotPayable(0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045);

        // mock payable contract
        MockContractPayable cp = new MockContractPayable();
        vm.expectRevert();
        stdCheatsMock.exposed_assumeNotPayable(address(cp));
    }

    function testFuzz_AssumeNotPrecompile(address addr) external {
        assumeNotPrecompile(addr, getChain("optimism_sepolia").chainId);
        assertTrue(
            addr < address(1) || (addr > address(9) && addr < address(0x4200000000000000000000000000000000000000))
                || addr > address(0x4200000000000000000000000000000000000800)
        );
    }

    function testFuzz_AssumeNotForgeAddress(address addr) external pure {
        assumeNotForgeAddress(addr);
        assertTrue(
            addr != address(vm) && addr != 0x000000000000000000636F6e736F6c652e6c6f67
                && addr != 0x4e59b44847b379578588920cA78FbF26c0B4956C
        );
    }

    function test_RevertIf_CannotDeployCodeTo() external {
        vm.expectRevert("StdCheats deployCodeTo(string,bytes,uint256,address): Failed to create runtime bytecode.");
        this._revertDeployCodeTo();
    }

    function _revertDeployCodeTo() external {
        deployCodeTo("StdCheats.t.sol:RevertingContract", address(0));
    }

    function test_DeployCodeTo() external {
        address arbitraryAddress = makeAddr("arbitraryAddress");

        deployCodeTo(
            "StdCheats.t.sol:MockContractWithConstructorArgs",
            abi.encode(uint256(6), true, bytes20(arbitraryAddress)),
            1 ether,
            arbitraryAddress
        );

        MockContractWithConstructorArgs ct = MockContractWithConstructorArgs(arbitraryAddress);

        assertEq(arbitraryAddress.balance, 1 ether);
        assertEq(ct.x(), 6);
        assertTrue(ct.y());
        assertEq(ct.z(), bytes20(arbitraryAddress));
    }
}

contract StdCheatsMock is StdCheats {
    function exposed_assumePayable(address addr) external {
        assumePayable(addr);
    }

    function exposed_assumeNotPayable(address addr) external {
        assumeNotPayable(addr);
    }

    // We deploy a mock version so we can properly test expected reverts.
    function exposed_assumeNotBlacklisted(address token, address addr) external view {
        return assumeNotBlacklisted(token, addr);
    }
}

contract StdCheatsForkTest is Test {
    address internal constant SHIB = 0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE;
    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
    address internal constant USDC_BLACKLISTED_USER = 0x1E34A77868E19A6647b1f2F47B51ed72dEDE95DD;
    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;
    address internal constant USDT_BLACKLISTED_USER = 0x8f8a8F4B54a2aAC7799d7bc81368aC27b852822A;

    function setUp() public {
        // All tests of the `assumeNotBlacklisted` method are fork tests using live contracts.
        vm.createSelectFork({urlOrAlias: "mainnet", blockNumber: 16_428_900});
    }

    function test_RevertIf_CannotAssumeNoBlacklisted_EOA() external {
        // We deploy a mock version so we can properly test the revert.
        StdCheatsMock stdCheatsMock = new StdCheatsMock();
        address eoa = vm.addr({privateKey: 1});
        vm.expectRevert("StdCheats assumeNotBlacklisted(address,address): Token address is not a contract.");
        stdCheatsMock.exposed_assumeNotBlacklisted(eoa, address(0));
    }

    function testFuzz_AssumeNotBlacklisted_TokenWithoutBlacklist(address addr) external view {
        assumeNotBlacklisted(SHIB, addr);
        assertTrue(true);
    }

    function test_RevertIf_AssumeNoBlacklisted_USDC() external {
        // We deploy a mock version so we can properly test the revert.
        StdCheatsMock stdCheatsMock = new StdCheatsMock();
        vm.expectRevert();
        stdCheatsMock.exposed_assumeNotBlacklisted(USDC, USDC_BLACKLISTED_USER);
    }

    function testFuzz_AssumeNotBlacklisted_USDC(address addr) external view {
        assumeNotBlacklisted(USDC, addr);
        assertFalse(USDCLike(USDC).isBlacklisted(addr));
    }

    function test_RevertIf_AssumeNoBlacklisted_USDT() external {
        // We deploy a mock version so we can properly test the revert.
        StdCheatsMock stdCheatsMock = new StdCheatsMock();
        vm.expectRevert();
        stdCheatsMock.exposed_assumeNotBlacklisted(USDT, USDT_BLACKLISTED_USER);
    }

    function testFuzz_AssumeNotBlacklisted_USDT(address addr) external view {
        assumeNotBlacklisted(USDT, addr);
        assertFalse(USDTLike(USDT).isBlackListed(addr));
    }

    function test_dealUSDC() external {
        // roll fork to the point when USDC contract updated to store balance in packed slots
        vm.rollFork(19279215);

        uint256 balance = 100e6;
        deal(USDC, address(this), balance);
        assertEq(IERC20(USDC).balanceOf(address(this)), balance);
    }
}

contract Bar {
    constructor() payable {
        /// `DEAL` STDCHEAT
        totalSupply = 10000e18;
        balanceOf[address(this)] = totalSupply;
    }

    /// `HOAX` and `CHANGEPRANK` STDCHEATS
    function bar(address expectedSender) public payable {
        require(msg.sender == expectedSender, "!prank");
    }

    function origin(address expectedSender) public payable {
        require(msg.sender == expectedSender, "!prank");
        require(tx.origin == expectedSender, "!prank");
    }

    function origin(address expectedSender, address expectedOrigin) public payable {
        require(msg.sender == expectedSender, "!prank");
        require(tx.origin == expectedOrigin, "!prank");
    }

    /// `DEAL` STDCHEAT
    mapping(address => uint256) public balanceOf;
    uint256 public totalSupply;
}

contract BarERC1155 {
    constructor() payable {
        /// `DEALERC1155` STDCHEAT
        _totalSupply[0] = 10000e18;
        _balances[0][address(this)] = _totalSupply[0];
    }

    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {
        return _balances[id][account];
    }

    function totalSupply(uint256 id) public view virtual returns (uint256) {
        return _totalSupply[id];
    }

    /// `DEALERC1155` STDCHEAT
    mapping(uint256 => mapping(address => uint256)) private _balances;
    mapping(uint256 => uint256) private _totalSupply;
}

contract BarERC721 {
    constructor() payable {
        /// `DEALERC721` STDCHEAT
        _owners[1] = address(1);
        _balances[address(1)] = 1;
        _owners[2] = address(this);
        _owners[3] = address(this);
        _balances[address(this)] = 2;
    }

    function balanceOf(address owner) public view virtual returns (uint256) {
        return _balances[owner];
    }

    function ownerOf(uint256 tokenId) public view virtual returns (address) {
        address owner = _owners[tokenId];
        return owner;
    }

    mapping(uint256 => address) private _owners;
    mapping(address => uint256) private _balances;
}

interface USDCLike {
    function isBlacklisted(address) external view returns (bool);
}

interface USDTLike {
    function isBlackListed(address) external view returns (bool);
}

contract RevertingContract {
    constructor() {
        revert();
    }
}

contract MockContractWithConstructorArgs {
    uint256 public immutable x;
    bool public y;
    bytes20 public z;

    constructor(uint256 _x, bool _y, bytes20 _z) payable {
        x = _x;
        y = _y;
        z = _z;
    }
}

contract MockContractPayable {
    receive() external payable {}
}

================
File: lib/forge-std/test/StdError.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0 <0.9.0;

import {stdError} from "../src/StdError.sol";
import {Test} from "../src/Test.sol";

contract StdErrorsTest is Test {
    ErrorsTest test;

    function setUp() public {
        test = new ErrorsTest();
    }

    function test_RevertIf_AssertionError() public {
        vm.expectRevert(stdError.assertionError);
        test.assertionError();
    }

    function test_RevertIf_ArithmeticError() public {
        vm.expectRevert(stdError.arithmeticError);
        test.arithmeticError(10);
    }

    function test_RevertIf_DivisionError() public {
        vm.expectRevert(stdError.divisionError);
        test.divError(0);
    }

    function test_RevertIf_ModError() public {
        vm.expectRevert(stdError.divisionError);
        test.modError(0);
    }

    function test_RevertIf_EnumConversionError() public {
        vm.expectRevert(stdError.enumConversionError);
        test.enumConversion(1);
    }

    function test_RevertIf_EncodeStgError() public {
        vm.expectRevert(stdError.encodeStorageError);
        test.encodeStgError();
    }

    function test_RevertIf_PopError() public {
        vm.expectRevert(stdError.popError);
        test.pop();
    }

    function test_RevertIf_IndexOOBError() public {
        vm.expectRevert(stdError.indexOOBError);
        test.indexOOBError(1);
    }

    function test_RevertIf_MemOverflowError() public {
        vm.expectRevert(stdError.memOverflowError);
        test.mem();
    }

    function test_RevertIf_InternError() public {
        vm.expectRevert(stdError.zeroVarError);
        test.intern();
    }
}

contract ErrorsTest {
    enum T {
        T1
    }

    uint256[] public someArr;
    bytes someBytes;

    function assertionError() public pure {
        assert(false);
    }

    function arithmeticError(uint256 a) public pure {
        a -= 100;
    }

    function divError(uint256 a) public pure {
        100 / a;
    }

    function modError(uint256 a) public pure {
        100 % a;
    }

    function enumConversion(uint256 a) public pure {
        T(a);
    }

    function encodeStgError() public {
        /// @solidity memory-safe-assembly
        assembly {
            sstore(someBytes.slot, 1)
        }
        keccak256(someBytes);
    }

    function pop() public {
        someArr.pop();
    }

    function indexOOBError(uint256 a) public pure {
        uint256[] memory t = new uint256[](0);
        t[a];
    }

    function mem() public pure {
        uint256 l = 2 ** 256 / 32;
        new uint256[](l);
    }

    function intern() public returns (uint256) {
        function(uint256) internal returns (uint256) x;
        x(2);
        return 7;
    }
}

================
File: lib/forge-std/test/StdJson.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

import {Test, stdJson} from "../src/Test.sol";

contract StdJsonTest is Test {
    using stdJson for string;

    string root;
    string path;

    function setUp() public {
        root = vm.projectRoot();
        path = string.concat(root, "/test/fixtures/test.json");
    }

    struct SimpleJson {
        uint256 a;
        string b;
    }

    struct NestedJson {
        uint256 a;
        string b;
        SimpleJson c;
    }

    function test_readJson() public view {
        string memory json = vm.readFile(path);
        assertEq(json.readUint(".a"), 123);
    }

    function test_writeJson() public {
        string memory json = "json";
        json.serialize("a", uint256(123));
        string memory semiFinal = json.serialize("b", string("test"));
        string memory finalJson = json.serialize("c", semiFinal);
        finalJson.write(path);

        string memory json_ = vm.readFile(path);
        bytes memory data = json_.parseRaw("$");
        NestedJson memory decodedData = abi.decode(data, (NestedJson));

        assertEq(decodedData.a, 123);
        assertEq(decodedData.b, "test");
        assertEq(decodedData.c.a, 123);
        assertEq(decodedData.c.b, "test");
    }
}

================
File: lib/forge-std/test/StdMath.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0 <0.9.0;

import {stdMath} from "../src/StdMath.sol";
import {Test, stdError} from "../src/Test.sol";

contract StdMathMock is Test {
    function exposed_percentDelta(uint256 a, uint256 b) public pure returns (uint256) {
        return stdMath.percentDelta(a, b);
    }

    function exposed_percentDelta(int256 a, int256 b) public pure returns (uint256) {
        return stdMath.percentDelta(a, b);
    }
}

contract StdMathTest is Test {
    function test_GetAbs() external pure {
        assertEq(stdMath.abs(-50), 50);
        assertEq(stdMath.abs(50), 50);
        assertEq(stdMath.abs(-1337), 1337);
        assertEq(stdMath.abs(0), 0);

        assertEq(stdMath.abs(type(int256).min), (type(uint256).max >> 1) + 1);
        assertEq(stdMath.abs(type(int256).max), (type(uint256).max >> 1));
    }

    function testFuzz_GetAbs(int256 a) external pure {
        uint256 manualAbs = getAbs(a);

        uint256 abs = stdMath.abs(a);

        assertEq(abs, manualAbs);
    }

    function test_GetDelta_Uint() external pure {
        assertEq(stdMath.delta(uint256(0), uint256(0)), 0);
        assertEq(stdMath.delta(uint256(0), uint256(1337)), 1337);
        assertEq(stdMath.delta(uint256(0), type(uint64).max), type(uint64).max);
        assertEq(stdMath.delta(uint256(0), type(uint128).max), type(uint128).max);
        assertEq(stdMath.delta(uint256(0), type(uint256).max), type(uint256).max);

        assertEq(stdMath.delta(0, uint256(0)), 0);
        assertEq(stdMath.delta(1337, uint256(0)), 1337);
        assertEq(stdMath.delta(type(uint64).max, uint256(0)), type(uint64).max);
        assertEq(stdMath.delta(type(uint128).max, uint256(0)), type(uint128).max);
        assertEq(stdMath.delta(type(uint256).max, uint256(0)), type(uint256).max);

        assertEq(stdMath.delta(1337, uint256(1337)), 0);
        assertEq(stdMath.delta(type(uint256).max, type(uint256).max), 0);
        assertEq(stdMath.delta(5000, uint256(1250)), 3750);
    }

    function testFuzz_GetDelta_Uint(uint256 a, uint256 b) external pure {
        uint256 manualDelta = a > b ? a - b : b - a;

        uint256 delta = stdMath.delta(a, b);

        assertEq(delta, manualDelta);
    }

    function test_GetDelta_Int() external pure {
        assertEq(stdMath.delta(int256(0), int256(0)), 0);
        assertEq(stdMath.delta(int256(0), int256(1337)), 1337);
        assertEq(stdMath.delta(int256(0), type(int64).max), type(uint64).max >> 1);
        assertEq(stdMath.delta(int256(0), type(int128).max), type(uint128).max >> 1);
        assertEq(stdMath.delta(int256(0), type(int256).max), type(uint256).max >> 1);

        assertEq(stdMath.delta(0, int256(0)), 0);
        assertEq(stdMath.delta(1337, int256(0)), 1337);
        assertEq(stdMath.delta(type(int64).max, int256(0)), type(uint64).max >> 1);
        assertEq(stdMath.delta(type(int128).max, int256(0)), type(uint128).max >> 1);
        assertEq(stdMath.delta(type(int256).max, int256(0)), type(uint256).max >> 1);

        assertEq(stdMath.delta(-0, int256(0)), 0);
        assertEq(stdMath.delta(-1337, int256(0)), 1337);
        assertEq(stdMath.delta(type(int64).min, int256(0)), (type(uint64).max >> 1) + 1);
        assertEq(stdMath.delta(type(int128).min, int256(0)), (type(uint128).max >> 1) + 1);
        assertEq(stdMath.delta(type(int256).min, int256(0)), (type(uint256).max >> 1) + 1);

        assertEq(stdMath.delta(int256(0), -0), 0);
        assertEq(stdMath.delta(int256(0), -1337), 1337);
        assertEq(stdMath.delta(int256(0), type(int64).min), (type(uint64).max >> 1) + 1);
        assertEq(stdMath.delta(int256(0), type(int128).min), (type(uint128).max >> 1) + 1);
        assertEq(stdMath.delta(int256(0), type(int256).min), (type(uint256).max >> 1) + 1);

        assertEq(stdMath.delta(1337, int256(1337)), 0);
        assertEq(stdMath.delta(type(int256).max, type(int256).max), 0);
        assertEq(stdMath.delta(type(int256).min, type(int256).min), 0);
        assertEq(stdMath.delta(type(int256).min, type(int256).max), type(uint256).max);
        assertEq(stdMath.delta(5000, int256(1250)), 3750);
    }

    function testFuzz_GetDelta_Int(int256 a, int256 b) external pure {
        uint256 absA = getAbs(a);
        uint256 absB = getAbs(b);
        uint256 absDelta = absA > absB ? absA - absB : absB - absA;

        uint256 manualDelta;
        if ((a >= 0 && b >= 0) || (a < 0 && b < 0)) {
            manualDelta = absDelta;
        }
        // (a < 0 && b >= 0) || (a >= 0 && b < 0)
        else {
            manualDelta = absA + absB;
        }

        uint256 delta = stdMath.delta(a, b);

        assertEq(delta, manualDelta);
    }

    function test_GetPercentDelta_Uint() external {
        StdMathMock stdMathMock = new StdMathMock();

        assertEq(stdMath.percentDelta(uint256(0), uint256(1337)), 1e18);
        assertEq(stdMath.percentDelta(uint256(0), type(uint64).max), 1e18);
        assertEq(stdMath.percentDelta(uint256(0), type(uint128).max), 1e18);
        assertEq(stdMath.percentDelta(uint256(0), type(uint192).max), 1e18);

        assertEq(stdMath.percentDelta(1337, uint256(1337)), 0);
        assertEq(stdMath.percentDelta(type(uint192).max, type(uint192).max), 0);
        assertEq(stdMath.percentDelta(0, uint256(2500)), 1e18);
        assertEq(stdMath.percentDelta(2500, uint256(2500)), 0);
        assertEq(stdMath.percentDelta(5000, uint256(2500)), 1e18);
        assertEq(stdMath.percentDelta(7500, uint256(2500)), 2e18);

        vm.expectRevert(stdError.divisionError);
        stdMathMock.exposed_percentDelta(uint256(1), 0);
    }

    function testFuzz_GetPercentDelta_Uint(uint192 a, uint192 b) external pure {
        vm.assume(b != 0);
        uint256 manualDelta = a > b ? a - b : b - a;

        uint256 manualPercentDelta = manualDelta * 1e18 / b;
        uint256 percentDelta = stdMath.percentDelta(a, b);

        assertEq(percentDelta, manualPercentDelta);
    }

    function test_GetPercentDelta_Int() external {
        // We deploy a mock version so we can properly test the revert.
        StdMathMock stdMathMock = new StdMathMock();

        assertEq(stdMath.percentDelta(int256(0), int256(1337)), 1e18);
        assertEq(stdMath.percentDelta(int256(0), -1337), 1e18);
        assertEq(stdMath.percentDelta(int256(0), type(int64).min), 1e18);
        assertEq(stdMath.percentDelta(int256(0), type(int128).min), 1e18);
        assertEq(stdMath.percentDelta(int256(0), type(int192).min), 1e18);
        assertEq(stdMath.percentDelta(int256(0), type(int64).max), 1e18);
        assertEq(stdMath.percentDelta(int256(0), type(int128).max), 1e18);
        assertEq(stdMath.percentDelta(int256(0), type(int192).max), 1e18);

        assertEq(stdMath.percentDelta(1337, int256(1337)), 0);
        assertEq(stdMath.percentDelta(type(int192).max, type(int192).max), 0);
        assertEq(stdMath.percentDelta(type(int192).min, type(int192).min), 0);

        assertEq(stdMath.percentDelta(type(int192).min, type(int192).max), 2e18); // rounds the 1 wei diff down
        assertEq(stdMath.percentDelta(type(int192).max, type(int192).min), 2e18 - 1); // rounds the 1 wei diff down
        assertEq(stdMath.percentDelta(0, int256(2500)), 1e18);
        assertEq(stdMath.percentDelta(2500, int256(2500)), 0);
        assertEq(stdMath.percentDelta(5000, int256(2500)), 1e18);
        assertEq(stdMath.percentDelta(7500, int256(2500)), 2e18);

        vm.expectRevert(stdError.divisionError);
        stdMathMock.exposed_percentDelta(int256(1), 0);
    }

    function testFuzz_GetPercentDelta_Int(int192 a, int192 b) external pure {
        vm.assume(b != 0);
        uint256 absA = getAbs(a);
        uint256 absB = getAbs(b);
        uint256 absDelta = absA > absB ? absA - absB : absB - absA;

        uint256 manualDelta;
        if ((a >= 0 && b >= 0) || (a < 0 && b < 0)) {
            manualDelta = absDelta;
        }
        // (a < 0 && b >= 0) || (a >= 0 && b < 0)
        else {
            manualDelta = absA + absB;
        }

        uint256 manualPercentDelta = manualDelta * 1e18 / absB;
        uint256 percentDelta = stdMath.percentDelta(a, b);

        assertEq(percentDelta, manualPercentDelta);
    }

    /*//////////////////////////////////////////////////////////////////////////
                                   HELPERS
    //////////////////////////////////////////////////////////////////////////*/

    function getAbs(int256 a) private pure returns (uint256) {
        if (a < 0) {
            return a == type(int256).min ? uint256(type(int256).max) + 1 : uint256(-a);
        }

        return uint256(a);
    }
}

================
File: lib/forge-std/test/StdStorage.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

import {stdStorage, StdStorage} from "../src/StdStorage.sol";
import {Test} from "../src/Test.sol";

contract StdStorageTest is Test {
    using stdStorage for StdStorage;

    StorageTest internal test;

    function setUp() public {
        test = new StorageTest();
    }

    function test_StorageHidden() public {
        assertEq(uint256(keccak256("my.random.var")), stdstore.target(address(test)).sig("hidden()").find());
    }

    function test_StorageObvious() public {
        assertEq(uint256(0), stdstore.target(address(test)).sig("exists()").find());
    }

    function test_StorageExtraSload() public {
        assertEq(16, stdstore.target(address(test)).sig(test.extra_sload.selector).find());
    }

    function test_StorageCheckedWriteHidden() public {
        stdstore.target(address(test)).sig(test.hidden.selector).checked_write(100);
        assertEq(uint256(test.hidden()), 100);
    }

    function test_StorageCheckedWriteObvious() public {
        stdstore.target(address(test)).sig(test.exists.selector).checked_write(100);
        assertEq(test.exists(), 100);
    }

    function test_StorageCheckedWriteSignedIntegerHidden() public {
        stdstore.target(address(test)).sig(test.hidden.selector).checked_write_int(-100);
        assertEq(int256(uint256(test.hidden())), -100);
    }

    function test_StorageCheckedWriteSignedIntegerObvious() public {
        stdstore.target(address(test)).sig(test.tG.selector).checked_write_int(-100);
        assertEq(test.tG(), -100);
    }

    function test_StorageMapStructA() public {
        uint256 slot =
            stdstore.target(address(test)).sig(test.map_struct.selector).with_key(address(this)).depth(0).find();
        assertEq(uint256(keccak256(abi.encode(address(this), 4))), slot);
    }

    function test_StorageMapStructB() public {
        uint256 slot =
            stdstore.target(address(test)).sig(test.map_struct.selector).with_key(address(this)).depth(1).find();
        assertEq(uint256(keccak256(abi.encode(address(this), 4))) + 1, slot);
    }

    function test_StorageDeepMap() public {
        uint256 slot = stdstore.target(address(test)).sig(test.deep_map.selector).with_key(address(this)).with_key(
            address(this)
        ).find();
        assertEq(uint256(keccak256(abi.encode(address(this), keccak256(abi.encode(address(this), uint256(5)))))), slot);
    }

    function test_StorageCheckedWriteDeepMap() public {
        stdstore.target(address(test)).sig(test.deep_map.selector).with_key(address(this)).with_key(address(this))
            .checked_write(100);
        assertEq(100, test.deep_map(address(this), address(this)));
    }

    function test_StorageDeepMapStructA() public {
        uint256 slot = stdstore.target(address(test)).sig(test.deep_map_struct.selector).with_key(address(this))
            .with_key(address(this)).depth(0).find();
        assertEq(
            bytes32(uint256(keccak256(abi.encode(address(this), keccak256(abi.encode(address(this), uint256(6)))))) + 0),
            bytes32(slot)
        );
    }

    function test_StorageDeepMapStructB() public {
        uint256 slot = stdstore.target(address(test)).sig(test.deep_map_struct.selector).with_key(address(this))
            .with_key(address(this)).depth(1).find();
        assertEq(
            bytes32(uint256(keccak256(abi.encode(address(this), keccak256(abi.encode(address(this), uint256(6)))))) + 1),
            bytes32(slot)
        );
    }

    function test_StorageCheckedWriteDeepMapStructA() public {
        stdstore.target(address(test)).sig(test.deep_map_struct.selector).with_key(address(this)).with_key(
            address(this)
        ).depth(0).checked_write(100);
        (uint256 a, uint256 b) = test.deep_map_struct(address(this), address(this));
        assertEq(100, a);
        assertEq(0, b);
    }

    function test_StorageCheckedWriteDeepMapStructB() public {
        stdstore.target(address(test)).sig(test.deep_map_struct.selector).with_key(address(this)).with_key(
            address(this)
        ).depth(1).checked_write(100);
        (uint256 a, uint256 b) = test.deep_map_struct(address(this), address(this));
        assertEq(0, a);
        assertEq(100, b);
    }

    function test_StorageCheckedWriteMapStructA() public {
        stdstore.target(address(test)).sig(test.map_struct.selector).with_key(address(this)).depth(0).checked_write(100);
        (uint256 a, uint256 b) = test.map_struct(address(this));
        assertEq(a, 100);
        assertEq(b, 0);
    }

    function test_StorageCheckedWriteMapStructB() public {
        stdstore.target(address(test)).sig(test.map_struct.selector).with_key(address(this)).depth(1).checked_write(100);
        (uint256 a, uint256 b) = test.map_struct(address(this));
        assertEq(a, 0);
        assertEq(b, 100);
    }

    function test_StorageStructA() public {
        uint256 slot = stdstore.target(address(test)).sig(test.basic.selector).depth(0).find();
        assertEq(uint256(7), slot);
    }

    function test_StorageStructB() public {
        uint256 slot = stdstore.target(address(test)).sig(test.basic.selector).depth(1).find();
        assertEq(uint256(7) + 1, slot);
    }

    function test_StorageCheckedWriteStructA() public {
        stdstore.target(address(test)).sig(test.basic.selector).depth(0).checked_write(100);
        (uint256 a, uint256 b) = test.basic();
        assertEq(a, 100);
        assertEq(b, 1337);
    }

    function test_StorageCheckedWriteStructB() public {
        stdstore.target(address(test)).sig(test.basic.selector).depth(1).checked_write(100);
        (uint256 a, uint256 b) = test.basic();
        assertEq(a, 1337);
        assertEq(b, 100);
    }

    function test_StorageMapAddrFound() public {
        uint256 slot = stdstore.target(address(test)).sig(test.map_addr.selector).with_key(address(this)).find();
        assertEq(uint256(keccak256(abi.encode(address(this), uint256(1)))), slot);
    }

    function test_StorageMapAddrRoot() public {
        (uint256 slot, bytes32 key) =
            stdstore.target(address(test)).sig(test.map_addr.selector).with_key(address(this)).parent();
        assertEq(address(uint160(uint256(key))), address(this));
        assertEq(uint256(1), slot);
        slot = stdstore.target(address(test)).sig(test.map_addr.selector).with_key(address(this)).root();
        assertEq(uint256(1), slot);
    }

    function test_StorageMapUintFound() public {
        uint256 slot = stdstore.target(address(test)).sig(test.map_uint.selector).with_key(100).find();
        assertEq(uint256(keccak256(abi.encode(100, uint256(2)))), slot);
    }

    function test_StorageCheckedWriteMapUint() public {
        stdstore.target(address(test)).sig(test.map_uint.selector).with_key(100).checked_write(100);
        assertEq(100, test.map_uint(100));
    }

    function test_StorageCheckedWriteMapAddr() public {
        stdstore.target(address(test)).sig(test.map_addr.selector).with_key(address(this)).checked_write(100);
        assertEq(100, test.map_addr(address(this)));
    }

    function test_StorageCheckedWriteMapBool() public {
        stdstore.target(address(test)).sig(test.map_bool.selector).with_key(address(this)).checked_write(true);
        assertTrue(test.map_bool(address(this)));
    }

    function testFuzz_StorageCheckedWriteMapPacked(address addr, uint128 value) public {
        stdstore.enable_packed_slots().target(address(test)).sig(test.read_struct_lower.selector).with_key(addr)
            .checked_write(value);
        assertEq(test.read_struct_lower(addr), value);

        stdstore.enable_packed_slots().target(address(test)).sig(test.read_struct_upper.selector).with_key(addr)
            .checked_write(value);
        assertEq(test.read_struct_upper(addr), value);
    }

    function test_StorageCheckedWriteMapPackedFullSuccess() public {
        uint256 full = test.map_packed(address(1337));
        // keep upper 128, set lower 128 to 1337
        full = (full & (uint256((1 << 128) - 1) << 128)) | 1337;
        stdstore.target(address(test)).sig(test.map_packed.selector).with_key(address(uint160(1337))).checked_write(
            full
        );
        assertEq(1337, test.read_struct_lower(address(1337)));
    }

    function test_RevertStorageConst() public {
        StorageTestTarget target = new StorageTestTarget(test);

        vm.expectRevert("stdStorage find(StdStorage): No storage use detected for target.");
        target.expectRevertStorageConst();
    }

    function testFuzz_StorageNativePack(uint248 val1, uint248 val2, bool boolVal1, bool boolVal2) public {
        stdstore.enable_packed_slots().target(address(test)).sig(test.tA.selector).checked_write(val1);
        stdstore.enable_packed_slots().target(address(test)).sig(test.tB.selector).checked_write(boolVal1);
        stdstore.enable_packed_slots().target(address(test)).sig(test.tC.selector).checked_write(boolVal2);
        stdstore.enable_packed_slots().target(address(test)).sig(test.tD.selector).checked_write(val2);

        assertEq(test.tA(), val1);
        assertEq(test.tB(), boolVal1);
        assertEq(test.tC(), boolVal2);
        assertEq(test.tD(), val2);
    }

    function test_StorageReadBytes32() public {
        bytes32 val = stdstore.target(address(test)).sig(test.tE.selector).read_bytes32();
        assertEq(val, hex"1337");
    }

    function test_StorageReadBool_False() public {
        bool val = stdstore.target(address(test)).sig(test.tB.selector).read_bool();
        assertEq(val, false);
    }

    function test_StorageReadBool_True() public {
        bool val = stdstore.target(address(test)).sig(test.tH.selector).read_bool();
        assertEq(val, true);
    }

    function test_RevertIf_ReadingNonBoolValue() public {
        vm.expectRevert("stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.");
        this.readNonBoolValue();
    }

    function readNonBoolValue() public {
        stdstore.target(address(test)).sig(test.tE.selector).read_bool();
    }

    function test_StorageReadAddress() public {
        address val = stdstore.target(address(test)).sig(test.tF.selector).read_address();
        assertEq(val, address(1337));
    }

    function test_StorageReadUint() public {
        uint256 val = stdstore.target(address(test)).sig(test.exists.selector).read_uint();
        assertEq(val, 1);
    }

    function test_StorageReadInt() public {
        int256 val = stdstore.target(address(test)).sig(test.tG.selector).read_int();
        assertEq(val, type(int256).min);
    }

    function testFuzz_Packed(uint256 val, uint8 elemToGet) public {
        // This function tries an assortment of packed slots, shifts meaning number of elements
        // that are packed. Shiftsizes are the size of each element, i.e. 8 means a data type that is 8 bits, 16 == 16 bits, etc.
        // Combined, these determine how a slot is packed. Making it random is too hard to avoid global rejection limit
        // and make it performant.

        // change the number of shifts
        for (uint256 i = 1; i < 5; i++) {
            uint256 shifts = i;

            elemToGet = uint8(bound(elemToGet, 0, shifts - 1));

            uint256[] memory shiftSizes = new uint256[](shifts);
            for (uint256 j; j < shifts; j++) {
                shiftSizes[j] = 8 * (j + 1);
            }

            test.setRandomPacking(val);

            uint256 leftBits;
            uint256 rightBits;
            for (uint256 j; j < shiftSizes.length; j++) {
                if (j < elemToGet) {
                    leftBits += shiftSizes[j];
                } else if (elemToGet != j) {
                    rightBits += shiftSizes[j];
                }
            }

            // we may have some right bits unaccounted for
            leftBits += 256 - (leftBits + shiftSizes[elemToGet] + rightBits);
            // clear left bits, then clear right bits and realign
            uint256 expectedValToRead = (val << leftBits) >> (leftBits + rightBits);

            uint256 readVal = stdstore.target(address(test)).enable_packed_slots().sig(
                "getRandomPacked(uint8,uint8[],uint8)"
            ).with_calldata(abi.encode(shifts, shiftSizes, elemToGet)).read_uint();

            assertEq(readVal, expectedValToRead);
        }
    }

    function testFuzz_Packed2(uint256 nvars, uint256 seed) public {
        // Number of random variables to generate.
        nvars = bound(nvars, 1, 20);

        // This will decrease as we generate values in the below loop.
        uint256 bitsRemaining = 256;

        // Generate a random value and size for each variable.
        uint256[] memory vals = new uint256[](nvars);
        uint256[] memory sizes = new uint256[](nvars);
        uint256[] memory offsets = new uint256[](nvars);

        for (uint256 i = 0; i < nvars; i++) {
            // Generate a random value and size.
            offsets[i] = i == 0 ? 0 : offsets[i - 1] + sizes[i - 1];

            uint256 nvarsRemaining = nvars - i;
            uint256 maxVarSize = bitsRemaining - nvarsRemaining + 1;
            sizes[i] = bound(uint256(keccak256(abi.encodePacked(seed, i + 256))), 1, maxVarSize);
            bitsRemaining -= sizes[i];

            uint256 maxVal;
            uint256 varSize = sizes[i];
            assembly {
                // mask = (1 << varSize) - 1
                maxVal := sub(shl(varSize, 1), 1)
            }
            vals[i] = bound(uint256(keccak256(abi.encodePacked(seed, i))), 0, maxVal);
        }

        // Pack all values into the slot.
        for (uint256 i = 0; i < nvars; i++) {
            stdstore.enable_packed_slots().target(address(test)).sig("getRandomPacked(uint256,uint256)").with_key(
                sizes[i]
            ).with_key(offsets[i]).checked_write(vals[i]);
        }

        // Verify the read data matches.
        for (uint256 i = 0; i < nvars; i++) {
            uint256 readVal = stdstore.enable_packed_slots().target(address(test)).sig(
                "getRandomPacked(uint256,uint256)"
            ).with_key(sizes[i]).with_key(offsets[i]).read_uint();

            uint256 retVal = test.getRandomPacked(sizes[i], offsets[i]);

            assertEq(readVal, vals[i]);
            assertEq(retVal, vals[i]);
        }
    }

    function testEdgeCaseArray() public {
        stdstore.target(address(test)).sig("edgeCaseArray(uint256)").with_key(uint256(0)).checked_write(1);
        assertEq(test.edgeCaseArray(0), 1);
    }
}

contract StorageTestTarget {
    using stdStorage for StdStorage;

    StdStorage internal stdstore;
    StorageTest internal test;

    constructor(StorageTest test_) {
        test = test_;
    }

    function expectRevertStorageConst() public {
        stdstore.target(address(test)).sig("const()").find();
    }
}

contract StorageTest {
    uint256 public exists = 1;
    mapping(address => uint256) public map_addr;
    mapping(uint256 => uint256) public map_uint;
    mapping(address => uint256) public map_packed;
    mapping(address => UnpackedStruct) public map_struct;
    mapping(address => mapping(address => uint256)) public deep_map;
    mapping(address => mapping(address => UnpackedStruct)) public deep_map_struct;
    UnpackedStruct public basic;

    uint248 public tA;
    bool public tB;

    bool public tC = false;
    uint248 public tD = 1;

    struct UnpackedStruct {
        uint256 a;
        uint256 b;
    }

    mapping(address => bool) public map_bool;

    bytes32 public tE = hex"1337";
    address public tF = address(1337);
    int256 public tG = type(int256).min;
    bool public tH = true;
    bytes32 private tI = ~bytes32(hex"1337");

    uint256 randomPacking;

    // Array with length matching values of elements.
    uint256[] public edgeCaseArray = [3, 3, 3];

    constructor() {
        basic = UnpackedStruct({a: 1337, b: 1337});

        uint256 two = (1 << 128) | 1;
        map_packed[msg.sender] = two;
        map_packed[address(uint160(1337))] = 1 << 128;
    }

    function read_struct_upper(address who) public view returns (uint256) {
        return map_packed[who] >> 128;
    }

    function read_struct_lower(address who) public view returns (uint256) {
        return map_packed[who] & ((1 << 128) - 1);
    }

    function hidden() public view returns (bytes32 t) {
        bytes32 slot = keccak256("my.random.var");
        /// @solidity memory-safe-assembly
        assembly {
            t := sload(slot)
        }
    }

    function const() public pure returns (bytes32 t) {
        t = bytes32(hex"1337");
    }

    function extra_sload() public view returns (bytes32 t) {
        // trigger read on slot `tE`, and make a staticcall to make sure compiler doesn't optimize this SLOAD away
        assembly {
            pop(staticcall(gas(), sload(tE.slot), 0, 0, 0, 0))
        }
        t = tI;
    }

    function setRandomPacking(uint256 val) public {
        randomPacking = val;
    }

    function _getMask(uint256 size) internal pure returns (uint256 mask) {
        assembly {
            // mask = (1 << size) - 1
            mask := sub(shl(size, 1), 1)
        }
    }

    function setRandomPacking(uint256 val, uint256 size, uint256 offset) public {
        // Generate mask based on the size of the value
        uint256 mask = _getMask(size);
        // Zero out all bits for the word we're about to set
        uint256 cleanedWord = randomPacking & ~(mask << offset);
        // Place val in the correct spot of the cleaned word
        randomPacking = cleanedWord | val << offset;
    }

    function getRandomPacked(uint256 size, uint256 offset) public view returns (uint256) {
        // Generate mask based on the size of the value
        uint256 mask = _getMask(size);
        // Shift to place the bits in the correct position, and use mask to zero out remaining bits
        return (randomPacking >> offset) & mask;
    }

    function getRandomPacked(uint8 shifts, uint8[] memory shiftSizes, uint8 elem) public view returns (uint256) {
        require(elem < shifts, "!elem");
        uint256 leftBits;
        uint256 rightBits;

        for (uint256 i; i < shiftSizes.length; i++) {
            if (i < elem) {
                leftBits += shiftSizes[i];
            } else if (elem != i) {
                rightBits += shiftSizes[i];
            }
        }

        // we may have some right bits unaccounted for
        leftBits += 256 - (leftBits + shiftSizes[elem] + rightBits);

        // clear left bits, then clear right bits and realign
        return (randomPacking << leftBits) >> (leftBits + rightBits);
    }
}

================
File: lib/forge-std/test/StdStyle.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

import {Test, console2, StdStyle} from "../src/Test.sol";

contract StdStyleTest is Test {
    function test_StyleColor() public pure {
        console2.log(StdStyle.red("StdStyle.red String Test"));
        console2.log(StdStyle.red(uint256(10e18)));
        console2.log(StdStyle.red(int256(-10e18)));
        console2.log(StdStyle.red(true));
        console2.log(StdStyle.red(address(0)));
        console2.log(StdStyle.redBytes(hex"7109709ECfa91a80626fF3989D68f67F5b1DD12D"));
        console2.log(StdStyle.redBytes32("StdStyle.redBytes32"));
        console2.log(StdStyle.green("StdStyle.green String Test"));
        console2.log(StdStyle.green(uint256(10e18)));
        console2.log(StdStyle.green(int256(-10e18)));
        console2.log(StdStyle.green(true));
        console2.log(StdStyle.green(address(0)));
        console2.log(StdStyle.greenBytes(hex"7109709ECfa91a80626fF3989D68f67F5b1DD12D"));
        console2.log(StdStyle.greenBytes32("StdStyle.greenBytes32"));
        console2.log(StdStyle.yellow("StdStyle.yellow String Test"));
        console2.log(StdStyle.yellow(uint256(10e18)));
        console2.log(StdStyle.yellow(int256(-10e18)));
        console2.log(StdStyle.yellow(true));
        console2.log(StdStyle.yellow(address(0)));
        console2.log(StdStyle.yellowBytes(hex"7109709ECfa91a80626fF3989D68f67F5b1DD12D"));
        console2.log(StdStyle.yellowBytes32("StdStyle.yellowBytes32"));
        console2.log(StdStyle.blue("StdStyle.blue String Test"));
        console2.log(StdStyle.blue(uint256(10e18)));
        console2.log(StdStyle.blue(int256(-10e18)));
        console2.log(StdStyle.blue(true));
        console2.log(StdStyle.blue(address(0)));
        console2.log(StdStyle.blueBytes(hex"7109709ECfa91a80626fF3989D68f67F5b1DD12D"));
        console2.log(StdStyle.blueBytes32("StdStyle.blueBytes32"));
        console2.log(StdStyle.magenta("StdStyle.magenta String Test"));
        console2.log(StdStyle.magenta(uint256(10e18)));
        console2.log(StdStyle.magenta(int256(-10e18)));
        console2.log(StdStyle.magenta(true));
        console2.log(StdStyle.magenta(address(0)));
        console2.log(StdStyle.magentaBytes(hex"7109709ECfa91a80626fF3989D68f67F5b1DD12D"));
        console2.log(StdStyle.magentaBytes32("StdStyle.magentaBytes32"));
        console2.log(StdStyle.cyan("StdStyle.cyan String Test"));
        console2.log(StdStyle.cyan(uint256(10e18)));
        console2.log(StdStyle.cyan(int256(-10e18)));
        console2.log(StdStyle.cyan(true));
        console2.log(StdStyle.cyan(address(0)));
        console2.log(StdStyle.cyanBytes(hex"7109709ECfa91a80626fF3989D68f67F5b1DD12D"));
        console2.log(StdStyle.cyanBytes32("StdStyle.cyanBytes32"));
    }

    function test_StyleFontWeight() public pure {
        console2.log(StdStyle.bold("StdStyle.bold String Test"));
        console2.log(StdStyle.bold(uint256(10e18)));
        console2.log(StdStyle.bold(int256(-10e18)));
        console2.log(StdStyle.bold(address(0)));
        console2.log(StdStyle.bold(true));
        console2.log(StdStyle.boldBytes(hex"7109709ECfa91a80626fF3989D68f67F5b1DD12D"));
        console2.log(StdStyle.boldBytes32("StdStyle.boldBytes32"));
        console2.log(StdStyle.dim("StdStyle.dim String Test"));
        console2.log(StdStyle.dim(uint256(10e18)));
        console2.log(StdStyle.dim(int256(-10e18)));
        console2.log(StdStyle.dim(address(0)));
        console2.log(StdStyle.dim(true));
        console2.log(StdStyle.dimBytes(hex"7109709ECfa91a80626fF3989D68f67F5b1DD12D"));
        console2.log(StdStyle.dimBytes32("StdStyle.dimBytes32"));
        console2.log(StdStyle.italic("StdStyle.italic String Test"));
        console2.log(StdStyle.italic(uint256(10e18)));
        console2.log(StdStyle.italic(int256(-10e18)));
        console2.log(StdStyle.italic(address(0)));
        console2.log(StdStyle.italic(true));
        console2.log(StdStyle.italicBytes(hex"7109709ECfa91a80626fF3989D68f67F5b1DD12D"));
        console2.log(StdStyle.italicBytes32("StdStyle.italicBytes32"));
        console2.log(StdStyle.underline("StdStyle.underline String Test"));
        console2.log(StdStyle.underline(uint256(10e18)));
        console2.log(StdStyle.underline(int256(-10e18)));
        console2.log(StdStyle.underline(address(0)));
        console2.log(StdStyle.underline(true));
        console2.log(StdStyle.underlineBytes(hex"7109709ECfa91a80626fF3989D68f67F5b1DD12D"));
        console2.log(StdStyle.underlineBytes32("StdStyle.underlineBytes32"));
        console2.log(StdStyle.inverse("StdStyle.inverse String Test"));
        console2.log(StdStyle.inverse(uint256(10e18)));
        console2.log(StdStyle.inverse(int256(-10e18)));
        console2.log(StdStyle.inverse(address(0)));
        console2.log(StdStyle.inverse(true));
        console2.log(StdStyle.inverseBytes(hex"7109709ECfa91a80626fF3989D68f67F5b1DD12D"));
        console2.log(StdStyle.inverseBytes32("StdStyle.inverseBytes32"));
    }

    function test_StyleCombined() public pure {
        console2.log(StdStyle.red(StdStyle.bold("Red Bold String Test")));
        console2.log(StdStyle.green(StdStyle.dim(uint256(10e18))));
        console2.log(StdStyle.yellow(StdStyle.italic(int256(-10e18))));
        console2.log(StdStyle.blue(StdStyle.underline(address(0))));
        console2.log(StdStyle.magenta(StdStyle.inverse(true)));
    }

    function test_StyleCustom() public pure {
        console2.log(h1("Custom Style 1"));
        console2.log(h2("Custom Style 2"));
    }

    function h1(string memory a) private pure returns (string memory) {
        return StdStyle.cyan(StdStyle.inverse(StdStyle.bold(a)));
    }

    function h2(string memory a) private pure returns (string memory) {
        return StdStyle.magenta(StdStyle.bold(StdStyle.underline(a)));
    }
}

================
File: lib/forge-std/test/StdToml.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

import {Test, stdToml} from "../src/Test.sol";

contract StdTomlTest is Test {
    using stdToml for string;

    string root;
    string path;

    function setUp() public {
        root = vm.projectRoot();
        path = string.concat(root, "/test/fixtures/test.toml");
    }

    struct SimpleToml {
        uint256 a;
        string b;
    }

    struct NestedToml {
        uint256 a;
        string b;
        SimpleToml c;
    }

    function test_readToml() public view {
        string memory json = vm.readFile(path);
        assertEq(json.readUint(".a"), 123);
    }

    function test_writeToml() public {
        string memory json = "json";
        json.serialize("a", uint256(123));
        string memory semiFinal = json.serialize("b", string("test"));
        string memory finalJson = json.serialize("c", semiFinal);
        finalJson.write(path);

        string memory toml = vm.readFile(path);
        bytes memory data = toml.parseRaw("$");
        NestedToml memory decodedData = abi.decode(data, (NestedToml));

        assertEq(decodedData.a, 123);
        assertEq(decodedData.b, "test");
        assertEq(decodedData.c.a, 123);
        assertEq(decodedData.c.b, "test");
    }
}

================
File: lib/forge-std/test/StdUtils.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

import {Test, StdUtils} from "../src/Test.sol";

contract StdUtilsMock is StdUtils {
    // We deploy a mock version so we can properly test expected reverts.
    function exposed_getTokenBalances(address token, address[] memory addresses)
        external
        returns (uint256[] memory balances)
    {
        return getTokenBalances(token, addresses);
    }

    function exposed_bound(int256 num, int256 min, int256 max) external pure returns (int256) {
        return bound(num, min, max);
    }

    function exposed_bound(uint256 num, uint256 min, uint256 max) external pure returns (uint256) {
        return bound(num, min, max);
    }

    function exposed_bytesToUint(bytes memory b) external pure returns (uint256) {
        return bytesToUint(b);
    }
}

contract StdUtilsTest is Test {
    /*//////////////////////////////////////////////////////////////////////////
                                     BOUND UINT
    //////////////////////////////////////////////////////////////////////////*/

    function test_Bound() public pure {
        assertEq(bound(uint256(5), 0, 4), 0);
        assertEq(bound(uint256(0), 69, 69), 69);
        assertEq(bound(uint256(0), 68, 69), 68);
        assertEq(bound(uint256(10), 150, 190), 174);
        assertEq(bound(uint256(300), 2800, 3200), 3107);
        assertEq(bound(uint256(9999), 1337, 6666), 4669);
    }

    function test_Bound_WithinRange() public pure {
        assertEq(bound(uint256(51), 50, 150), 51);
        assertEq(bound(uint256(51), 50, 150), bound(bound(uint256(51), 50, 150), 50, 150));
        assertEq(bound(uint256(149), 50, 150), 149);
        assertEq(bound(uint256(149), 50, 150), bound(bound(uint256(149), 50, 150), 50, 150));
    }

    function test_Bound_EdgeCoverage() public pure {
        assertEq(bound(uint256(0), 50, 150), 50);
        assertEq(bound(uint256(1), 50, 150), 51);
        assertEq(bound(uint256(2), 50, 150), 52);
        assertEq(bound(uint256(3), 50, 150), 53);
        assertEq(bound(type(uint256).max, 50, 150), 150);
        assertEq(bound(type(uint256).max - 1, 50, 150), 149);
        assertEq(bound(type(uint256).max - 2, 50, 150), 148);
        assertEq(bound(type(uint256).max - 3, 50, 150), 147);
    }

    function testFuzz_Bound_DistributionIsEven(uint256 min, uint256 size) public pure {
        size = size % 100 + 1;
        min = bound(min, UINT256_MAX / 2, UINT256_MAX / 2 + size);
        uint256 max = min + size - 1;
        uint256 result;

        for (uint256 i = 1; i <= size * 4; ++i) {
            // x > max
            result = bound(max + i, min, max);
            assertEq(result, min + (i - 1) % size);
            // x < min
            result = bound(min - i, min, max);
            assertEq(result, max - (i - 1) % size);
        }
    }

    function testFuzz_Bound(uint256 num, uint256 min, uint256 max) public pure {
        if (min > max) (min, max) = (max, min);

        uint256 result = bound(num, min, max);

        assertGe(result, min);
        assertLe(result, max);
        assertEq(result, bound(result, min, max));
        if (num >= min && num <= max) assertEq(result, num);
    }

    function test_BoundUint256Max() public pure {
        assertEq(bound(0, type(uint256).max - 1, type(uint256).max), type(uint256).max - 1);
        assertEq(bound(1, type(uint256).max - 1, type(uint256).max), type(uint256).max);
    }

    function test_RevertIf_BoundMaxLessThanMin() public {
        // We deploy a mock version so we can properly test the revert.
        StdUtilsMock stdUtils = new StdUtilsMock();

        vm.expectRevert(bytes("StdUtils bound(uint256,uint256,uint256): Max is less than min."));
        stdUtils.exposed_bound(uint256(5), 100, 10);
    }

    function testFuzz_RevertIf_BoundMaxLessThanMin(uint256 num, uint256 min, uint256 max) public {
        // We deploy a mock version so we can properly test the revert.
        StdUtilsMock stdUtils = new StdUtilsMock();

        vm.assume(min > max);
        vm.expectRevert(bytes("StdUtils bound(uint256,uint256,uint256): Max is less than min."));
        stdUtils.exposed_bound(num, min, max);
    }

    /*//////////////////////////////////////////////////////////////////////////
                                     BOUND INT
    //////////////////////////////////////////////////////////////////////////*/

    function test_BoundInt() public pure {
        assertEq(bound(-3, 0, 4), 2);
        assertEq(bound(0, -69, -69), -69);
        assertEq(bound(0, -69, -68), -68);
        assertEq(bound(-10, 150, 190), 154);
        assertEq(bound(-300, 2800, 3200), 2908);
        assertEq(bound(9999, -1337, 6666), 1995);
    }

    function test_BoundInt_WithinRange() public pure {
        assertEq(bound(51, -50, 150), 51);
        assertEq(bound(51, -50, 150), bound(bound(51, -50, 150), -50, 150));
        assertEq(bound(149, -50, 150), 149);
        assertEq(bound(149, -50, 150), bound(bound(149, -50, 150), -50, 150));
    }

    function test_BoundInt_EdgeCoverage() public pure {
        assertEq(bound(type(int256).min, -50, 150), -50);
        assertEq(bound(type(int256).min + 1, -50, 150), -49);
        assertEq(bound(type(int256).min + 2, -50, 150), -48);
        assertEq(bound(type(int256).min + 3, -50, 150), -47);
        assertEq(bound(type(int256).min, 10, 150), 10);
        assertEq(bound(type(int256).min + 1, 10, 150), 11);
        assertEq(bound(type(int256).min + 2, 10, 150), 12);
        assertEq(bound(type(int256).min + 3, 10, 150), 13);

        assertEq(bound(type(int256).max, -50, 150), 150);
        assertEq(bound(type(int256).max - 1, -50, 150), 149);
        assertEq(bound(type(int256).max - 2, -50, 150), 148);
        assertEq(bound(type(int256).max - 3, -50, 150), 147);
        assertEq(bound(type(int256).max, -50, -10), -10);
        assertEq(bound(type(int256).max - 1, -50, -10), -11);
        assertEq(bound(type(int256).max - 2, -50, -10), -12);
        assertEq(bound(type(int256).max - 3, -50, -10), -13);
    }

    function testFuzz_BoundInt_DistributionIsEven(int256 min, uint256 size) public pure {
        size = size % 100 + 1;
        min = bound(min, -int256(size / 2), int256(size - size / 2));
        int256 max = min + int256(size) - 1;
        int256 result;

        for (uint256 i = 1; i <= size * 4; ++i) {
            // x > max
            result = bound(max + int256(i), min, max);
            assertEq(result, min + int256((i - 1) % size));
            // x < min
            result = bound(min - int256(i), min, max);
            assertEq(result, max - int256((i - 1) % size));
        }
    }

    function testFuzz_BoundInt(int256 num, int256 min, int256 max) public pure {
        if (min > max) (min, max) = (max, min);

        int256 result = bound(num, min, max);

        assertGe(result, min);
        assertLe(result, max);
        assertEq(result, bound(result, min, max));
        if (num >= min && num <= max) assertEq(result, num);
    }

    function test_BoundIntInt256Max() public pure {
        assertEq(bound(0, type(int256).max - 1, type(int256).max), type(int256).max - 1);
        assertEq(bound(1, type(int256).max - 1, type(int256).max), type(int256).max);
    }

    function test_BoundIntInt256Min() public pure {
        assertEq(bound(0, type(int256).min, type(int256).min + 1), type(int256).min);
        assertEq(bound(1, type(int256).min, type(int256).min + 1), type(int256).min + 1);
    }

    function test_RevertIf_BoundIntMaxLessThanMin() public {
        // We deploy a mock version so we can properly test the revert.
        StdUtilsMock stdUtils = new StdUtilsMock();

        vm.expectRevert(bytes("StdUtils bound(int256,int256,int256): Max is less than min."));
        stdUtils.exposed_bound(-5, 100, 10);
    }

    function testFuzz_RevertIf_BoundIntMaxLessThanMin(int256 num, int256 min, int256 max) public {
        // We deploy a mock version so we can properly test the revert.
        StdUtilsMock stdUtils = new StdUtilsMock();

        vm.assume(min > max);
        vm.expectRevert(bytes("StdUtils bound(int256,int256,int256): Max is less than min."));
        stdUtils.exposed_bound(num, min, max);
    }

    /*//////////////////////////////////////////////////////////////////////////
                                BOUND PRIVATE KEY
    //////////////////////////////////////////////////////////////////////////*/

    function test_BoundPrivateKey() public pure {
        assertEq(boundPrivateKey(0), 1);
        assertEq(boundPrivateKey(1), 1);
        assertEq(boundPrivateKey(300), 300);
        assertEq(boundPrivateKey(9999), 9999);
        assertEq(boundPrivateKey(SECP256K1_ORDER - 1), SECP256K1_ORDER - 1);
        assertEq(boundPrivateKey(SECP256K1_ORDER), 1);
        assertEq(boundPrivateKey(SECP256K1_ORDER + 1), 2);
        assertEq(boundPrivateKey(UINT256_MAX), UINT256_MAX & SECP256K1_ORDER - 1); // x&y is equivalent to x-x%y
    }

    /*//////////////////////////////////////////////////////////////////////////
                                   BYTES TO UINT
    //////////////////////////////////////////////////////////////////////////*/

    function test_BytesToUint() external pure {
        bytes memory maxUint = hex"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";
        bytes memory two = hex"02";
        bytes memory millionEther = hex"d3c21bcecceda1000000";

        assertEq(bytesToUint(maxUint), type(uint256).max);
        assertEq(bytesToUint(two), 2);
        assertEq(bytesToUint(millionEther), 1_000_000 ether);
    }

    function test_RevertIf_BytesLengthExceeds32() external {
        // We deploy a mock version so we can properly test the revert.
        StdUtilsMock stdUtils = new StdUtilsMock();

        bytes memory thirty3Bytes = hex"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";
        vm.expectRevert("StdUtils bytesToUint(bytes): Bytes length exceeds 32.");
        stdUtils.exposed_bytesToUint(thirty3Bytes);
    }

    /*//////////////////////////////////////////////////////////////////////////
                               COMPUTE CREATE ADDRESS
    //////////////////////////////////////////////////////////////////////////*/

    function test_ComputeCreateAddress() external pure {
        address deployer = 0x6C9FC64A53c1b71FB3f9Af64d1ae3A4931A5f4E9;
        uint256 nonce = 14;
        address createAddress = computeCreateAddress(deployer, nonce);
        assertEq(createAddress, 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);
    }

    /*//////////////////////////////////////////////////////////////////////////
                              COMPUTE CREATE2 ADDRESS
    //////////////////////////////////////////////////////////////////////////*/

    function test_ComputeCreate2Address() external pure {
        bytes32 salt = bytes32(uint256(31415));
        bytes32 initcodeHash = keccak256(abi.encode(0x6080));
        address deployer = 0x6C9FC64A53c1b71FB3f9Af64d1ae3A4931A5f4E9;
        address create2Address = computeCreate2Address(salt, initcodeHash, deployer);
        assertEq(create2Address, 0xB147a5d25748fda14b463EB04B111027C290f4d3);
    }

    function test_ComputeCreate2AddressWithDefaultDeployer() external pure {
        bytes32 salt = 0xc290c670fde54e5ef686f9132cbc8711e76a98f0333a438a92daa442c71403c0;
        bytes32 initcodeHash = hashInitCode(hex"6080", "");
        assertEq(initcodeHash, 0x1a578b7a4b0b5755db6d121b4118d4bc68fe170dca840c59bc922f14175a76b0);
        address create2Address = computeCreate2Address(salt, initcodeHash);
        assertEq(create2Address, 0xc0ffEe2198a06235aAbFffe5Db0CacF1717f5Ac6);
    }
}

contract StdUtilsForkTest is Test {
    /*//////////////////////////////////////////////////////////////////////////
                                  GET TOKEN BALANCES
    //////////////////////////////////////////////////////////////////////////*/

    address internal SHIB = 0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE;
    address internal SHIB_HOLDER_0 = 0x855F5981e831D83e6A4b4EBFCAdAa68D92333170;
    address internal SHIB_HOLDER_1 = 0x8F509A90c2e47779cA408Fe00d7A72e359229AdA;
    address internal SHIB_HOLDER_2 = 0x0e3bbc0D04fF62211F71f3e4C45d82ad76224385;

    address internal USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
    address internal USDC_HOLDER_0 = 0xDa9CE944a37d218c3302F6B82a094844C6ECEb17;
    address internal USDC_HOLDER_1 = 0x3e67F4721E6d1c41a015f645eFa37BEd854fcf52;

    function setUp() public {
        // All tests of the `getTokenBalances` method are fork tests using live contracts.
        vm.createSelectFork({urlOrAlias: "mainnet", blockNumber: 16_428_900});
    }

    function test_RevertIf_CannotGetTokenBalances_NonTokenContract() external {
        // We deploy a mock version so we can properly test the revert.
        StdUtilsMock stdUtils = new StdUtilsMock();

        // The UniswapV2Factory contract has neither a `balanceOf` function nor a fallback function,
        // so the `balanceOf` call should revert.
        address token = address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);
        address[] memory addresses = new address[](1);
        addresses[0] = USDC_HOLDER_0;

        vm.expectRevert("Multicall3: call failed");
        stdUtils.exposed_getTokenBalances(token, addresses);
    }

    function test_RevertIf_CannotGetTokenBalances_EOA() external {
        // We deploy a mock version so we can properly test the revert.
        StdUtilsMock stdUtils = new StdUtilsMock();

        address eoa = vm.addr({privateKey: 1});
        address[] memory addresses = new address[](1);
        addresses[0] = USDC_HOLDER_0;
        vm.expectRevert("StdUtils getTokenBalances(address,address[]): Token address is not a contract.");
        stdUtils.exposed_getTokenBalances(eoa, addresses);
    }

    function test_GetTokenBalances_Empty() external {
        address[] memory addresses = new address[](0);
        uint256[] memory balances = getTokenBalances(USDC, addresses);
        assertEq(balances.length, 0);
    }

    function test_GetTokenBalances_USDC() external {
        address[] memory addresses = new address[](2);
        addresses[0] = USDC_HOLDER_0;
        addresses[1] = USDC_HOLDER_1;
        uint256[] memory balances = getTokenBalances(USDC, addresses);
        assertEq(balances[0], 159_000_000_000_000);
        assertEq(balances[1], 131_350_000_000_000);
    }

    function test_GetTokenBalances_SHIB() external {
        address[] memory addresses = new address[](3);
        addresses[0] = SHIB_HOLDER_0;
        addresses[1] = SHIB_HOLDER_1;
        addresses[2] = SHIB_HOLDER_2;
        uint256[] memory balances = getTokenBalances(SHIB, addresses);
        assertEq(balances[0], 3_323_256_285_484.42e18);
        assertEq(balances[1], 1_271_702_771_149.99999928e18);
        assertEq(balances[2], 606_357_106_247e18);
    }
}

================
File: lib/forge-std/test/Vm.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0 <0.9.0;

import {Test} from "../src/Test.sol";
import {Vm, VmSafe} from "../src/Vm.sol";

// These tests ensure that functions are never accidentally removed from a Vm interface, or
// inadvertently moved between Vm and VmSafe. These tests must be updated each time a function is
// added to or removed from Vm or VmSafe.
contract VmTest is Test {
    function test_VmInterfaceId() public pure {
        assertEq(type(Vm).interfaceId, bytes4(0xdb28dd7b), "Vm");
    }

    function test_VmSafeInterfaceId() public pure {
        assertEq(type(VmSafe).interfaceId, bytes4(0xb572f44f), "VmSafe");
    }
}

================
File: lib/forge-std/.git
================
gitdir: ../../.git/modules/lib/forge-std

================
File: lib/forge-std/.gitattributes
================
src/Vm.sol linguist-generated

================
File: lib/forge-std/.gitignore
================
cache/
out/
.vscode
.idea

================
File: lib/forge-std/CONTRIBUTING.md
================
## Contributing to Foundry

Thanks for your interest in improving Foundry!

There are multiple opportunities to contribute at any level. It doesn't matter if you are just getting started with Rust or are the most weathered expert, we can use your help.

This document will help you get started. **Do not let the document intimidate you**.
It should be considered as a guide to help you navigate the process.

The [dev Telegram][dev-tg] is available for any concerns you may have that are not covered in this guide.

### Code of Conduct

The Foundry project adheres to the [Rust Code of Conduct][rust-coc]. This code of conduct describes the _minimum_ behavior expected from all contributors.

Instances of violations of the Code of Conduct can be reported by contacting the team at [me@gakonst.com](mailto:me@gakonst.com).

### Ways to contribute

There are fundamentally four ways an individual can contribute:

1. **By opening an issue:** For example, if you believe that you have uncovered a bug
   in Foundry, creating a new issue in the issue tracker is the way to report it.
2. **By adding context:** Providing additional context to existing issues,
   such as screenshots and code snippets, which help resolve issues.
3. **By resolving issues:** Typically this is done in the form of either
   demonstrating that the issue reported is not a problem after all, or more often,
   by opening a pull request that fixes the underlying problem, in a concrete and
   reviewable manner.

**Anybody can participate in any stage of contribution**. We urge you to participate in the discussion
around bugs and participate in reviewing PRs.

### Contributions Related to Spelling and Grammar

At this time, we will not be accepting contributions that only fix spelling or grammatical errors in documentation, code or
elsewhere.

### Asking for help

If you have reviewed existing documentation and still have questions, or you are having problems, you can get help in the following ways:

-   **Asking in the support Telegram:** The [Foundry Support Telegram][support-tg] is a fast and easy way to ask questions.
-   **Opening a discussion:** This repository comes with a discussions board where you can also ask for help. Click the "Discussions" tab at the top.

As Foundry is still in heavy development, the documentation can be a bit scattered.
The [Foundry Book][foundry-book] is our current best-effort attempt at keeping up-to-date information.

### Submitting a bug report

When filing a new bug report in the issue tracker, you will be presented with a basic form to fill out.

If you believe that you have uncovered a bug, please fill out the form to the best of your ability. Do not worry if you cannot answer every detail; just fill in what you can. Contributors will ask follow-up questions if something is unclear.

The most important pieces of information we need in a bug report are:

-   The Foundry version you are on (and that it is up to date)
-   The platform you are on (Windows, macOS, an M1 Mac or Linux)
-   Code snippets if this is happening in relation to testing or building code
-   Concrete steps to reproduce the bug

In order to rule out the possibility of the bug being in your project, the code snippets should be as minimal
as possible. It is better if you can reproduce the bug with a small snippet as opposed to an entire project!

See [this guide][mcve] on how to create a minimal, complete, and verifiable example.

### Submitting a feature request

When adding a feature request in the issue tracker, you will be presented with a basic form to fill out.

Please include as detailed of an explanation as possible of the feature you would like, adding additional context if necessary.

If you have examples of other tools that have the feature you are requesting, please include them as well.

### Resolving an issue

Pull requests are the way concrete changes are made to the code, documentation, and dependencies of Foundry.

Even minor pull requests, such as those fixing wording, are greatly appreciated. Before making a large change, it is usually
a good idea to first open an issue describing the change to solicit feedback and guidance. This will increase
the likelihood of the PR getting merged.

Please make sure that the following commands pass if you have changed the code:

```sh
forge fmt --check
forge test -vvv
```

To make sure your changes are compatible with all compiler version targets, run the following commands:

```sh
forge build --skip test --use solc:0.6.2
forge build --skip test --use solc:0.6.12
forge build --skip test --use solc:0.7.0
forge build --skip test --use solc:0.7.6
forge build --skip test --use solc:0.8.0
```

The CI will also ensure that the code is formatted correctly and that the tests are passing across all compiler version targets.

#### Adding cheatcodes

Please follow the guide outlined in the [cheatcodes](https://github.com/foundry-rs/foundry/blob/master/docs/dev/cheatcodes.md#adding-a-new-cheatcode) documentation of Foundry.

When making modifications to the native cheatcodes or adding new ones, please make sure to run [`./scripts/vm.py`](./scripts/vm.py) to update the cheatcodes in the [`src/Vm.sol`](./src/Vm.sol) file.

By default the script will automatically generate the cheatcodes from the [`cheatcodes.json`](https://raw.githubusercontent.com/foundry-rs/foundry/master/crates/cheatcodes/assets/cheatcodes.json) file but alternatively you can provide a path to a JSON file containing the Vm interface, as generated by Foundry, with the `--from` flag.

```sh
./scripts/vm.py --from path/to/cheatcodes.json
```

It is possible that the resulting [`src/Vm.sol`](./src/Vm.sol) file will have some changes that are not directly related to your changes, this is not a problem.

#### Commits

It is a recommended best practice to keep your changes as logically grouped as possible within individual commits. There is no limit to the number of commits any single pull request may have, and many contributors find it easier to review changes that are split across multiple commits.

That said, if you have a number of commits that are "checkpoints" and don't represent a single logical change, please squash those together.

#### Opening the pull request

From within GitHub, opening a new pull request will present you with a template that should be filled out. Please try your best at filling out the details, but feel free to skip parts if you're not sure what to put.

#### Discuss and update

You will probably get feedback or requests for changes to your pull request.
This is a big part of the submission process, so don't be discouraged! Some contributors may sign off on the pull request right away, others may have more detailed comments or feedback.
This is a necessary part of the process in order to evaluate whether the changes are correct and necessary.

**Any community member can review a PR, so you might get conflicting feedback**.
Keep an eye out for comments from code owners to provide guidance on conflicting feedback.

#### Reviewing pull requests

**Any Foundry community member is welcome to review any pull request**.

All contributors who choose to review and provide feedback on pull requests have a responsibility to both the project and individual making the contribution. Reviews and feedback must be helpful, insightful, and geared towards improving the contribution as opposed to simply blocking it. If there are reasons why you feel the PR should not be merged, explain what those are. Do not expect to be able to block a PR from advancing simply because you say "no" without giving an explanation. Be open to having your mind changed. Be open to working _with_ the contributor to make the pull request better.

Reviews that are dismissive or disrespectful of the contributor or any other reviewers are strictly counter to the Code of Conduct.

When reviewing a pull request, the primary goals are for the codebase to improve and for the person submitting the request to succeed. **Even if a pull request is not merged, the submitter should come away from the experience feeling like their effort was not unappreciated**. Every PR from a new contributor is an opportunity to grow the community.

##### Review a bit at a time

Do not overwhelm new contributors.

It is tempting to micro-optimize and make everything about relative performance, perfect grammar, or exact style matches. Do not succumb to that temptation..

Focus first on the most significant aspects of the change:

1. Does this change make sense for Foundry?
2. Does this change make Foundry better, even if only incrementally?
3. Are there clear bugs or larger scale issues that need attending?
4. Are the commit messages readable and correct? If it contains a breaking change, is it clear enough?

Note that only **incremental** improvement is needed to land a PR. This means that the PR does not need to be perfect, only better than the status quo. Follow-up PRs may be opened to continue iterating.

When changes are necessary, _request_ them, do not _demand_ them, and **do not assume that the submitter already knows how to add a test or run a benchmark**.

Specific performance optimization techniques, coding styles and conventions change over time. The first impression you give to a new contributor never does.

Nits (requests for small changes that are not essential) are fine, but try to avoid stalling the pull request. Most nits can typically be fixed by the Foundry maintainers merging the pull request, but they can also be an opportunity for the contributor to learn a bit more about the project.

It is always good to clearly indicate nits when you comment, e.g.: `Nit: change foo() to bar(). But this is not blocking`.

If your comments were addressed but were not folded after new commits, or if they proved to be mistaken, please, [hide them][hiding-a-comment] with the appropriate reason to keep the conversation flow concise and relevant.

##### Be aware of the person behind the code

Be aware that _how_ you communicate requests and reviews in your feedback can have a significant impact on the success of the pull request. Yes, we may merge a particular change that makes Foundry better, but the individual might just not want to have anything to do with Foundry ever again. The goal is not just having good code.

##### Abandoned or stale pull requests

If a pull request appears to be abandoned or stalled, it is polite to first check with the contributor to see if they intend to continue the work before checking if they would mind if you took it over (especially if it just has nits left). When doing so, it is courteous to give the original contributor credit for the work they started, either by preserving their name and e-mail address in the commit log, or by using the `Author: ` or `Co-authored-by: ` metadata tag in the commits.

_Adapted from the [ethers-rs contributing guide](https://github.com/gakonst/ethers-rs/blob/master/CONTRIBUTING.md)_.

### Releasing

Releases are automatically done by the release workflow when a tag is pushed, however, these steps still need to be taken:

1. Ensure that the versions in the relevant `Cargo.toml` files are up-to-date.
2. Update documentation links
3. Perform a final audit for breaking changes.

[rust-coc]: https://github.com/rust-lang/rust/blob/master/CODE_OF_CONDUCT.md
[dev-tg]: https://t.me/foundry_rs
[foundry-book]: https://github.com/foundry-rs/foundry-book
[support-tg]: https://t.me/foundry_support
[mcve]: https://stackoverflow.com/help/mcve
[hiding-a-comment]: https://help.github.com/articles/managing-disruptive-comments/#hiding-a-comment

================
File: lib/forge-std/foundry.toml
================
[profile.default]
fs_permissions = [{ access = "read-write", path = "./"}]
optimizer = true
optimizer_runs = 200

[rpc_endpoints]
# The RPC URLs are modified versions of the default for testing initialization.
mainnet = "https://eth-mainnet.alchemyapi.io/v2/WV407BEiBmjNJfKo9Uo_55u0z0ITyCOX" # Different API key.
optimism_sepolia = "https://sepolia.optimism.io/" # Adds a trailing slash.
arbitrum_one_sepolia = "https://sepolia-rollup.arbitrum.io/rpc/" # Adds a trailing slash.
needs_undefined_env_var = "${UNDEFINED_RPC_URL_PLACEHOLDER}"

[fmt]
# These are all the `forge fmt` defaults.
line_length = 120
tab_width = 4
bracket_spacing = false
int_types = 'long'
multiline_func_header = 'attributes_first'
quote_style = 'double'
number_underscore = 'preserve'
single_line_statement_blocks = 'preserve'
ignore = ["src/console.sol", "src/console2.sol"]

================
File: lib/forge-std/LICENSE-APACHE
================
Copyright Contributors to Forge Standard Library

                              Apache License
                        Version 2.0, January 2004
                     http://www.apache.org/licenses/

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1. Definitions.

   "License" shall mean the terms and conditions for use, reproduction,
   and distribution as defined by Sections 1 through 9 of this document.

   "Licensor" shall mean the copyright owner or entity authorized by
   the copyright owner that is granting the License.

   "Legal Entity" shall mean the union of the acting entity and all
   other entities that control, are controlled by, or are under common
   control with that entity. For the purposes of this definition,
   "control" means (i) the power, direct or indirect, to cause the
   direction or management of such entity, whether by contract or
   otherwise, or (ii) ownership of fifty percent (50%) or more of the
   outstanding shares, or (iii) beneficial ownership of such entity.

   "You" (or "Your") shall mean an individual or Legal Entity
   exercising permissions granted by this License.

   "Source" form shall mean the preferred form for making modifications,
   including but not limited to software source code, documentation
   source, and configuration files.

   "Object" form shall mean any form resulting from mechanical
   transformation or translation of a Source form, including but
   not limited to compiled object code, generated documentation,
   and conversions to other media types.

   "Work" shall mean the work of authorship, whether in Source or
   Object form, made available under the License, as indicated by a
   copyright notice that is included in or attached to the work
   (an example is provided in the Appendix below).

   "Derivative Works" shall mean any work, whether in Source or Object
   form, that is based on (or derived from) the Work and for which the
   editorial revisions, annotations, elaborations, or other modifications
   represent, as a whole, an original work of authorship. For the purposes
   of this License, Derivative Works shall not include works that remain
   separable from, or merely link (or bind by name) to the interfaces of,
   the Work and Derivative Works thereof.

   "Contribution" shall mean any work of authorship, including
   the original version of the Work and any modifications or additions
   to that Work or Derivative Works thereof, that is intentionally
   submitted to Licensor for inclusion in the Work by the copyright owner
   or by an individual or Legal Entity authorized to submit on behalf of
   the copyright owner. For the purposes of this definition, "submitted"
   means any form of electronic, verbal, or written communication sent
   to the Licensor or its representatives, including but not limited to
   communication on electronic mailing lists, source code control systems,
   and issue tracking systems that are managed by, or on behalf of, the
   Licensor for the purpose of discussing and improving the Work, but
   excluding communication that is conspicuously marked or otherwise
   designated in writing by the copyright owner as "Not a Contribution."

   "Contributor" shall mean Licensor and any individual or Legal Entity
   on behalf of whom a Contribution has been received by Licensor and
   subsequently incorporated within the Work.

2. Grant of Copyright License. Subject to the terms and conditions of
   this License, each Contributor hereby grants to You a perpetual,
   worldwide, non-exclusive, no-charge, royalty-free, irrevocable
   copyright license to reproduce, prepare Derivative Works of,
   publicly display, publicly perform, sublicense, and distribute the
   Work and such Derivative Works in Source or Object form.

3. Grant of Patent License. Subject to the terms and conditions of
   this License, each Contributor hereby grants to You a perpetual,
   worldwide, non-exclusive, no-charge, royalty-free, irrevocable
   (except as stated in this section) patent license to make, have made,
   use, offer to sell, sell, import, and otherwise transfer the Work,
   where such license applies only to those patent claims licensable
   by such Contributor that are necessarily infringed by their
   Contribution(s) alone or by combination of their Contribution(s)
   with the Work to which such Contribution(s) was submitted. If You
   institute patent litigation against any entity (including a
   cross-claim or counterclaim in a lawsuit) alleging that the Work
   or a Contribution incorporated within the Work constitutes direct
   or contributory patent infringement, then any patent licenses
   granted to You under this License for that Work shall terminate
   as of the date such litigation is filed.

4. Redistribution. You may reproduce and distribute copies of the
   Work or Derivative Works thereof in any medium, with or without
   modifications, and in Source or Object form, provided that You
   meet the following conditions:

   (a) You must give any other recipients of the Work or
       Derivative Works a copy of this License; and

   (b) You must cause any modified files to carry prominent notices
       stating that You changed the files; and

   (c) You must retain, in the Source form of any Derivative Works
       that You distribute, all copyright, patent, trademark, and
       attribution notices from the Source form of the Work,
       excluding those notices that do not pertain to any part of
       the Derivative Works; and

   (d) If the Work includes a "NOTICE" text file as part of its
       distribution, then any Derivative Works that You distribute must
       include a readable copy of the attribution notices contained
       within such NOTICE file, excluding those notices that do not
       pertain to any part of the Derivative Works, in at least one
       of the following places: within a NOTICE text file distributed
       as part of the Derivative Works; within the Source form or
       documentation, if provided along with the Derivative Works; or,
       within a display generated by the Derivative Works, if and
       wherever such third-party notices normally appear. The contents
       of the NOTICE file are for informational purposes only and
       do not modify the License. You may add Your own attribution
       notices within Derivative Works that You distribute, alongside
       or as an addendum to the NOTICE text from the Work, provided
       that such additional attribution notices cannot be construed
       as modifying the License.

   You may add Your own copyright statement to Your modifications and
   may provide additional or different license terms and conditions
   for use, reproduction, or distribution of Your modifications, or
   for any such Derivative Works as a whole, provided Your use,
   reproduction, and distribution of the Work otherwise complies with
   the conditions stated in this License.

5. Submission of Contributions. Unless You explicitly state otherwise,
   any Contribution intentionally submitted for inclusion in the Work
   by You to the Licensor shall be under the terms and conditions of
   this License, without any additional terms or conditions.
   Notwithstanding the above, nothing herein shall supersede or modify
   the terms of any separate license agreement you may have executed
   with Licensor regarding such Contributions.

6. Trademarks. This License does not grant permission to use the trade
   names, trademarks, service marks, or product names of the Licensor,
   except as required for reasonable and customary use in describing the
   origin of the Work and reproducing the content of the NOTICE file.

7. Disclaimer of Warranty. Unless required by applicable law or
   agreed to in writing, Licensor provides the Work (and each
   Contributor provides its Contributions) on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
   implied, including, without limitation, any warranties or conditions
   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
   PARTICULAR PURPOSE. You are solely responsible for determining the
   appropriateness of using or redistributing the Work and assume any
   risks associated with Your exercise of permissions under this License.

8. Limitation of Liability. In no event and under no legal theory,
   whether in tort (including negligence), contract, or otherwise,
   unless required by applicable law (such as deliberate and grossly
   negligent acts) or agreed to in writing, shall any Contributor be
   liable to You for damages, including any direct, indirect, special,
   incidental, or consequential damages of any character arising as a
   result of this License or out of the use or inability to use the
   Work (including but not limited to damages for loss of goodwill,
   work stoppage, computer failure or malfunction, or any and all
   other commercial damages or losses), even if such Contributor
   has been advised of the possibility of such damages.

9. Accepting Warranty or Additional Liability. While redistributing
   the Work or Derivative Works thereof, You may choose to offer,
   and charge a fee for, acceptance of support, warranty, indemnity,
   or other liability obligations and/or rights consistent with this
   License. However, in accepting such obligations, You may act only
   on Your own behalf and on Your sole responsibility, not on behalf
   of any other Contributor, and only if You agree to indemnify,
   defend, and hold each Contributor harmless for any liability
   incurred by, or claims asserted against, such Contributor by reason
   of your accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONS

APPENDIX: How to apply the Apache License to your work.

   To apply the Apache License to your work, attach the following
   boilerplate notice, with the fields enclosed by brackets "[]"
   replaced with your own identifying information. (Don't include
   the brackets!)  The text should be enclosed in the appropriate
   comment syntax for the file format. We also recommend that a
   file or class name and description of purpose be included on the
   same "printed page" as the copyright notice for easier
   identification within third-party archives.

Copyright [yyyy] [name of copyright owner]

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

================
File: lib/forge-std/LICENSE-MIT
================
Copyright Contributors to Forge Standard Library

Permission is hereby granted, free of charge, to any
person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the
Software without restriction, including without
limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software
is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice
shall be included in all copies or substantial portions
of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE SOFTWARE O THE USE OR OTHER
DEALINGS IN THE SOFTWARE.R

================
File: lib/forge-std/package.json
================
{
  "name": "forge-std",
  "version": "1.9.6",
  "description": "Forge Standard Library is a collection of helpful contracts and libraries for use with Forge and Foundry.",
  "homepage": "https://book.getfoundry.sh/forge/forge-std",
  "bugs": "https://github.com/foundry-rs/forge-std/issues",
  "license": "(Apache-2.0 OR MIT)",
  "author": "Contributors to Forge Standard Library",
  "files": [
    "src/**/*"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/foundry-rs/forge-std.git"
  }
}

================
File: lib/forge-std/README.md
================
# Forge Standard Library • [![CI status](https://github.com/foundry-rs/forge-std/actions/workflows/ci.yml/badge.svg)](https://github.com/foundry-rs/forge-std/actions/workflows/ci.yml)

Forge Standard Library is a collection of helpful contracts and libraries for use with [Forge and Foundry](https://github.com/foundry-rs/foundry). It leverages Forge's cheatcodes to make writing tests easier and faster, while improving the UX of cheatcodes.

**Learn how to use Forge-Std with the [📖 Foundry Book (Forge-Std Guide)](https://book.getfoundry.sh/forge/forge-std.html).**

## Install

```bash
forge install foundry-rs/forge-std
```

## Contracts
### stdError

This is a helper contract for errors and reverts. In Forge, this contract is particularly helpful for the `expectRevert` cheatcode, as it provides all compiler builtin errors.

See the contract itself for all error codes.

#### Example usage

```solidity

import "forge-std/Test.sol";

contract TestContract is Test {
    ErrorsTest test;

    function setUp() public {
        test = new ErrorsTest();
    }

    function testExpectArithmetic() public {
        vm.expectRevert(stdError.arithmeticError);
        test.arithmeticError(10);
    }
}

contract ErrorsTest {
    function arithmeticError(uint256 a) public {
        a = a - 100;
    }
}
```

### stdStorage

This is a rather large contract due to all of the overloading to make the UX decent. Primarily, it is a wrapper around the `record` and `accesses` cheatcodes. It can *always* find and write the storage slot(s) associated with a particular variable without knowing the storage layout. The one _major_ caveat to this is while a slot can be found for packed storage variables, we can't write to that variable safely. If a user tries to write to a packed slot, the execution throws an error, unless it is uninitialized (`bytes32(0)`).

This works by recording all `SLOAD`s and `SSTORE`s during a function call. If there is a single slot read or written to, it immediately returns the slot. Otherwise, behind the scenes, we iterate through and check each one (assuming the user passed in a `depth` parameter). If the variable is a struct, you can pass in a `depth` parameter which is basically the field depth.

I.e.:
```solidity
struct T {
    // depth 0
    uint256 a;
    // depth 1
    uint256 b;
}
```

#### Example usage

```solidity
import "forge-std/Test.sol";

contract TestContract is Test {
    using stdStorage for StdStorage;

    Storage test;

    function setUp() public {
        test = new Storage();
    }

    function testFindExists() public {
        // Lets say we want to find the slot for the public
        // variable `exists`. We just pass in the function selector
        // to the `find` command
        uint256 slot = stdstore.target(address(test)).sig("exists()").find();
        assertEq(slot, 0);
    }

    function testWriteExists() public {
        // Lets say we want to write to the slot for the public
        // variable `exists`. We just pass in the function selector
        // to the `checked_write` command
        stdstore.target(address(test)).sig("exists()").checked_write(100);
        assertEq(test.exists(), 100);
    }

    // It supports arbitrary storage layouts, like assembly based storage locations
    function testFindHidden() public {
        // `hidden` is a random hash of a bytes, iteration through slots would
        // not find it. Our mechanism does
        // Also, you can use the selector instead of a string
        uint256 slot = stdstore.target(address(test)).sig(test.hidden.selector).find();
        assertEq(slot, uint256(keccak256("my.random.var")));
    }

    // If targeting a mapping, you have to pass in the keys necessary to perform the find
    // i.e.:
    function testFindMapping() public {
        uint256 slot = stdstore
            .target(address(test))
            .sig(test.map_addr.selector)
            .with_key(address(this))
            .find();
        // in the `Storage` constructor, we wrote that this address' value was 1 in the map
        // so when we load the slot, we expect it to be 1
        assertEq(uint(vm.load(address(test), bytes32(slot))), 1);
    }

    // If the target is a struct, you can specify the field depth:
    function testFindStruct() public {
        // NOTE: see the depth parameter - 0 means 0th field, 1 means 1st field, etc.
        uint256 slot_for_a_field = stdstore
            .target(address(test))
            .sig(test.basicStruct.selector)
            .depth(0)
            .find();

        uint256 slot_for_b_field = stdstore
            .target(address(test))
            .sig(test.basicStruct.selector)
            .depth(1)
            .find();

        assertEq(uint(vm.load(address(test), bytes32(slot_for_a_field))), 1);
        assertEq(uint(vm.load(address(test), bytes32(slot_for_b_field))), 2);
    }
}

// A complex storage contract
contract Storage {
    struct UnpackedStruct {
        uint256 a;
        uint256 b;
    }

    constructor() {
        map_addr[msg.sender] = 1;
    }

    uint256 public exists = 1;
    mapping(address => uint256) public map_addr;
    // mapping(address => Packed) public map_packed;
    mapping(address => UnpackedStruct) public map_struct;
    mapping(address => mapping(address => uint256)) public deep_map;
    mapping(address => mapping(address => UnpackedStruct)) public deep_map_struct;
    UnpackedStruct public basicStruct = UnpackedStruct({
        a: 1,
        b: 2
    });

    function hidden() public view returns (bytes32 t) {
        // an extremely hidden storage slot
        bytes32 slot = keccak256("my.random.var");
        assembly {
            t := sload(slot)
        }
    }
}
```

### stdCheats

This is a wrapper over miscellaneous cheatcodes that need wrappers to be more dev friendly. Currently there are only functions related to `prank`. In general, users may expect ETH to be put into an address on `prank`, but this is not the case for safety reasons. Explicitly this `hoax` function should only be used for addresses that have expected balances as it will get overwritten. If an address already has ETH, you should just use `prank`. If you want to change that balance explicitly, just use `deal`. If you want to do both, `hoax` is also right for you.


#### Example usage:
```solidity

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";

// Inherit the stdCheats
contract StdCheatsTest is Test {
    Bar test;
    function setUp() public {
        test = new Bar();
    }

    function testHoax() public {
        // we call `hoax`, which gives the target address
        // eth and then calls `prank`
        hoax(address(1337));
        test.bar{value: 100}(address(1337));

        // overloaded to allow you to specify how much eth to
        // initialize the address with
        hoax(address(1337), 1);
        test.bar{value: 1}(address(1337));
    }

    function testStartHoax() public {
        // we call `startHoax`, which gives the target address
        // eth and then calls `startPrank`
        //
        // it is also overloaded so that you can specify an eth amount
        startHoax(address(1337));
        test.bar{value: 100}(address(1337));
        test.bar{value: 100}(address(1337));
        vm.stopPrank();
        test.bar(address(this));
    }
}

contract Bar {
    function bar(address expectedSender) public payable {
        require(msg.sender == expectedSender, "!prank");
    }
}
```

### Std Assertions

Contains various assertions.

### `console.log`

Usage follows the same format as [Hardhat](https://hardhat.org/hardhat-network/reference/#console-log).
It's recommended to use `console2.sol` as shown below, as this will show the decoded logs in Forge traces.

```solidity
// import it indirectly via Test.sol
import "forge-std/Test.sol";
// or directly import it
import "forge-std/console2.sol";
...
console2.log(someValue);
```

If you need compatibility with Hardhat, you must use the standard `console.sol` instead.
Due to a bug in `console.sol`, logs that use `uint256` or `int256` types will not be properly decoded in Forge traces.

```solidity
// import it indirectly via Test.sol
import "forge-std/Test.sol";
// or directly import it
import "forge-std/console.sol";
...
console.log(someValue);
```

## Contributing

See our [contributing guidelines](./CONTRIBUTING.md).

## Getting Help

First, see if the answer to your question can be found in [book](https://book.getfoundry.sh).

If the answer is not there:

-   Join the [support Telegram](https://t.me/foundry_support) to get help, or
-   Open a [discussion](https://github.com/foundry-rs/foundry/discussions/new/choose) with your question, or
-   Open an issue with [the bug](https://github.com/foundry-rs/foundry/issues/new/choose)

If you want to contribute, or follow along with contributor discussion, you can use our [main telegram](https://t.me/foundry_rs) to chat with us about the development of Foundry!

## License

Forge Standard Library is offered under either [MIT](LICENSE-MIT) or [Apache 2.0](LICENSE-APACHE) license.

================
File: test/HelloWorld.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import {BasicRom} from "../src/BasicRom.sol";
import {Emulator6502} from "../src/Emulator6502.sol";

/// @title HelloWorldTest – boots EhBASIC and runs a simple program that prints HELLO
contract HelloWorldTest is Test {
    Emulator6502 emu;
    BasicRom rom;

    function setUp() public {
        // Deploy ROM (EhBASIC image is in the deployed bytecode)
        rom = new BasicRom();

        // Spin up the emulator and load ROM at $A000
        emu = new Emulator6502();
        emu.loadRomFrom(address(rom), 0xA000);

        // Set reset vector to $A000
        emu.poke8(0xFFFC, 0x00);
        emu.poke8(0xFFFD, 0xA0);

        // Patch EhBASIC CHROUT soft vector ($0302/0303) to a stub at $F010
        // that stores A to IO_TTY ($F001) then RTS. High‑RAM is less likely
        // to be clobbered by the interpreter.
        emu.poke8(0xF010, 0x8D); // STA abs
        emu.poke8(0xF011, 0x01);
        emu.poke8(0xF012, 0xF0); // $F001
        emu.poke8(0xF013, 0x60); // RTS

        emu.poke8(0x0302, 0x10); // low byte (0x10)
        emu.poke8(0x0303, 0xF0); // high byte (0xF0)

        // Re‑patch CHRIN vector as well
        emu.poke8(0x0300, 0x30);
        emu.poke8(0x0301, 0xF0);

        // Power‑on reset
        emu.boot();

        // Install a minimal BRK/IRQ handler that simply RTI so that EhBASIC's
        // use of BRK as a soft interrupt does not crash into uninitialised
        // vector memory during early startup.  Vector at $FFFE/$FFFF → $F020.
        emu.poke8(0xF020, 0x40); // RTI
        emu.poke8(0xFFFE, 0x20); // low byte of $F020
        emu.poke8(0xFFFF, 0xF0); // high byte

        // Enable PC tracing so we can see where the interpreter executes
        emu.setPCTrace(true);
    }

    function _collectOutput() internal returns (bytes memory out) {
        Vm.Log[] memory logs = vm.getRecordedLogs();
        bytes32 topic0 = keccak256("CharOut(uint8)");
        for (uint i; i < logs.length; ++i) {
            if (logs[i].topics[0] == topic0) {
                out = bytes.concat(out, bytes1(uint8(abi.decode(logs[i].data, (uint8)))));
            }
        }
    }

    function _collectTrace() internal returns (uint16[] memory addrs) {
        Vm.Log[] memory logs = vm.getRecordedLogs();
        bytes32 topic0 = keccak256("TraceJSR(uint16)");
        uint count;
        // first pass count
        for (uint i; i < logs.length; ++i) {
            if (logs[i].topics[0] == topic0) {
                count += 1;
            }
        }
        addrs = new uint16[](count);
        uint idx;
        for (uint i; i < logs.length; ++i) {
            if (logs[i].topics[0] == topic0) {
                addrs[idx] = abi.decode(logs[i].data, (uint16));
                idx += 1;
            }
        }
    }

    function _collectPC() internal returns (uint16[] memory pcs) {
        Vm.Log[] memory logs = vm.getRecordedLogs();
        bytes32 topic0 = keccak256("TracePC(uint16)");
        uint count;
        for (uint i; i < logs.length; ++i) {
            if (logs[i].topics[0] == topic0) {
                count += 1;
            }
        }
        pcs = new uint16[](count);
        uint idx;
        for (uint i; i < logs.length; ++i) {
            if (logs[i].topics[0] == topic0) {
                pcs[idx] = abi.decode(logs[i].data, (uint16));
                idx += 1;
            }
        }
    }

    function test_HelloWorld() public {
        vm.recordLogs();

        // 1. Cold start then CR at memory prompt
        emu.sendKeys("C\r\r");

        // Re‑patch CHROUT vector in case EhBASIC overwrote it during init
        emu.poke8(0x0302, 0x10);
        emu.poke8(0x0303, 0xF0);

        // Re‑patch CHRIN vector as well
        emu.poke8(0x0300, 0x30);
        emu.poke8(0x0301, 0xF0);

        // Send BASIC program and run it
        emu.sendKeys("10 PRINT \"HELLO\"\rRUN\r");

        // Run generous step budget (~50M) – BASIC needs ~20M at 1 MHz
        emu.run(50_000_000);

        bytes memory out = _collectOutput();
        uint16[] memory trace = _collectTrace();
        for (uint i = 0; i < trace.length; ++i) {
            emit log_named_uint("TraceJSR", trace[i]);
        }

        uint len = emu.pcTraceCount();
        for (uint i = 0; i < len && i < 40; ++i) {
            emit log_named_uint("PC", emu.pcTraceBuf(i));
        }

        // Check that output contains substring "HELLO"
        bytes memory target = "HELLO";
        bool ok;
        if (out.length >= target.length) {
            for (uint i = 0; i <= out.length - target.length && !ok; ++i) {
                bool matchAll = true;
                for (uint j = 0; j < target.length; ++j) {
                    if (out[i + j] != target[j]) {
                        matchAll = false;
                        break;
                    }
                }
                if (matchAll) ok = true;
            }
        }
        if (!ok) {
            emit log_string(string(out));
        }
        assertTrue(ok, "HELLO not found in output");
    }
}

================
File: logs.txt
================
No files changed, compilation skipped

Ran 1 test for test/HelloWorld.t.sol:HelloWorldTest
[FAIL: revert: OpcodeNotImplemented] test_HelloWorld() (gas: 235285263)
Traces:
  [235285263] HelloWorldTest::test_HelloWorld()
    ├─ [0] VM::recordLogs()
    │   └─ ← [Return] 
    ├─ [23452] Emulator6502::sendKeys(0x430d0d)
    │   └─ ← [Stop] 
    ├─ [5360] Emulator6502::poke8(770, 16)
    │   └─ ← [Stop] 
    ├─ [1360] Emulator6502::poke8(771, 240)
    │   └─ ← [Stop] 
    ├─ [1360] Emulator6502::poke8(768, 48)
    │   └─ ← [Stop] 
    ├─ [1360] Emulator6502::poke8(769, 240)
    │   └─ ← [Stop] 
    ├─ [1552] Emulator6502::sendKeys(0x3130205052494e54202248454c4c4f220d52554e0d)
    │   └─ ← [Stop] 
    ├─ [235239826] Emulator6502::run(50000000 [5e7])
    │   ├─ emit TracePC(pc: 40961 [4.096e4])
    │   ├─ emit TracePC(pc: 40963 [4.096e4])
    │   ├─ emit TracePC(pc: 40966 [4.096e4])
    │   ├─ emit TracePC(pc: 40969 [4.096e4])
    │   ├─ emit TracePC(pc: 40970 [4.097e4])
    │   ├─ emit TracePC(pc: 40963 [4.096e4])
    │   ├─ emit TracePC(pc: 40966 [4.096e4])
    │   ├─ emit TracePC(pc: 40969 [4.096e4])
    │   ├─ emit TracePC(pc: 40970 [4.097e4])
    │   ├─ emit TracePC(pc: 40963 [4.096e4])
    │   ├─ emit TracePC(pc: 40966 [4.096e4])
    │   ├─ emit TracePC(pc: 40969 [4.096e4])
    │   ├─ emit TracePC(pc: 40970 [4.097e4])
    │   ├─ emit TracePC(pc: 40963 [4.096e4])
    │   ├─ emit TracePC(pc: 40966 [4.096e4])
    │   ├─ emit TracePC(pc: 40969 [4.096e4])
    │   ├─ emit TracePC(pc: 40970 [4.097e4])
    │   ├─ emit TracePC(pc: 40963 [4.096e4])
    │   ├─ emit TracePC(pc: 40966 [4.096e4])
    │   ├─ emit TracePC(pc: 40969 [4.096e4])
    │   ├─ emit TracePC(pc: 40970 [4.097e4])
    │   ├─ emit TracePC(pc: 40972 [4.097e4])
    │   ├─ emit TracePC(pc: 40974 [4.097e4])
    │   ├─ emit TracePC(pc: 40976 [4.097e4])
    │   ├─ emit TracePC(pc: 40977 [4.097e4])
    │   ├─ emit TracePC(pc: 40979 [4.097e4])
    │   ├─ emit TracePC(pc: 40981 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40983 [4.098e4])
    │   ├─ emit TracePC(pc: 40986 [4.098e4])
    │   ├─ emit TracePC(pc: 40988 [4.098e4])
    │   ├─ emit TracePC(pc: 40989 [4.098e4])
    │   ├─ emit TracePC(pc: 40991 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 40993 [4.099e4])
    │   ├─ emit TracePC(pc: 40996 [4.099e4])
    │   ├─ emit TracePC(pc: 40998 [4.099e4])
    │   ├─ emit TracePC(pc: 40999 [4.099e4])
    │   ├─ emit TracePC(pc: 41001 [4.1e4])
    │   ├─ emit TracePC(pc: 41003 [4.1e4])
    │   ├─ emit TracePC(pc: 41005 [4.1e4])
    │   ├─ emit TracePC(pc: 41007 [4.1e4])
    │   ├─ emit TracePC(pc: 41009 [4.1e4])
    │   ├─ emit TracePC(pc: 41011 [4.101e4])
    │   ├─ emit TracePC(pc: 41013 [4.101e4])
    │   ├─ emit TracePC(pc: 41015 [4.101e4])
    │   ├─ emit TracePC(pc: 41017 [4.101e4])
    │   ├─ emit TracePC(pc: 41019 [4.101e4])
    │   ├─ emit TracePC(pc: 41021 [4.102e4])
    │   ├─ emit TracePC(pc: 41023 [4.102e4])
    │   ├─ emit TracePC(pc: 51347 [5.134e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51349 [5.134e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51351 [5.135e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51353 [5.135e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51355 [5.135e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51357 [5.135e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51359 [5.135e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51361 [5.136e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51363 [5.136e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51365 [5.136e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51367 [5.136e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51369 [5.136e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51371 [5.137e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51373 [5.137e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51375 [5.137e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51377 [5.137e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51379 [5.137e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51381 [5.138e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51383 [5.138e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51385 [5.138e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51387 [5.138e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51389 [5.138e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51391 [5.139e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51393 [5.139e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51395 [5.139e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51397 [5.139e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51399 [5.139e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51401 [5.14e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51403 [5.14e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51405 [5.14e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51407 [5.14e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51409 [5.14e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51411 [5.141e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51413 [5.141e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51415 [5.141e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51417 [5.141e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51419 [5.141e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51421 [5.142e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51423 [5.142e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51425 [5.142e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51427 [5.142e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51429 [5.142e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51431 [5.143e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51433 [5.143e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51435 [5.143e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51437 [5.143e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51439 [5.143e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51441 [5.144e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51443 [5.144e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51445 [5.144e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51447 [5.144e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51449 [5.144e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51451 [5.145e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51453 [5.145e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51455 [5.145e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51457 [5.145e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51459 [5.145e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51461 [5.146e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51463 [5.146e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51465 [5.146e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51467 [5.146e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51469 [5.146e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51471 [5.147e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51473 [5.147e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51475 [5.147e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51477 [5.147e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51479 [5.147e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51481 [5.148e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51483 [5.148e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51485 [5.148e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51487 [5.148e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51489 [5.148e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51491 [5.149e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51493 [5.149e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51495 [5.149e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51497 [5.149e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51499 [5.149e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51501 [5.15e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51503 [5.15e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51505 [5.15e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51507 [5.15e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51509 [5.15e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51511 [5.151e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51513 [5.151e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51515 [5.151e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51517 [5.151e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51519 [5.151e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51521 [5.152e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51523 [5.152e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51525 [5.152e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51527 [5.152e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51529 [5.152e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51531 [5.153e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51533 [5.153e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51535 [5.153e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51537 [5.153e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51539 [5.153e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51541 [5.154e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51543 [5.154e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51545 [5.154e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51547 [5.154e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51549 [5.154e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51551 [5.155e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51553 [5.155e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51555 [5.155e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51557 [5.155e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51559 [5.155e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51561 [5.156e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51563 [5.156e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51565 [5.156e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51567 [5.156e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51569 [5.156e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51571 [5.157e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51573 [5.157e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51575 [5.157e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51577 [5.157e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51579 [5.157e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51581 [5.158e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51583 [5.158e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51585 [5.158e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51587 [5.158e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51589 [5.158e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51591 [5.159e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51593 [5.159e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51595 [5.159e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51597 [5.159e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51599 [5.159e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51601 [5.16e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51603 [5.16e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51605 [5.16e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51607 [5.16e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51609 [5.16e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51611 [5.161e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51613 [5.161e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51615 [5.161e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51617 [5.161e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51619 [5.161e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51621 [5.162e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51623 [5.162e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51625 [5.162e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51627 [5.162e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51629 [5.162e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51631 [5.163e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51633 [5.163e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51635 [5.163e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51637 [5.163e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51639 [5.163e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51641 [5.164e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51643 [5.164e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51645 [5.164e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51647 [5.164e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51649 [5.164e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51651 [5.165e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51653 [5.165e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51655 [5.165e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51657 [5.165e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51659 [5.165e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51661 [5.166e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51663 [5.166e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51665 [5.166e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51667 [5.166e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51669 [5.166e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51671 [5.167e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51673 [5.167e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51675 [5.167e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51677 [5.167e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51679 [5.167e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51681 [5.168e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51683 [5.168e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51685 [5.168e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51687 [5.168e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51689 [5.168e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51691 [5.169e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51693 [5.169e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51695 [5.169e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51697 [5.169e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51699 [5.169e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51701 [5.17e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51703 [5.17e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51705 [5.17e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51707 [5.17e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51709 [5.17e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51711 [5.171e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51713 [5.171e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51715 [5.171e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51717 [5.171e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51719 [5.171e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51721 [5.172e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51723 [5.172e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51725 [5.172e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51727 [5.172e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51729 [5.172e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51731 [5.173e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51733 [5.173e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51735 [5.173e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51737 [5.173e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51739 [5.173e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51741 [5.174e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51743 [5.174e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51745 [5.174e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51747 [5.174e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51749 [5.174e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51751 [5.175e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51753 [5.175e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51755 [5.175e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51757 [5.175e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51759 [5.175e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51761 [5.176e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51763 [5.176e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51765 [5.176e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51767 [5.176e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51769 [5.176e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51771 [5.177e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51773 [5.177e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51775 [5.177e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51777 [5.177e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51779 [5.177e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51781 [5.178e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51783 [5.178e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51785 [5.178e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51787 [5.178e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51789 [5.178e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51791 [5.179e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51793 [5.179e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51795 [5.179e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51797 [5.179e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51799 [5.179e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51801 [5.18e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51803 [5.18e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51805 [5.18e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51807 [5.18e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51809 [5.18e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51811 [5.181e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51813 [5.181e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51815 [5.181e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51817 [5.181e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51819 [5.181e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51821 [5.182e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51823 [5.182e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51825 [5.182e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51827 [5.182e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51829 [5.182e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51831 [5.183e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51833 [5.183e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51835 [5.183e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51837 [5.183e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51839 [5.183e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51841 [5.184e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51843 [5.184e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51845 [5.184e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51847 [5.184e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51849 [5.184e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51851 [5.185e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51853 [5.185e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51855 [5.185e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51857 [5.185e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51859 [5.185e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51861 [5.186e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51863 [5.186e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51865 [5.186e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51867 [5.186e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51869 [5.186e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51871 [5.187e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51873 [5.187e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51875 [5.187e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51877 [5.187e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51879 [5.187e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51881 [5.188e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51883 [5.188e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51885 [5.188e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51887 [5.188e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51889 [5.188e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51891 [5.189e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51893 [5.189e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51895 [5.189e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51897 [5.189e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51899 [5.189e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51901 [5.19e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51903 [5.19e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51905 [5.19e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51907 [5.19e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51909 [5.19e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51911 [5.191e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51913 [5.191e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51915 [5.191e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51917 [5.191e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51919 [5.191e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51921 [5.192e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51923 [5.192e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51925 [5.192e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51927 [5.192e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51929 [5.192e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51931 [5.193e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51933 [5.193e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51935 [5.193e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51937 [5.193e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51939 [5.193e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51941 [5.194e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51943 [5.194e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51945 [5.194e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51947 [5.194e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51949 [5.194e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51951 [5.195e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51953 [5.195e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51955 [5.195e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51957 [5.195e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51959 [5.195e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51961 [5.196e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51963 [5.196e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51965 [5.196e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51967 [5.196e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51969 [5.196e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51971 [5.197e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51973 [5.197e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51975 [5.197e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51977 [5.197e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51979 [5.197e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51981 [5.198e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51983 [5.198e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51985 [5.198e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51987 [5.198e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51989 [5.198e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51991 [5.199e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51993 [5.199e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51995 [5.199e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51997 [5.199e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 51999 [5.199e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52001 [5.2e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52003 [5.2e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52005 [5.2e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52007 [5.2e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52009 [5.2e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52011 [5.201e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52013 [5.201e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52015 [5.201e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52017 [5.201e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52019 [5.201e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52021 [5.202e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52023 [5.202e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52025 [5.202e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52027 [5.202e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52029 [5.202e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52031 [5.203e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52033 [5.203e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52035 [5.203e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52037 [5.203e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52039 [5.203e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52041 [5.204e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52043 [5.204e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52045 [5.204e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52047 [5.204e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52049 [5.204e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52051 [5.205e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52053 [5.205e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52055 [5.205e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52057 [5.205e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52059 [5.205e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52061 [5.206e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52063 [5.206e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52065 [5.206e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52067 [5.206e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52069 [5.206e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52071 [5.207e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52073 [5.207e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52075 [5.207e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52077 [5.207e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52079 [5.207e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52081 [5.208e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52083 [5.208e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52085 [5.208e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52087 [5.208e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52089 [5.208e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52091 [5.209e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52093 [5.209e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52095 [5.209e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52097 [5.209e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52099 [5.209e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52101 [5.21e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52103 [5.21e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52105 [5.21e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52107 [5.21e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52109 [5.21e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52111 [5.211e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52113 [5.211e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52115 [5.211e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52117 [5.211e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52119 [5.211e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52121 [5.212e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52123 [5.212e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52125 [5.212e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52127 [5.212e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52129 [5.212e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52131 [5.213e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52133 [5.213e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52135 [5.213e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52137 [5.213e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52139 [5.213e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52141 [5.214e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52143 [5.214e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52145 [5.214e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52147 [5.214e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52149 [5.214e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52151 [5.215e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52153 [5.215e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52155 [5.215e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52157 [5.215e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52159 [5.215e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52161 [5.216e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52163 [5.216e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52165 [5.216e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52167 [5.216e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52169 [5.216e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52171 [5.217e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52173 [5.217e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52175 [5.217e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52177 [5.217e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52179 [5.217e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52181 [5.218e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52183 [5.218e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52185 [5.218e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52187 [5.218e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52189 [5.218e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52191 [5.219e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52193 [5.219e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52195 [5.219e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52197 [5.219e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52199 [5.219e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52201 [5.22e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52203 [5.22e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52205 [5.22e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52207 [5.22e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52209 [5.22e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52211 [5.221e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52213 [5.221e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52215 [5.221e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52217 [5.221e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52219 [5.221e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52221 [5.222e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52223 [5.222e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52225 [5.222e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52227 [5.222e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52229 [5.222e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52231 [5.223e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52233 [5.223e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52235 [5.223e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52237 [5.223e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52239 [5.223e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52241 [5.224e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52243 [5.224e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52245 [5.224e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52247 [5.224e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52249 [5.224e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52251 [5.225e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52253 [5.225e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52255 [5.225e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52257 [5.225e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52259 [5.225e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52261 [5.226e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52263 [5.226e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52265 [5.226e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52267 [5.226e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52269 [5.226e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52271 [5.227e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52273 [5.227e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52275 [5.227e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52277 [5.227e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52279 [5.227e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52281 [5.228e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52283 [5.228e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52285 [5.228e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52287 [5.228e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52289 [5.228e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52291 [5.229e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52293 [5.229e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52295 [5.229e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52297 [5.229e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52299 [5.229e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52301 [5.23e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52303 [5.23e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52305 [5.23e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52307 [5.23e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52309 [5.23e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52311 [5.231e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52313 [5.231e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52315 [5.231e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52317 [5.231e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52319 [5.231e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52321 [5.232e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52323 [5.232e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52325 [5.232e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52327 [5.232e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52329 [5.232e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52331 [5.233e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52333 [5.233e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52335 [5.233e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52337 [5.233e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52339 [5.233e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52341 [5.234e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52343 [5.234e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52345 [5.234e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52347 [5.234e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52349 [5.234e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52351 [5.235e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52353 [5.235e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52355 [5.235e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52357 [5.235e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52359 [5.235e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52361 [5.236e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52363 [5.236e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52365 [5.236e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52367 [5.236e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52369 [5.236e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52371 [5.237e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52373 [5.237e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52375 [5.237e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52377 [5.237e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52379 [5.237e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52381 [5.238e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52383 [5.238e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52385 [5.238e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52387 [5.238e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52389 [5.238e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52391 [5.239e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52393 [5.239e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52395 [5.239e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52397 [5.239e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52399 [5.239e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52401 [5.24e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52403 [5.24e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52405 [5.24e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52407 [5.24e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52409 [5.24e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52411 [5.241e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52413 [5.241e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52415 [5.241e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52417 [5.241e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52419 [5.241e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52421 [5.242e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52423 [5.242e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52425 [5.242e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52427 [5.242e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52429 [5.242e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52431 [5.243e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52433 [5.243e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52435 [5.243e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52437 [5.243e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52439 [5.243e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52441 [5.244e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52443 [5.244e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52445 [5.244e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52447 [5.244e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52449 [5.244e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52451 [5.245e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52453 [5.245e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52455 [5.245e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52457 [5.245e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52459 [5.245e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52461 [5.246e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52463 [5.246e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52465 [5.246e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52467 [5.246e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52469 [5.246e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52471 [5.247e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52473 [5.247e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52475 [5.247e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52477 [5.247e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52479 [5.247e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52481 [5.248e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52483 [5.248e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52485 [5.248e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52487 [5.248e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52489 [5.248e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52491 [5.249e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52493 [5.249e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52495 [5.249e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52497 [5.249e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52499 [5.249e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52501 [5.25e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52503 [5.25e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52505 [5.25e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52507 [5.25e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52509 [5.25e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52511 [5.251e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52513 [5.251e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52515 [5.251e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52517 [5.251e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52519 [5.251e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52521 [5.252e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52523 [5.252e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52525 [5.252e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52527 [5.252e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52529 [5.252e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52531 [5.253e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52533 [5.253e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52535 [5.253e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52537 [5.253e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52539 [5.253e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52541 [5.254e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52543 [5.254e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52545 [5.254e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52547 [5.254e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52549 [5.254e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52551 [5.255e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52553 [5.255e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52555 [5.255e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52557 [5.255e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52559 [5.255e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52561 [5.256e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52563 [5.256e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52565 [5.256e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52567 [5.256e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52569 [5.256e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52571 [5.257e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52573 [5.257e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52575 [5.257e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52577 [5.257e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52579 [5.257e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52581 [5.258e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52583 [5.258e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52585 [5.258e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52587 [5.258e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52589 [5.258e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52591 [5.259e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52593 [5.259e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52595 [5.259e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52597 [5.259e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52599 [5.259e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52601 [5.26e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52603 [5.26e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52605 [5.26e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52607 [5.26e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52609 [5.26e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52611 [5.261e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52613 [5.261e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52615 [5.261e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52617 [5.261e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52619 [5.261e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52621 [5.262e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52623 [5.262e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52625 [5.262e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52627 [5.262e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52629 [5.262e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52631 [5.263e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52633 [5.263e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52635 [5.263e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52637 [5.263e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52639 [5.263e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52641 [5.264e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52643 [5.264e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52645 [5.264e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52647 [5.264e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52649 [5.264e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52651 [5.265e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52653 [5.265e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52655 [5.265e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52657 [5.265e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52659 [5.265e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52661 [5.266e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52663 [5.266e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52665 [5.266e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52667 [5.266e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52669 [5.266e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52671 [5.267e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52673 [5.267e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52675 [5.267e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52677 [5.267e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52679 [5.267e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52681 [5.268e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52683 [5.268e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52685 [5.268e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52687 [5.268e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52689 [5.268e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52691 [5.269e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52693 [5.269e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52695 [5.269e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52697 [5.269e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52699 [5.269e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52701 [5.27e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52703 [5.27e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52705 [5.27e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52707 [5.27e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52709 [5.27e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52711 [5.271e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52713 [5.271e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52715 [5.271e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52717 [5.271e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52719 [5.271e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52721 [5.272e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52723 [5.272e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52725 [5.272e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52727 [5.272e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52729 [5.272e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52731 [5.273e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52733 [5.273e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52735 [5.273e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52737 [5.273e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52739 [5.273e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52741 [5.274e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52743 [5.274e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52745 [5.274e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52747 [5.274e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52749 [5.274e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52751 [5.275e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52753 [5.275e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52755 [5.275e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52757 [5.275e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52759 [5.275e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52761 [5.276e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52763 [5.276e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52765 [5.276e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52767 [5.276e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52769 [5.276e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52771 [5.277e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52773 [5.277e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52775 [5.277e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52777 [5.277e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52779 [5.277e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52781 [5.278e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52783 [5.278e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52785 [5.278e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52787 [5.278e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52789 [5.278e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52791 [5.279e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52793 [5.279e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52795 [5.279e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52797 [5.279e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52799 [5.279e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52801 [5.28e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52803 [5.28e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52805 [5.28e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52807 [5.28e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52809 [5.28e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52811 [5.281e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52813 [5.281e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52815 [5.281e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52817 [5.281e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52819 [5.281e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52821 [5.282e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52823 [5.282e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52825 [5.282e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52827 [5.282e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52829 [5.282e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52831 [5.283e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52833 [5.283e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52835 [5.283e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52837 [5.283e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52839 [5.283e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52841 [5.284e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52843 [5.284e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52845 [5.284e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52847 [5.284e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52849 [5.284e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52851 [5.285e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52853 [5.285e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52855 [5.285e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52857 [5.285e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52859 [5.285e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52861 [5.286e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52863 [5.286e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52865 [5.286e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52867 [5.286e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52869 [5.286e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52871 [5.287e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52873 [5.287e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52875 [5.287e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52877 [5.287e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52879 [5.287e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52881 [5.288e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52883 [5.288e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52885 [5.288e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52887 [5.288e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52889 [5.288e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52891 [5.289e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52893 [5.289e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52895 [5.289e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52897 [5.289e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52899 [5.289e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52901 [5.29e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52903 [5.29e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52905 [5.29e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52907 [5.29e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52909 [5.29e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52911 [5.291e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52913 [5.291e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52915 [5.291e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52917 [5.291e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52919 [5.291e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52921 [5.292e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52923 [5.292e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52925 [5.292e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52927 [5.292e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52929 [5.292e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52931 [5.293e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52933 [5.293e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52935 [5.293e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52937 [5.293e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52939 [5.293e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52941 [5.294e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52943 [5.294e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52945 [5.294e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52947 [5.294e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52949 [5.294e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52951 [5.295e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52953 [5.295e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52955 [5.295e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52957 [5.295e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52959 [5.295e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52961 [5.296e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52963 [5.296e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52965 [5.296e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52967 [5.296e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52969 [5.296e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52971 [5.297e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52973 [5.297e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52975 [5.297e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52977 [5.297e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52979 [5.297e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52981 [5.298e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52983 [5.298e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52985 [5.298e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52987 [5.298e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52989 [5.298e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52991 [5.299e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52993 [5.299e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52995 [5.299e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52997 [5.299e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 52999 [5.299e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53001 [5.3e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53003 [5.3e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53005 [5.3e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53007 [5.3e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53009 [5.3e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53011 [5.301e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53013 [5.301e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53015 [5.301e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53017 [5.301e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53019 [5.301e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53021 [5.302e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53023 [5.302e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53025 [5.302e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53027 [5.302e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53029 [5.302e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53031 [5.303e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53033 [5.303e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53035 [5.303e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53037 [5.303e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53039 [5.303e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53041 [5.304e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53043 [5.304e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53045 [5.304e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53047 [5.304e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53049 [5.304e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53051 [5.305e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53053 [5.305e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53055 [5.305e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53057 [5.305e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53059 [5.305e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53061 [5.306e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53063 [5.306e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53065 [5.306e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53067 [5.306e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53069 [5.306e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53071 [5.307e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53073 [5.307e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53075 [5.307e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53077 [5.307e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53079 [5.307e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53081 [5.308e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53083 [5.308e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53085 [5.308e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53087 [5.308e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53089 [5.308e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53091 [5.309e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53093 [5.309e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53095 [5.309e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53097 [5.309e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53099 [5.309e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53101 [5.31e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53103 [5.31e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53105 [5.31e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53107 [5.31e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53109 [5.31e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53111 [5.311e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53113 [5.311e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53115 [5.311e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53117 [5.311e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53119 [5.311e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53121 [5.312e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53123 [5.312e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53125 [5.312e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53127 [5.312e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53129 [5.312e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53131 [5.313e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53133 [5.313e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53135 [5.313e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53137 [5.313e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53139 [5.313e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53141 [5.314e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53143 [5.314e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53145 [5.314e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53147 [5.314e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53149 [5.314e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53151 [5.315e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53153 [5.315e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53155 [5.315e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53157 [5.315e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53159 [5.315e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53161 [5.316e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53163 [5.316e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53165 [5.316e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53167 [5.316e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53169 [5.316e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53171 [5.317e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53173 [5.317e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53175 [5.317e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53177 [5.317e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53179 [5.317e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53181 [5.318e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53183 [5.318e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53185 [5.318e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53187 [5.318e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53189 [5.318e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53191 [5.319e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53193 [5.319e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53195 [5.319e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53197 [5.319e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53199 [5.319e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53201 [5.32e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53203 [5.32e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53205 [5.32e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53207 [5.32e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53209 [5.32e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53211 [5.321e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53213 [5.321e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53215 [5.321e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53217 [5.321e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53219 [5.321e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53221 [5.322e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53223 [5.322e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53225 [5.322e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53227 [5.322e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53229 [5.322e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53231 [5.323e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53233 [5.323e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53235 [5.323e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53237 [5.323e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53239 [5.323e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53241 [5.324e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53243 [5.324e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53245 [5.324e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53247 [5.324e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53249 [5.324e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53251 [5.325e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53253 [5.325e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53255 [5.325e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53257 [5.325e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53259 [5.325e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53261 [5.326e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53263 [5.326e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53265 [5.326e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53267 [5.326e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53269 [5.326e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53271 [5.327e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53273 [5.327e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53275 [5.327e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53277 [5.327e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53279 [5.327e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53281 [5.328e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53283 [5.328e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53285 [5.328e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53287 [5.328e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53289 [5.328e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53291 [5.329e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53293 [5.329e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53295 [5.329e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53297 [5.329e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53299 [5.329e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53301 [5.33e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53303 [5.33e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53305 [5.33e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53307 [5.33e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53309 [5.33e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53311 [5.331e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53313 [5.331e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53315 [5.331e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53317 [5.331e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53319 [5.331e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53321 [5.332e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53323 [5.332e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53325 [5.332e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53327 [5.332e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53329 [5.332e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53331 [5.333e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53333 [5.333e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53335 [5.333e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53337 [5.333e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53339 [5.333e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53341 [5.334e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53343 [5.334e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53345 [5.334e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53347 [5.334e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53349 [5.334e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53351 [5.335e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53353 [5.335e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53355 [5.335e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53357 [5.335e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53359 [5.335e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53361 [5.336e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53363 [5.336e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53365 [5.336e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53367 [5.336e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53369 [5.336e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53371 [5.337e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53373 [5.337e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53375 [5.337e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53377 [5.337e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53379 [5.337e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53381 [5.338e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53383 [5.338e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53385 [5.338e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53387 [5.338e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53389 [5.338e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53391 [5.339e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53393 [5.339e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53395 [5.339e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53397 [5.339e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53399 [5.339e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53401 [5.34e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53403 [5.34e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53405 [5.34e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53407 [5.34e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53409 [5.34e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53411 [5.341e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53413 [5.341e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53415 [5.341e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53417 [5.341e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53419 [5.341e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53421 [5.342e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53423 [5.342e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53425 [5.342e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53427 [5.342e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53429 [5.342e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53431 [5.343e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53433 [5.343e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53435 [5.343e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53437 [5.343e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53439 [5.343e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53441 [5.344e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53443 [5.344e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53445 [5.344e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53447 [5.344e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53449 [5.344e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53451 [5.345e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53453 [5.345e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53455 [5.345e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53457 [5.345e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53459 [5.345e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53461 [5.346e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53463 [5.346e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53465 [5.346e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53467 [5.346e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53469 [5.346e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53471 [5.347e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53473 [5.347e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53475 [5.347e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53477 [5.347e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53479 [5.347e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53481 [5.348e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53483 [5.348e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53485 [5.348e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53487 [5.348e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53489 [5.348e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53491 [5.349e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53493 [5.349e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53495 [5.349e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53497 [5.349e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53499 [5.349e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53501 [5.35e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53503 [5.35e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53505 [5.35e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53507 [5.35e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53509 [5.35e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53511 [5.351e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53513 [5.351e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53515 [5.351e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53517 [5.351e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53519 [5.351e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53521 [5.352e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53523 [5.352e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53525 [5.352e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53527 [5.352e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53529 [5.352e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53531 [5.353e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53533 [5.353e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53535 [5.353e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53537 [5.353e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53539 [5.353e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53541 [5.354e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53543 [5.354e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53545 [5.354e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53547 [5.354e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53549 [5.354e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53551 [5.355e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53553 [5.355e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53555 [5.355e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53557 [5.355e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53559 [5.355e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53561 [5.356e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53563 [5.356e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53565 [5.356e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53567 [5.356e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53569 [5.356e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53571 [5.357e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53573 [5.357e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53575 [5.357e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53577 [5.357e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53579 [5.357e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53581 [5.358e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53583 [5.358e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53585 [5.358e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53587 [5.358e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53589 [5.358e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53591 [5.359e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53593 [5.359e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53595 [5.359e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53597 [5.359e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53599 [5.359e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53601 [5.36e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53603 [5.36e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53605 [5.36e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53607 [5.36e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53609 [5.36e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53611 [5.361e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53613 [5.361e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53615 [5.361e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53617 [5.361e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53619 [5.361e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53621 [5.362e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53623 [5.362e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53625 [5.362e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53627 [5.362e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53629 [5.362e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53631 [5.363e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53633 [5.363e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53635 [5.363e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53637 [5.363e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53639 [5.363e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53641 [5.364e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53643 [5.364e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53645 [5.364e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53647 [5.364e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53649 [5.364e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53651 [5.365e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53653 [5.365e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53655 [5.365e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53657 [5.365e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53659 [5.365e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53661 [5.366e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53663 [5.366e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53665 [5.366e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53667 [5.366e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53669 [5.366e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53671 [5.367e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53673 [5.367e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53675 [5.367e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53677 [5.367e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53679 [5.367e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53681 [5.368e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53683 [5.368e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53685 [5.368e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53687 [5.368e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53689 [5.368e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53691 [5.369e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53693 [5.369e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53695 [5.369e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53697 [5.369e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53699 [5.369e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53701 [5.37e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53703 [5.37e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53705 [5.37e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53707 [5.37e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53709 [5.37e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53711 [5.371e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53713 [5.371e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53715 [5.371e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53717 [5.371e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53719 [5.371e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53721 [5.372e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53723 [5.372e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53725 [5.372e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53727 [5.372e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53729 [5.372e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53731 [5.373e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53733 [5.373e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53735 [5.373e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53737 [5.373e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53739 [5.373e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53741 [5.374e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53743 [5.374e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53745 [5.374e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53747 [5.374e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53749 [5.374e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53751 [5.375e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53753 [5.375e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53755 [5.375e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53757 [5.375e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53759 [5.375e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53761 [5.376e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53763 [5.376e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53765 [5.376e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53767 [5.376e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53769 [5.376e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53771 [5.377e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53773 [5.377e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53775 [5.377e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53777 [5.377e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53779 [5.377e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53781 [5.378e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53783 [5.378e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53785 [5.378e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53787 [5.378e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53789 [5.378e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53791 [5.379e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53793 [5.379e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53795 [5.379e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53797 [5.379e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53799 [5.379e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53801 [5.38e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53803 [5.38e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53805 [5.38e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53807 [5.38e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53809 [5.38e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53811 [5.381e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53813 [5.381e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53815 [5.381e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53817 [5.381e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53819 [5.381e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53821 [5.382e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53823 [5.382e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53825 [5.382e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53827 [5.382e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53829 [5.382e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53831 [5.383e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53833 [5.383e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53835 [5.383e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53837 [5.383e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53839 [5.383e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53841 [5.384e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53843 [5.384e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53845 [5.384e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53847 [5.384e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53849 [5.384e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53851 [5.385e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53853 [5.385e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53855 [5.385e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53857 [5.385e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53859 [5.385e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53861 [5.386e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53863 [5.386e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53865 [5.386e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53867 [5.386e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53869 [5.386e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53871 [5.387e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53873 [5.387e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53875 [5.387e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53877 [5.387e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53879 [5.387e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53881 [5.388e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53883 [5.388e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53885 [5.388e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53887 [5.388e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53889 [5.388e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53891 [5.389e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53893 [5.389e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53895 [5.389e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53897 [5.389e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53899 [5.389e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53901 [5.39e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53903 [5.39e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53905 [5.39e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53907 [5.39e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53909 [5.39e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53911 [5.391e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53913 [5.391e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53915 [5.391e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53917 [5.391e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53919 [5.391e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53921 [5.392e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53923 [5.392e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53925 [5.392e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53927 [5.392e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53929 [5.392e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53931 [5.393e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53933 [5.393e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53935 [5.393e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53937 [5.393e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53939 [5.393e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53941 [5.394e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53943 [5.394e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53945 [5.394e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53947 [5.394e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53949 [5.394e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53951 [5.395e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53953 [5.395e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53955 [5.395e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53957 [5.395e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53959 [5.395e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53961 [5.396e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53963 [5.396e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53965 [5.396e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53967 [5.396e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53969 [5.396e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53971 [5.397e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53973 [5.397e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53975 [5.397e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53977 [5.397e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53979 [5.397e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53981 [5.398e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53983 [5.398e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53985 [5.398e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53987 [5.398e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53989 [5.398e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53991 [5.399e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53993 [5.399e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53995 [5.399e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53997 [5.399e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 53999 [5.399e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54001 [5.4e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54003 [5.4e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54005 [5.4e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54007 [5.4e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54009 [5.4e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54011 [5.401e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54013 [5.401e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54015 [5.401e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54017 [5.401e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54019 [5.401e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54021 [5.402e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54023 [5.402e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54025 [5.402e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54027 [5.402e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54029 [5.402e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54031 [5.403e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54033 [5.403e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54035 [5.403e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54037 [5.403e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54039 [5.403e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54041 [5.404e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54043 [5.404e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54045 [5.404e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54047 [5.404e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54049 [5.404e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54051 [5.405e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54053 [5.405e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54055 [5.405e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54057 [5.405e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54059 [5.405e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54061 [5.406e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54063 [5.406e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54065 [5.406e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54067 [5.406e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54069 [5.406e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54071 [5.407e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54073 [5.407e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54075 [5.407e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54077 [5.407e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54079 [5.407e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54081 [5.408e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54083 [5.408e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54085 [5.408e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54087 [5.408e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54089 [5.408e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54091 [5.409e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54093 [5.409e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54095 [5.409e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54097 [5.409e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54099 [5.409e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54101 [5.41e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54103 [5.41e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54105 [5.41e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54107 [5.41e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54109 [5.41e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54111 [5.411e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54113 [5.411e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54115 [5.411e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54117 [5.411e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54119 [5.411e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54121 [5.412e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54123 [5.412e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54125 [5.412e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54127 [5.412e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54129 [5.412e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54131 [5.413e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54133 [5.413e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54135 [5.413e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54137 [5.413e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54139 [5.413e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54141 [5.414e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54143 [5.414e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54145 [5.414e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54147 [5.414e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54149 [5.414e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54151 [5.415e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54153 [5.415e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54155 [5.415e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54157 [5.415e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54159 [5.415e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54161 [5.416e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54163 [5.416e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54165 [5.416e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54167 [5.416e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54169 [5.416e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54171 [5.417e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54173 [5.417e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54175 [5.417e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54177 [5.417e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54179 [5.417e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54181 [5.418e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54183 [5.418e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54185 [5.418e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54187 [5.418e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54189 [5.418e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54191 [5.419e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54193 [5.419e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54195 [5.419e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54197 [5.419e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54199 [5.419e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54201 [5.42e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54203 [5.42e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54205 [5.42e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54207 [5.42e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54209 [5.42e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54211 [5.421e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54213 [5.421e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54215 [5.421e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54217 [5.421e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54219 [5.421e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54221 [5.422e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54223 [5.422e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54225 [5.422e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54227 [5.422e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54229 [5.422e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54231 [5.423e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54233 [5.423e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54235 [5.423e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54237 [5.423e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54239 [5.423e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54241 [5.424e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54243 [5.424e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54245 [5.424e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54247 [5.424e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54249 [5.424e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54251 [5.425e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54253 [5.425e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54255 [5.425e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54257 [5.425e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54259 [5.425e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54261 [5.426e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54263 [5.426e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54265 [5.426e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54267 [5.426e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54269 [5.426e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54271 [5.427e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54273 [5.427e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54275 [5.427e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54277 [5.427e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54279 [5.427e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54281 [5.428e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54283 [5.428e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54285 [5.428e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54287 [5.428e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54289 [5.428e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54291 [5.429e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54293 [5.429e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54295 [5.429e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54297 [5.429e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54299 [5.429e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54301 [5.43e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54303 [5.43e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54305 [5.43e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54307 [5.43e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54309 [5.43e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54311 [5.431e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54313 [5.431e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54315 [5.431e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54317 [5.431e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54319 [5.431e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54321 [5.432e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54323 [5.432e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54325 [5.432e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54327 [5.432e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54329 [5.432e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54331 [5.433e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54333 [5.433e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54335 [5.433e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54337 [5.433e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54339 [5.433e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54341 [5.434e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54343 [5.434e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54345 [5.434e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54347 [5.434e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54349 [5.434e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54351 [5.435e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54353 [5.435e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54355 [5.435e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54357 [5.435e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54359 [5.435e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54361 [5.436e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54363 [5.436e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54365 [5.436e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54367 [5.436e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54369 [5.436e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54371 [5.437e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54373 [5.437e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54375 [5.437e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54377 [5.437e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54379 [5.437e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54381 [5.438e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54383 [5.438e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54385 [5.438e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54387 [5.438e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54389 [5.438e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54391 [5.439e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54393 [5.439e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54395 [5.439e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54397 [5.439e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54399 [5.439e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54401 [5.44e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54403 [5.44e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54405 [5.44e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54407 [5.44e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54409 [5.44e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54411 [5.441e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54413 [5.441e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54415 [5.441e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54417 [5.441e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54419 [5.441e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54421 [5.442e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54423 [5.442e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54425 [5.442e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54427 [5.442e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54429 [5.442e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54431 [5.443e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54433 [5.443e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54435 [5.443e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54437 [5.443e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54439 [5.443e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54441 [5.444e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54443 [5.444e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54445 [5.444e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54447 [5.444e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54449 [5.444e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54451 [5.445e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54453 [5.445e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54455 [5.445e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54457 [5.445e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54459 [5.445e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54461 [5.446e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54463 [5.446e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54465 [5.446e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54467 [5.446e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54469 [5.446e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54471 [5.447e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54473 [5.447e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54475 [5.447e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54477 [5.447e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54479 [5.447e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54481 [5.448e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54483 [5.448e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54485 [5.448e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54487 [5.448e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54489 [5.448e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54491 [5.449e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54493 [5.449e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54495 [5.449e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54497 [5.449e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54499 [5.449e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54501 [5.45e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54503 [5.45e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54505 [5.45e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54507 [5.45e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54509 [5.45e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54511 [5.451e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54513 [5.451e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54515 [5.451e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54517 [5.451e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54519 [5.451e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54521 [5.452e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54523 [5.452e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54525 [5.452e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54527 [5.452e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54529 [5.452e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54531 [5.453e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54533 [5.453e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54535 [5.453e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54537 [5.453e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54539 [5.453e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54541 [5.454e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54543 [5.454e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54545 [5.454e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54547 [5.454e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54549 [5.454e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54551 [5.455e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54553 [5.455e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54555 [5.455e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54557 [5.455e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54559 [5.455e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54561 [5.456e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54563 [5.456e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54565 [5.456e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54567 [5.456e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54569 [5.456e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54571 [5.457e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54573 [5.457e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54575 [5.457e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54577 [5.457e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54579 [5.457e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54581 [5.458e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54583 [5.458e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54585 [5.458e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54587 [5.458e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54589 [5.458e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54591 [5.459e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54593 [5.459e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54595 [5.459e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54597 [5.459e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54599 [5.459e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54601 [5.46e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54603 [5.46e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54605 [5.46e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54607 [5.46e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54609 [5.46e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54611 [5.461e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54613 [5.461e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54615 [5.461e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54617 [5.461e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54619 [5.461e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54621 [5.462e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54623 [5.462e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54625 [5.462e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54627 [5.462e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54629 [5.462e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54631 [5.463e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54633 [5.463e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54635 [5.463e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54637 [5.463e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54639 [5.463e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54641 [5.464e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54643 [5.464e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54645 [5.464e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54647 [5.464e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54649 [5.464e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54651 [5.465e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54653 [5.465e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54655 [5.465e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54657 [5.465e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54659 [5.465e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54661 [5.466e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54663 [5.466e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54665 [5.466e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54667 [5.466e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54669 [5.466e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54671 [5.467e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54673 [5.467e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54675 [5.467e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54677 [5.467e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54679 [5.467e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54681 [5.468e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54683 [5.468e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54685 [5.468e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54687 [5.468e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54689 [5.468e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54691 [5.469e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54693 [5.469e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54695 [5.469e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54697 [5.469e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54699 [5.469e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54701 [5.47e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54703 [5.47e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54705 [5.47e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54707 [5.47e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54709 [5.47e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54711 [5.471e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54713 [5.471e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54715 [5.471e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54717 [5.471e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54719 [5.471e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54721 [5.472e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54723 [5.472e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54725 [5.472e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54727 [5.472e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54729 [5.472e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54731 [5.473e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54733 [5.473e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54735 [5.473e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54737 [5.473e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54739 [5.473e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54741 [5.474e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54743 [5.474e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54745 [5.474e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54747 [5.474e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54749 [5.474e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54751 [5.475e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54753 [5.475e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54755 [5.475e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54757 [5.475e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54759 [5.475e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54761 [5.476e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54763 [5.476e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54765 [5.476e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54767 [5.476e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54769 [5.476e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54771 [5.477e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54773 [5.477e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54775 [5.477e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54777 [5.477e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54779 [5.477e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54781 [5.478e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54783 [5.478e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54785 [5.478e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54787 [5.478e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54789 [5.478e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54791 [5.479e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54793 [5.479e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54795 [5.479e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54797 [5.479e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54799 [5.479e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54801 [5.48e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54803 [5.48e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54805 [5.48e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54807 [5.48e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54809 [5.48e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54811 [5.481e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54813 [5.481e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54815 [5.481e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54817 [5.481e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54819 [5.481e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54821 [5.482e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54823 [5.482e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54825 [5.482e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54827 [5.482e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54829 [5.482e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54831 [5.483e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54833 [5.483e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54835 [5.483e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54837 [5.483e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54839 [5.483e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54841 [5.484e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54843 [5.484e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54845 [5.484e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54847 [5.484e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54849 [5.484e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54851 [5.485e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54853 [5.485e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54855 [5.485e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54857 [5.485e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54859 [5.485e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54861 [5.486e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54863 [5.486e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54865 [5.486e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54867 [5.486e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54869 [5.486e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54871 [5.487e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54873 [5.487e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54875 [5.487e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54877 [5.487e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54879 [5.487e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54881 [5.488e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54883 [5.488e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54885 [5.488e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54887 [5.488e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54889 [5.488e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54891 [5.489e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54893 [5.489e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54895 [5.489e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54897 [5.489e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54899 [5.489e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54901 [5.49e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54903 [5.49e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54905 [5.49e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54907 [5.49e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54909 [5.49e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54911 [5.491e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54913 [5.491e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54915 [5.491e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54917 [5.491e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54919 [5.491e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54921 [5.492e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54923 [5.492e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54925 [5.492e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54927 [5.492e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54929 [5.492e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54931 [5.493e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54933 [5.493e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54935 [5.493e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54937 [5.493e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54939 [5.493e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54941 [5.494e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54943 [5.494e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54945 [5.494e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54947 [5.494e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54949 [5.494e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54951 [5.495e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54953 [5.495e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54955 [5.495e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54957 [5.495e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54959 [5.495e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54961 [5.496e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54963 [5.496e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54965 [5.496e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54967 [5.496e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54969 [5.496e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54971 [5.497e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54973 [5.497e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54975 [5.497e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54977 [5.497e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54979 [5.497e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54981 [5.498e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54983 [5.498e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54985 [5.498e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54987 [5.498e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54989 [5.498e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54991 [5.499e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54993 [5.499e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54995 [5.499e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54997 [5.499e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 54999 [5.499e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55001 [5.5e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55003 [5.5e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55005 [5.5e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55007 [5.5e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55009 [5.5e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55011 [5.501e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55013 [5.501e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55015 [5.501e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55017 [5.501e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55019 [5.501e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55021 [5.502e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55023 [5.502e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55025 [5.502e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55027 [5.502e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55029 [5.502e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55031 [5.503e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55033 [5.503e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55035 [5.503e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55037 [5.503e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55039 [5.503e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55041 [5.504e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55043 [5.504e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55045 [5.504e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55047 [5.504e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55049 [5.504e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55051 [5.505e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55053 [5.505e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55055 [5.505e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55057 [5.505e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55059 [5.505e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55061 [5.506e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55063 [5.506e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55065 [5.506e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55067 [5.506e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55069 [5.506e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55071 [5.507e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55073 [5.507e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55075 [5.507e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55077 [5.507e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55079 [5.507e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55081 [5.508e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55083 [5.508e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55085 [5.508e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55087 [5.508e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55089 [5.508e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55091 [5.509e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55093 [5.509e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55095 [5.509e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55097 [5.509e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55099 [5.509e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55101 [5.51e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55103 [5.51e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55105 [5.51e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55107 [5.51e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55109 [5.51e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55111 [5.511e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55113 [5.511e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55115 [5.511e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55117 [5.511e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55119 [5.511e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55121 [5.512e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55123 [5.512e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55125 [5.512e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55127 [5.512e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55129 [5.512e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55131 [5.513e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55133 [5.513e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55135 [5.513e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55137 [5.513e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55139 [5.513e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55141 [5.514e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55143 [5.514e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55145 [5.514e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55147 [5.514e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55149 [5.514e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55151 [5.515e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55153 [5.515e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55155 [5.515e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55157 [5.515e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55159 [5.515e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55161 [5.516e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55163 [5.516e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55165 [5.516e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55167 [5.516e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55169 [5.516e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55171 [5.517e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55173 [5.517e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55175 [5.517e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55177 [5.517e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55179 [5.517e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55181 [5.518e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55183 [5.518e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55185 [5.518e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55187 [5.518e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55189 [5.518e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55191 [5.519e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55193 [5.519e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55195 [5.519e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55197 [5.519e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55199 [5.519e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55201 [5.52e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55203 [5.52e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55205 [5.52e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55207 [5.52e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55209 [5.52e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55211 [5.521e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55213 [5.521e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55215 [5.521e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55217 [5.521e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55219 [5.521e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55221 [5.522e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55223 [5.522e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55225 [5.522e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55227 [5.522e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55229 [5.522e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55231 [5.523e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55233 [5.523e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55235 [5.523e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55237 [5.523e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55239 [5.523e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55241 [5.524e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55243 [5.524e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55245 [5.524e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55247 [5.524e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55249 [5.524e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55251 [5.525e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55253 [5.525e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55255 [5.525e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55257 [5.525e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55259 [5.525e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55261 [5.526e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55263 [5.526e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55265 [5.526e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55267 [5.526e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55269 [5.526e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55271 [5.527e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55273 [5.527e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55275 [5.527e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55277 [5.527e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55279 [5.527e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55281 [5.528e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55283 [5.528e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55285 [5.528e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55287 [5.528e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55289 [5.528e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55291 [5.529e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55293 [5.529e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55295 [5.529e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55297 [5.529e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55299 [5.529e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55301 [5.53e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55303 [5.53e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55305 [5.53e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55307 [5.53e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55309 [5.53e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55311 [5.531e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55313 [5.531e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55315 [5.531e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55317 [5.531e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55319 [5.531e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55321 [5.532e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55323 [5.532e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55325 [5.532e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55327 [5.532e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55329 [5.532e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55331 [5.533e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55333 [5.533e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55335 [5.533e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55337 [5.533e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55339 [5.533e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55341 [5.534e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55343 [5.534e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55345 [5.534e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55347 [5.534e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55349 [5.534e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55351 [5.535e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55353 [5.535e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55355 [5.535e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55357 [5.535e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55359 [5.535e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55361 [5.536e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55363 [5.536e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55365 [5.536e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55367 [5.536e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55369 [5.536e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55371 [5.537e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55373 [5.537e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55375 [5.537e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55377 [5.537e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55379 [5.537e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55381 [5.538e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55383 [5.538e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55385 [5.538e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55387 [5.538e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55389 [5.538e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55391 [5.539e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55393 [5.539e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55395 [5.539e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55397 [5.539e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55399 [5.539e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55401 [5.54e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55403 [5.54e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55405 [5.54e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55407 [5.54e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55409 [5.54e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55411 [5.541e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55413 [5.541e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55415 [5.541e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55417 [5.541e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55419 [5.541e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55421 [5.542e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55423 [5.542e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55425 [5.542e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55427 [5.542e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55429 [5.542e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55431 [5.543e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55433 [5.543e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55435 [5.543e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55437 [5.543e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55439 [5.543e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55441 [5.544e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55443 [5.544e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55445 [5.544e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55447 [5.544e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55449 [5.544e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55451 [5.545e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55453 [5.545e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55455 [5.545e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55457 [5.545e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55459 [5.545e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55461 [5.546e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55463 [5.546e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55465 [5.546e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55467 [5.546e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55469 [5.546e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55471 [5.547e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55473 [5.547e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55475 [5.547e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55477 [5.547e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55479 [5.547e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55481 [5.548e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55483 [5.548e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55485 [5.548e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55487 [5.548e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55489 [5.548e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55491 [5.549e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55493 [5.549e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55495 [5.549e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55497 [5.549e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55499 [5.549e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55501 [5.55e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55503 [5.55e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55505 [5.55e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55507 [5.55e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55509 [5.55e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55511 [5.551e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55513 [5.551e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55515 [5.551e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55517 [5.551e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55519 [5.551e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55521 [5.552e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55523 [5.552e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55525 [5.552e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55527 [5.552e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55529 [5.552e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55531 [5.553e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55533 [5.553e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55535 [5.553e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55537 [5.553e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55539 [5.553e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55541 [5.554e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55543 [5.554e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55545 [5.554e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55547 [5.554e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55549 [5.554e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55551 [5.555e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55553 [5.555e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55555 [5.555e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55557 [5.555e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55559 [5.555e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55561 [5.556e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55563 [5.556e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55565 [5.556e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55567 [5.556e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55569 [5.556e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55571 [5.557e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55573 [5.557e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55575 [5.557e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55577 [5.557e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55579 [5.557e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55581 [5.558e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55583 [5.558e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55585 [5.558e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55587 [5.558e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55589 [5.558e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55591 [5.559e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55593 [5.559e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55595 [5.559e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55597 [5.559e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55599 [5.559e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55601 [5.56e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55603 [5.56e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55605 [5.56e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55607 [5.56e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55609 [5.56e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55611 [5.561e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55613 [5.561e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55615 [5.561e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55617 [5.561e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55619 [5.561e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55621 [5.562e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55623 [5.562e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55625 [5.562e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55627 [5.562e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55629 [5.562e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55631 [5.563e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55633 [5.563e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55635 [5.563e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55637 [5.563e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55639 [5.563e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55641 [5.564e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55643 [5.564e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55645 [5.564e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55647 [5.564e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55649 [5.564e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55651 [5.565e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55653 [5.565e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55655 [5.565e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55657 [5.565e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55659 [5.565e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55661 [5.566e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55663 [5.566e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55665 [5.566e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55667 [5.566e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55669 [5.566e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55671 [5.567e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55673 [5.567e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55675 [5.567e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55677 [5.567e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55679 [5.567e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55681 [5.568e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55683 [5.568e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55685 [5.568e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55687 [5.568e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55689 [5.568e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55691 [5.569e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55693 [5.569e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55695 [5.569e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55697 [5.569e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55699 [5.569e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55701 [5.57e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55703 [5.57e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55705 [5.57e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55707 [5.57e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55709 [5.57e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55711 [5.571e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55713 [5.571e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55715 [5.571e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55717 [5.571e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55719 [5.571e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55721 [5.572e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55723 [5.572e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55725 [5.572e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55727 [5.572e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55729 [5.572e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55731 [5.573e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55733 [5.573e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55735 [5.573e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55737 [5.573e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55739 [5.573e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55741 [5.574e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55743 [5.574e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55745 [5.574e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55747 [5.574e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55749 [5.574e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55751 [5.575e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55753 [5.575e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55755 [5.575e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55757 [5.575e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55759 [5.575e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55761 [5.576e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55763 [5.576e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55765 [5.576e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55767 [5.576e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55769 [5.576e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55771 [5.577e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55773 [5.577e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55775 [5.577e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55777 [5.577e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55779 [5.577e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55781 [5.578e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55783 [5.578e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55785 [5.578e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55787 [5.578e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55789 [5.578e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55791 [5.579e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55793 [5.579e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55795 [5.579e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55797 [5.579e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55799 [5.579e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55801 [5.58e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55803 [5.58e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55805 [5.58e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55807 [5.58e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55809 [5.58e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55811 [5.581e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55813 [5.581e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55815 [5.581e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55817 [5.581e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55819 [5.581e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55821 [5.582e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55823 [5.582e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55825 [5.582e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55827 [5.582e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55829 [5.582e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55831 [5.583e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55833 [5.583e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55835 [5.583e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55837 [5.583e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55839 [5.583e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55841 [5.584e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55843 [5.584e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55845 [5.584e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55847 [5.584e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55849 [5.584e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55851 [5.585e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55853 [5.585e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55855 [5.585e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55857 [5.585e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55859 [5.585e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55861 [5.586e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55863 [5.586e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55865 [5.586e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55867 [5.586e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55869 [5.586e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55871 [5.587e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55873 [5.587e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55875 [5.587e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55877 [5.587e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55879 [5.587e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55881 [5.588e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55883 [5.588e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55885 [5.588e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55887 [5.588e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55889 [5.588e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55891 [5.589e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55893 [5.589e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55895 [5.589e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55897 [5.589e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55899 [5.589e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55901 [5.59e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55903 [5.59e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55905 [5.59e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55907 [5.59e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55909 [5.59e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55911 [5.591e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55913 [5.591e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55915 [5.591e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55917 [5.591e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55919 [5.591e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55921 [5.592e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55923 [5.592e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55925 [5.592e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55927 [5.592e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55929 [5.592e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55931 [5.593e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55933 [5.593e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55935 [5.593e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55937 [5.593e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55939 [5.593e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55941 [5.594e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55943 [5.594e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55945 [5.594e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55947 [5.594e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55949 [5.594e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55951 [5.595e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55953 [5.595e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55955 [5.595e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55957 [5.595e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55959 [5.595e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55961 [5.596e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55963 [5.596e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55965 [5.596e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55967 [5.596e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55969 [5.596e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55971 [5.597e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55973 [5.597e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55975 [5.597e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55977 [5.597e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55979 [5.597e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55981 [5.598e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55983 [5.598e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55985 [5.598e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55987 [5.598e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55989 [5.598e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55991 [5.599e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55993 [5.599e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55995 [5.599e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55997 [5.599e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 55999 [5.599e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56001 [5.6e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56003 [5.6e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56005 [5.6e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56007 [5.6e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56009 [5.6e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56011 [5.601e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56013 [5.601e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56015 [5.601e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56017 [5.601e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56019 [5.601e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56021 [5.602e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56023 [5.602e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56025 [5.602e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56027 [5.602e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56029 [5.602e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56031 [5.603e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56033 [5.603e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56035 [5.603e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56037 [5.603e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56039 [5.603e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56041 [5.604e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56043 [5.604e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56045 [5.604e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56047 [5.604e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56049 [5.604e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56051 [5.605e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56053 [5.605e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56055 [5.605e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56057 [5.605e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56059 [5.605e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56061 [5.606e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56063 [5.606e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56065 [5.606e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56067 [5.606e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56069 [5.606e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56071 [5.607e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56073 [5.607e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56075 [5.607e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56077 [5.607e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56079 [5.607e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56081 [5.608e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56083 [5.608e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56085 [5.608e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56087 [5.608e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56089 [5.608e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56091 [5.609e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56093 [5.609e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56095 [5.609e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56097 [5.609e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56099 [5.609e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56101 [5.61e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56103 [5.61e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56105 [5.61e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56107 [5.61e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56109 [5.61e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56111 [5.611e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56113 [5.611e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56115 [5.611e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56117 [5.611e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56119 [5.611e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56121 [5.612e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56123 [5.612e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56125 [5.612e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56127 [5.612e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56129 [5.612e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56131 [5.613e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56133 [5.613e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56135 [5.613e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56137 [5.613e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56139 [5.613e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56141 [5.614e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56143 [5.614e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56145 [5.614e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56147 [5.614e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56149 [5.614e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56151 [5.615e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56153 [5.615e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56155 [5.615e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56157 [5.615e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56159 [5.615e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56161 [5.616e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56163 [5.616e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56165 [5.616e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56167 [5.616e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56169 [5.616e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56171 [5.617e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56173 [5.617e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56175 [5.617e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56177 [5.617e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56179 [5.617e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56181 [5.618e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56183 [5.618e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56185 [5.618e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56187 [5.618e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56189 [5.618e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56191 [5.619e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56193 [5.619e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56195 [5.619e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56197 [5.619e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56199 [5.619e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56201 [5.62e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56203 [5.62e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56205 [5.62e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56207 [5.62e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56209 [5.62e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56211 [5.621e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56213 [5.621e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56215 [5.621e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56217 [5.621e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56219 [5.621e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56221 [5.622e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56223 [5.622e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56225 [5.622e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56227 [5.622e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56229 [5.622e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56231 [5.623e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56233 [5.623e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56235 [5.623e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56237 [5.623e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56239 [5.623e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56241 [5.624e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56243 [5.624e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56245 [5.624e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56247 [5.624e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56249 [5.624e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56251 [5.625e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56253 [5.625e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56255 [5.625e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56257 [5.625e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56259 [5.625e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56261 [5.626e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56263 [5.626e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56265 [5.626e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56267 [5.626e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56269 [5.626e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56271 [5.627e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56273 [5.627e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56275 [5.627e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56277 [5.627e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56279 [5.627e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56281 [5.628e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56283 [5.628e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56285 [5.628e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56287 [5.628e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56289 [5.628e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56291 [5.629e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56293 [5.629e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56295 [5.629e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56297 [5.629e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56299 [5.629e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56301 [5.63e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56303 [5.63e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56305 [5.63e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56307 [5.63e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56309 [5.63e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56311 [5.631e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56313 [5.631e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56315 [5.631e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56317 [5.631e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56319 [5.631e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56321 [5.632e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56323 [5.632e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56325 [5.632e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56327 [5.632e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56329 [5.632e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56331 [5.633e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56333 [5.633e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56335 [5.633e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56337 [5.633e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56339 [5.633e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56341 [5.634e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56343 [5.634e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56345 [5.634e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56347 [5.634e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56349 [5.634e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56351 [5.635e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56353 [5.635e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56355 [5.635e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56357 [5.635e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56359 [5.635e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56361 [5.636e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56363 [5.636e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56365 [5.636e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56367 [5.636e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56369 [5.636e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56371 [5.637e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56373 [5.637e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56375 [5.637e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56377 [5.637e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56379 [5.637e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56381 [5.638e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56383 [5.638e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56385 [5.638e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56387 [5.638e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56389 [5.638e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56391 [5.639e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56393 [5.639e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56395 [5.639e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56397 [5.639e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56399 [5.639e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56401 [5.64e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56403 [5.64e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56405 [5.64e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56407 [5.64e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56409 [5.64e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56411 [5.641e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56413 [5.641e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56415 [5.641e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56417 [5.641e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56419 [5.641e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56421 [5.642e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56423 [5.642e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56425 [5.642e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56427 [5.642e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56429 [5.642e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56431 [5.643e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56433 [5.643e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56435 [5.643e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56437 [5.643e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56439 [5.643e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56441 [5.644e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56443 [5.644e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56445 [5.644e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56447 [5.644e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56449 [5.644e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56451 [5.645e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56453 [5.645e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56455 [5.645e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56457 [5.645e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56459 [5.645e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56461 [5.646e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56463 [5.646e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56465 [5.646e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56467 [5.646e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56469 [5.646e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56471 [5.647e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56473 [5.647e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56475 [5.647e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56477 [5.647e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56479 [5.647e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56481 [5.648e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56483 [5.648e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56485 [5.648e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56487 [5.648e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56489 [5.648e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56491 [5.649e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56493 [5.649e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56495 [5.649e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56497 [5.649e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56499 [5.649e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56501 [5.65e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56503 [5.65e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56505 [5.65e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56507 [5.65e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56509 [5.65e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56511 [5.651e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56513 [5.651e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56515 [5.651e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56517 [5.651e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56519 [5.651e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56521 [5.652e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56523 [5.652e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56525 [5.652e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56527 [5.652e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56529 [5.652e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56531 [5.653e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56533 [5.653e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56535 [5.653e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56537 [5.653e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56539 [5.653e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56541 [5.654e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56543 [5.654e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56545 [5.654e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56547 [5.654e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56549 [5.654e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56551 [5.655e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56553 [5.655e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56555 [5.655e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56557 [5.655e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56559 [5.655e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56561 [5.656e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56563 [5.656e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56565 [5.656e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56567 [5.656e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56569 [5.656e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56571 [5.657e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56573 [5.657e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56575 [5.657e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56577 [5.657e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56579 [5.657e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56581 [5.658e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56583 [5.658e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56585 [5.658e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56587 [5.658e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56589 [5.658e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56591 [5.659e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56593 [5.659e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56595 [5.659e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56597 [5.659e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56599 [5.659e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56601 [5.66e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56603 [5.66e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56605 [5.66e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56607 [5.66e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56609 [5.66e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56611 [5.661e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56613 [5.661e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56615 [5.661e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56617 [5.661e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56619 [5.661e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56621 [5.662e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56623 [5.662e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56625 [5.662e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56627 [5.662e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56629 [5.662e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56631 [5.663e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56633 [5.663e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56635 [5.663e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56637 [5.663e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56639 [5.663e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56641 [5.664e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56643 [5.664e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56645 [5.664e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56647 [5.664e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56649 [5.664e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56651 [5.665e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56653 [5.665e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56655 [5.665e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56657 [5.665e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56659 [5.665e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56661 [5.666e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56663 [5.666e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56665 [5.666e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56667 [5.666e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56669 [5.666e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56671 [5.667e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56673 [5.667e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56675 [5.667e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56677 [5.667e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56679 [5.667e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56681 [5.668e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56683 [5.668e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56685 [5.668e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56687 [5.668e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56689 [5.668e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56691 [5.669e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56693 [5.669e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56695 [5.669e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56697 [5.669e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56699 [5.669e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56701 [5.67e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56703 [5.67e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56705 [5.67e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56707 [5.67e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56709 [5.67e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56711 [5.671e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56713 [5.671e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56715 [5.671e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56717 [5.671e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56719 [5.671e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56721 [5.672e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56723 [5.672e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56725 [5.672e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56727 [5.672e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56729 [5.672e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56731 [5.673e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56733 [5.673e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56735 [5.673e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56737 [5.673e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56739 [5.673e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56741 [5.674e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56743 [5.674e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56745 [5.674e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56747 [5.674e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56749 [5.674e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56751 [5.675e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56753 [5.675e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56755 [5.675e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56757 [5.675e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56759 [5.675e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56761 [5.676e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56763 [5.676e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56765 [5.676e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56767 [5.676e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56769 [5.676e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56771 [5.677e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56773 [5.677e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56775 [5.677e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56777 [5.677e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56779 [5.677e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56781 [5.678e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56783 [5.678e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56785 [5.678e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56787 [5.678e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56789 [5.678e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56791 [5.679e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56793 [5.679e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56795 [5.679e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56797 [5.679e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56799 [5.679e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56801 [5.68e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56803 [5.68e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56805 [5.68e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56807 [5.68e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56809 [5.68e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56811 [5.681e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56813 [5.681e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56815 [5.681e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56817 [5.681e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56819 [5.681e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56821 [5.682e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56823 [5.682e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56825 [5.682e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56827 [5.682e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56829 [5.682e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56831 [5.683e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56833 [5.683e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56835 [5.683e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56837 [5.683e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56839 [5.683e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56841 [5.684e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56843 [5.684e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56845 [5.684e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56847 [5.684e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56849 [5.684e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56851 [5.685e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56853 [5.685e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56855 [5.685e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56857 [5.685e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56859 [5.685e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56861 [5.686e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56863 [5.686e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56865 [5.686e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56867 [5.686e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56869 [5.686e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56871 [5.687e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56873 [5.687e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56875 [5.687e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56877 [5.687e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56879 [5.687e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56881 [5.688e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56883 [5.688e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56885 [5.688e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56887 [5.688e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56889 [5.688e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56891 [5.689e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56893 [5.689e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56895 [5.689e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56897 [5.689e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56899 [5.689e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56901 [5.69e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56903 [5.69e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56905 [5.69e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56907 [5.69e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56909 [5.69e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56911 [5.691e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56913 [5.691e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56915 [5.691e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56917 [5.691e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56919 [5.691e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56921 [5.692e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56923 [5.692e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56925 [5.692e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56927 [5.692e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56929 [5.692e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56931 [5.693e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56933 [5.693e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56935 [5.693e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56937 [5.693e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56939 [5.693e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56941 [5.694e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56943 [5.694e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56945 [5.694e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56947 [5.694e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56949 [5.694e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56951 [5.695e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56953 [5.695e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56955 [5.695e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56957 [5.695e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56959 [5.695e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56961 [5.696e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56963 [5.696e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56965 [5.696e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56967 [5.696e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56969 [5.696e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56971 [5.697e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56973 [5.697e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56975 [5.697e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56977 [5.697e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56979 [5.697e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56981 [5.698e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56983 [5.698e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56985 [5.698e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56987 [5.698e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56989 [5.698e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56991 [5.699e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56993 [5.699e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56995 [5.699e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56997 [5.699e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 56999 [5.699e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57001 [5.7e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57003 [5.7e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57005 [5.7e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57007 [5.7e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57009 [5.7e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57011 [5.701e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57013 [5.701e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57015 [5.701e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57017 [5.701e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57019 [5.701e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57021 [5.702e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57023 [5.702e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57025 [5.702e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57027 [5.702e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57029 [5.702e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57031 [5.703e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57033 [5.703e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57035 [5.703e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57037 [5.703e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57039 [5.703e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57041 [5.704e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57043 [5.704e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57045 [5.704e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57047 [5.704e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57049 [5.704e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57051 [5.705e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57053 [5.705e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57055 [5.705e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57057 [5.705e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57059 [5.705e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57061 [5.706e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57063 [5.706e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57065 [5.706e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57067 [5.706e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57069 [5.706e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57071 [5.707e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57073 [5.707e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57075 [5.707e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57077 [5.707e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57079 [5.707e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57081 [5.708e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57083 [5.708e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57085 [5.708e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57087 [5.708e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57089 [5.708e4])
    │   ├─ emit TracePC(pc: 57090 [5.709e4])
    │   ├─ emit TracePC(pc: 57092 [5.709e4])
    │   ├─ emit TracePC(pc: 57093 [5.709e4])
    │   ├─ emit TracePC(pc: 57095 [5.709e4])
    │   ├─ emit TracePC(pc: 57098 [5.709e4])
    │   ├─ emit TracePC(pc: 57100 [5.71e4])
    │   ├─ emit TracePC(pc: 57103 [5.71e4])
    │   ├─ emit TracePC(pc: 57105 [5.71e4])
    │   ├─ emit TracePC(pc: 57108 [5.71e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57110 [5.711e4])
    │   ├─ emit TracePC(pc: 57113 [5.711e4])
    │   ├─ emit TracePC(pc: 57116 [5.711e4])
    │   ├─ emit TracePC(pc: 57117 [5.711e4])
    │   ├─ emit TracePC(pc: 57119 [5.711e4])
    │   ├─ emit TracePC(pc: 57122 [5.712e4])
    │   ├─ emit TracePC(pc: 57130 [5.713e4])
    │   ├─ emit TracePC(pc: 57579 [5.757e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57581 [5.758e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57583 [5.758e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57585 [5.758e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57587 [5.758e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57589 [5.758e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57591 [5.759e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57593 [5.759e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57595 [5.759e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57597 [5.759e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57599 [5.759e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57601 [5.76e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57603 [5.76e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57605 [5.76e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57607 [5.76e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57609 [5.76e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57611 [5.761e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57613 [5.761e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57615 [5.761e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57617 [5.761e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57619 [5.761e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57621 [5.762e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57623 [5.762e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57625 [5.762e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57627 [5.762e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57629 [5.762e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57631 [5.763e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57633 [5.763e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57635 [5.763e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57637 [5.763e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57639 [5.763e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57641 [5.764e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57643 [5.764e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57645 [5.764e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57647 [5.764e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57649 [5.764e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57651 [5.765e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57653 [5.765e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57655 [5.765e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57657 [5.765e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57659 [5.765e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57661 [5.766e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57663 [5.766e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57665 [5.766e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57667 [5.766e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57669 [5.766e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57671 [5.767e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57673 [5.767e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57675 [5.767e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57677 [5.767e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57679 [5.767e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57681 [5.768e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57683 [5.768e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57685 [5.768e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57687 [5.768e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57689 [5.768e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57691 [5.769e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57693 [5.769e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57695 [5.769e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57697 [5.769e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57699 [5.769e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57701 [5.77e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57703 [5.77e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57705 [5.77e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57707 [5.77e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57709 [5.77e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57711 [5.771e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57713 [5.771e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57715 [5.771e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57717 [5.771e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57719 [5.771e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57721 [5.772e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57723 [5.772e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57725 [5.772e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57727 [5.772e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57729 [5.772e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57731 [5.773e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57733 [5.773e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57735 [5.773e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57737 [5.773e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57739 [5.773e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57741 [5.774e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57743 [5.774e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57745 [5.774e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57747 [5.774e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57749 [5.774e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57751 [5.775e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57753 [5.775e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57755 [5.775e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57757 [5.775e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57759 [5.775e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57761 [5.776e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57763 [5.776e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57765 [5.776e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57767 [5.776e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57769 [5.776e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57771 [5.777e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57773 [5.777e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57775 [5.777e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57777 [5.777e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57779 [5.777e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57781 [5.778e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57783 [5.778e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57785 [5.778e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57787 [5.778e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57789 [5.778e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57791 [5.779e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57793 [5.779e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57795 [5.779e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57797 [5.779e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57799 [5.779e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57801 [5.78e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57803 [5.78e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57805 [5.78e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57807 [5.78e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57809 [5.78e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57811 [5.781e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57813 [5.781e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57815 [5.781e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57817 [5.781e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57819 [5.781e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57821 [5.782e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57823 [5.782e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57825 [5.782e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57827 [5.782e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57829 [5.782e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57831 [5.783e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57833 [5.783e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57835 [5.783e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57837 [5.783e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57839 [5.783e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57841 [5.784e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57843 [5.784e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57845 [5.784e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57847 [5.784e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57849 [5.784e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57851 [5.785e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57853 [5.785e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57855 [5.785e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57857 [5.785e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57859 [5.785e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57861 [5.786e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57863 [5.786e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57865 [5.786e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57867 [5.786e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57869 [5.786e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57871 [5.787e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57873 [5.787e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57875 [5.787e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57877 [5.787e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57879 [5.787e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57881 [5.788e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57883 [5.788e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57885 [5.788e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57887 [5.788e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57889 [5.788e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57891 [5.789e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57893 [5.789e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57895 [5.789e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57897 [5.789e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57899 [5.789e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57901 [5.79e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57903 [5.79e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57905 [5.79e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57907 [5.79e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57909 [5.79e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57911 [5.791e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57913 [5.791e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57915 [5.791e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57917 [5.791e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57919 [5.791e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57921 [5.792e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57923 [5.792e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57925 [5.792e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57927 [5.792e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57929 [5.792e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57931 [5.793e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57933 [5.793e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57935 [5.793e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57937 [5.793e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57939 [5.793e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57941 [5.794e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57943 [5.794e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57945 [5.794e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57947 [5.794e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57949 [5.794e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57951 [5.795e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57953 [5.795e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57955 [5.795e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57957 [5.795e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57959 [5.795e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57961 [5.796e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57963 [5.796e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57965 [5.796e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57967 [5.796e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57969 [5.796e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57971 [5.797e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57973 [5.797e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57975 [5.797e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57977 [5.797e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57979 [5.797e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57981 [5.798e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57983 [5.798e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57985 [5.798e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57987 [5.798e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57989 [5.798e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57991 [5.799e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57993 [5.799e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57995 [5.799e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57997 [5.799e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 57999 [5.799e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58001 [5.8e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58003 [5.8e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58005 [5.8e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58007 [5.8e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58009 [5.8e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58011 [5.801e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58013 [5.801e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58015 [5.801e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58017 [5.801e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58019 [5.801e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58021 [5.802e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58023 [5.802e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58025 [5.802e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58027 [5.802e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58029 [5.802e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58031 [5.803e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58033 [5.803e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58035 [5.803e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58037 [5.803e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58039 [5.803e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58041 [5.804e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58043 [5.804e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58045 [5.804e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58047 [5.804e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58049 [5.804e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58051 [5.805e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58053 [5.805e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58055 [5.805e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58057 [5.805e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58059 [5.805e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58061 [5.806e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58063 [5.806e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58065 [5.806e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58067 [5.806e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58069 [5.806e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58071 [5.807e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58073 [5.807e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58075 [5.807e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58077 [5.807e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58079 [5.807e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58081 [5.808e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58083 [5.808e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58085 [5.808e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58087 [5.808e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58089 [5.808e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58091 [5.809e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58093 [5.809e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58095 [5.809e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58097 [5.809e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58099 [5.809e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58101 [5.81e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58103 [5.81e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58105 [5.81e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58107 [5.81e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58109 [5.81e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58111 [5.811e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58113 [5.811e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58115 [5.811e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58117 [5.811e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58119 [5.811e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58121 [5.812e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58123 [5.812e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58125 [5.812e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58127 [5.812e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58129 [5.812e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58131 [5.813e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58133 [5.813e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58135 [5.813e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58137 [5.813e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58139 [5.813e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58141 [5.814e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58143 [5.814e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58145 [5.814e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58147 [5.814e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58149 [5.814e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58151 [5.815e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58153 [5.815e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58155 [5.815e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58157 [5.815e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58159 [5.815e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58161 [5.816e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58163 [5.816e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58165 [5.816e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58167 [5.816e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58169 [5.816e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58171 [5.817e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58173 [5.817e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58175 [5.817e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58177 [5.817e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58179 [5.817e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58181 [5.818e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58183 [5.818e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58185 [5.818e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58187 [5.818e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58189 [5.818e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58191 [5.819e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58193 [5.819e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58195 [5.819e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58197 [5.819e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58199 [5.819e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58201 [5.82e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58203 [5.82e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58205 [5.82e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58207 [5.82e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58209 [5.82e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58211 [5.821e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58213 [5.821e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58215 [5.821e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58217 [5.821e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58219 [5.821e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58221 [5.822e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58223 [5.822e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58225 [5.822e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58227 [5.822e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58229 [5.822e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58231 [5.823e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58233 [5.823e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58235 [5.823e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58237 [5.823e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58239 [5.823e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58241 [5.824e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58243 [5.824e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58245 [5.824e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58247 [5.824e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58249 [5.824e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58251 [5.825e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58253 [5.825e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58255 [5.825e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58257 [5.825e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58259 [5.825e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58261 [5.826e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58263 [5.826e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58265 [5.826e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58267 [5.826e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58269 [5.826e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58271 [5.827e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58273 [5.827e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58275 [5.827e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58277 [5.827e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58279 [5.827e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58281 [5.828e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58283 [5.828e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58285 [5.828e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58287 [5.828e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58289 [5.828e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58291 [5.829e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58293 [5.829e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58295 [5.829e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58297 [5.829e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58299 [5.829e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58301 [5.83e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58303 [5.83e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58305 [5.83e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58307 [5.83e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58309 [5.83e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58311 [5.831e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58313 [5.831e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58315 [5.831e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58317 [5.831e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58319 [5.831e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58321 [5.832e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58323 [5.832e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58325 [5.832e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58327 [5.832e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58329 [5.832e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58331 [5.833e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58333 [5.833e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58335 [5.833e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58337 [5.833e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58339 [5.833e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58341 [5.834e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58343 [5.834e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58345 [5.834e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58347 [5.834e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58349 [5.834e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58351 [5.835e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58353 [5.835e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58355 [5.835e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58357 [5.835e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58359 [5.835e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58361 [5.836e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58363 [5.836e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58365 [5.836e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58367 [5.836e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58369 [5.836e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58371 [5.837e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58373 [5.837e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58375 [5.837e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58377 [5.837e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58379 [5.837e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58381 [5.838e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58383 [5.838e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58385 [5.838e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58387 [5.838e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58389 [5.838e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58391 [5.839e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58393 [5.839e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58395 [5.839e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58397 [5.839e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58399 [5.839e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58401 [5.84e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58403 [5.84e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58405 [5.84e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58407 [5.84e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58409 [5.84e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58411 [5.841e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58413 [5.841e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58415 [5.841e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58417 [5.841e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58419 [5.841e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58421 [5.842e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58423 [5.842e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58425 [5.842e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58427 [5.842e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58429 [5.842e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58431 [5.843e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58433 [5.843e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58435 [5.843e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58437 [5.843e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58439 [5.843e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58441 [5.844e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58443 [5.844e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58445 [5.844e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58447 [5.844e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58449 [5.844e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58451 [5.845e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58453 [5.845e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58455 [5.845e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58457 [5.845e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58459 [5.845e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58461 [5.846e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58463 [5.846e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58465 [5.846e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58467 [5.846e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58469 [5.846e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58471 [5.847e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58473 [5.847e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58475 [5.847e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58477 [5.847e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58479 [5.847e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58481 [5.848e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58483 [5.848e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58485 [5.848e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58487 [5.848e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58489 [5.848e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58491 [5.849e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58493 [5.849e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58495 [5.849e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58497 [5.849e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58499 [5.849e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58501 [5.85e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58503 [5.85e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58505 [5.85e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58507 [5.85e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58509 [5.85e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58511 [5.851e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58513 [5.851e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58515 [5.851e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58517 [5.851e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58519 [5.851e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58521 [5.852e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58523 [5.852e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58525 [5.852e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58527 [5.852e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58529 [5.852e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58531 [5.853e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58533 [5.853e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58535 [5.853e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58537 [5.853e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58539 [5.853e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58541 [5.854e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58543 [5.854e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58545 [5.854e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58547 [5.854e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58549 [5.854e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58551 [5.855e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58553 [5.855e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58555 [5.855e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58557 [5.855e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58559 [5.855e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58561 [5.856e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58563 [5.856e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58565 [5.856e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58567 [5.856e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58569 [5.856e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58571 [5.857e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58573 [5.857e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58575 [5.857e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58577 [5.857e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58579 [5.857e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58581 [5.858e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58583 [5.858e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58585 [5.858e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58587 [5.858e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58589 [5.858e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58591 [5.859e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58593 [5.859e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58595 [5.859e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58597 [5.859e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58599 [5.859e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58601 [5.86e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58603 [5.86e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58605 [5.86e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58607 [5.86e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58609 [5.86e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58611 [5.861e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58613 [5.861e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58615 [5.861e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58617 [5.861e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58619 [5.861e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58621 [5.862e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58623 [5.862e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58625 [5.862e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58627 [5.862e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58629 [5.862e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58631 [5.863e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58633 [5.863e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58635 [5.863e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58637 [5.863e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58639 [5.863e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58641 [5.864e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58643 [5.864e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58645 [5.864e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58647 [5.864e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58649 [5.864e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58651 [5.865e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58653 [5.865e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58655 [5.865e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58657 [5.865e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58659 [5.865e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58661 [5.866e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58663 [5.866e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58665 [5.866e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58667 [5.866e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58669 [5.866e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58671 [5.867e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58673 [5.867e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58675 [5.867e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58677 [5.867e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58679 [5.867e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58681 [5.868e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58683 [5.868e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58685 [5.868e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58687 [5.868e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58689 [5.868e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58691 [5.869e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58693 [5.869e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58695 [5.869e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58697 [5.869e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58699 [5.869e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58701 [5.87e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58703 [5.87e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58705 [5.87e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58707 [5.87e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58709 [5.87e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58711 [5.871e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58713 [5.871e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58715 [5.871e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58717 [5.871e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58719 [5.871e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58721 [5.872e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58723 [5.872e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58725 [5.872e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58727 [5.872e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58729 [5.872e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58731 [5.873e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58733 [5.873e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58735 [5.873e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58737 [5.873e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58739 [5.873e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58741 [5.874e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58743 [5.874e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58745 [5.874e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58747 [5.874e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58749 [5.874e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58751 [5.875e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58753 [5.875e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58755 [5.875e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58757 [5.875e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58759 [5.875e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58761 [5.876e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58763 [5.876e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58765 [5.876e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58767 [5.876e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58769 [5.876e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58771 [5.877e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58773 [5.877e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58775 [5.877e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58777 [5.877e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58779 [5.877e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58781 [5.878e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58783 [5.878e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58785 [5.878e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58787 [5.878e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58789 [5.878e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58791 [5.879e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58793 [5.879e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58795 [5.879e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58797 [5.879e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58799 [5.879e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58801 [5.88e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58803 [5.88e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58805 [5.88e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58807 [5.88e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58809 [5.88e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58811 [5.881e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58813 [5.881e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58815 [5.881e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58817 [5.881e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58819 [5.881e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58821 [5.882e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58823 [5.882e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58825 [5.882e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58827 [5.882e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58829 [5.882e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58831 [5.883e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58833 [5.883e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58835 [5.883e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58837 [5.883e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58839 [5.883e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58841 [5.884e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58843 [5.884e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58845 [5.884e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58847 [5.884e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58849 [5.884e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58851 [5.885e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58853 [5.885e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58855 [5.885e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58857 [5.885e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58859 [5.885e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58861 [5.886e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58863 [5.886e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58865 [5.886e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58867 [5.886e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58869 [5.886e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58871 [5.887e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58873 [5.887e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58875 [5.887e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58877 [5.887e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58879 [5.887e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58881 [5.888e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58883 [5.888e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58885 [5.888e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58887 [5.888e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58889 [5.888e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58891 [5.889e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58893 [5.889e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58895 [5.889e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58897 [5.889e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58899 [5.889e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58901 [5.89e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58903 [5.89e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58905 [5.89e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58907 [5.89e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58909 [5.89e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58911 [5.891e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58913 [5.891e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58915 [5.891e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58917 [5.891e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58919 [5.891e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58921 [5.892e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58923 [5.892e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58925 [5.892e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58927 [5.892e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58929 [5.892e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58931 [5.893e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58933 [5.893e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58935 [5.893e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58937 [5.893e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58939 [5.893e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58941 [5.894e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58943 [5.894e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58945 [5.894e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58947 [5.894e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58949 [5.894e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58951 [5.895e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58953 [5.895e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58955 [5.895e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58957 [5.895e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58959 [5.895e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58961 [5.896e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58963 [5.896e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58965 [5.896e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58967 [5.896e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58969 [5.896e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58971 [5.897e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58973 [5.897e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58975 [5.897e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58977 [5.897e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58979 [5.897e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58981 [5.898e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58983 [5.898e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58985 [5.898e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58987 [5.898e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58989 [5.898e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58991 [5.899e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58993 [5.899e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58995 [5.899e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58997 [5.899e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 58999 [5.899e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59001 [5.9e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59003 [5.9e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59005 [5.9e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59007 [5.9e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59009 [5.9e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59011 [5.901e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59013 [5.901e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59015 [5.901e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59017 [5.901e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59019 [5.901e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59021 [5.902e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59023 [5.902e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59025 [5.902e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59027 [5.902e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59029 [5.902e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59031 [5.903e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59033 [5.903e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59035 [5.903e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59037 [5.903e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59039 [5.903e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59041 [5.904e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59043 [5.904e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59045 [5.904e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59047 [5.904e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59049 [5.904e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59051 [5.905e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59053 [5.905e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59055 [5.905e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59057 [5.905e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59059 [5.905e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59061 [5.906e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59063 [5.906e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59065 [5.906e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59067 [5.906e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59069 [5.906e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59071 [5.907e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59073 [5.907e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59075 [5.907e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59077 [5.907e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59079 [5.907e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59081 [5.908e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59083 [5.908e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59085 [5.908e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59087 [5.908e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59089 [5.908e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59091 [5.909e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59093 [5.909e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59095 [5.909e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59097 [5.909e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59099 [5.909e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59101 [5.91e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59103 [5.91e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59105 [5.91e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59107 [5.91e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59109 [5.91e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59111 [5.911e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59113 [5.911e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59115 [5.911e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59117 [5.911e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59119 [5.911e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59121 [5.912e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59123 [5.912e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59125 [5.912e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59127 [5.912e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59129 [5.912e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59131 [5.913e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59133 [5.913e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59135 [5.913e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59137 [5.913e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59139 [5.913e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59141 [5.914e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59143 [5.914e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59145 [5.914e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59147 [5.914e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59149 [5.914e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59151 [5.915e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59153 [5.915e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59155 [5.915e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59157 [5.915e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59159 [5.915e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59161 [5.916e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59163 [5.916e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59165 [5.916e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59167 [5.916e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59169 [5.916e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59171 [5.917e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59173 [5.917e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59175 [5.917e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59177 [5.917e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59179 [5.917e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59181 [5.918e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59183 [5.918e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59185 [5.918e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59187 [5.918e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59189 [5.918e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59191 [5.919e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59193 [5.919e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59195 [5.919e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59197 [5.919e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59199 [5.919e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59201 [5.92e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59203 [5.92e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59205 [5.92e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59207 [5.92e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59209 [5.92e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59211 [5.921e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59213 [5.921e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59215 [5.921e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59217 [5.921e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59219 [5.921e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59221 [5.922e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59223 [5.922e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59225 [5.922e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59227 [5.922e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59229 [5.922e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59231 [5.923e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59233 [5.923e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59235 [5.923e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59237 [5.923e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59239 [5.923e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59241 [5.924e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59243 [5.924e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59245 [5.924e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59247 [5.924e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59249 [5.924e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59251 [5.925e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59253 [5.925e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59255 [5.925e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59257 [5.925e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59259 [5.925e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59261 [5.926e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59263 [5.926e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59265 [5.926e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59267 [5.926e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59269 [5.926e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59271 [5.927e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59273 [5.927e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59275 [5.927e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59277 [5.927e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59279 [5.927e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59281 [5.928e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59283 [5.928e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59285 [5.928e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59287 [5.928e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59289 [5.928e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59291 [5.929e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59293 [5.929e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59295 [5.929e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59297 [5.929e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59299 [5.929e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59301 [5.93e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59303 [5.93e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59305 [5.93e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59307 [5.93e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59309 [5.93e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59311 [5.931e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59313 [5.931e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59315 [5.931e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59317 [5.931e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59319 [5.931e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59321 [5.932e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59323 [5.932e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59325 [5.932e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59327 [5.932e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59329 [5.932e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59331 [5.933e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59333 [5.933e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59335 [5.933e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59337 [5.933e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59339 [5.933e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59341 [5.934e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59343 [5.934e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59345 [5.934e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59347 [5.934e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59349 [5.934e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59351 [5.935e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59353 [5.935e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59355 [5.935e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59357 [5.935e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59359 [5.935e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59361 [5.936e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59363 [5.936e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59365 [5.936e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59367 [5.936e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59369 [5.936e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59371 [5.937e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59373 [5.937e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59375 [5.937e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59377 [5.937e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59379 [5.937e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59381 [5.938e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59383 [5.938e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59385 [5.938e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59387 [5.938e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59389 [5.938e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59391 [5.939e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59393 [5.939e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59395 [5.939e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59397 [5.939e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59399 [5.939e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59401 [5.94e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59403 [5.94e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59405 [5.94e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59407 [5.94e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59409 [5.94e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59411 [5.941e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59413 [5.941e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59415 [5.941e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59417 [5.941e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59419 [5.941e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59421 [5.942e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59423 [5.942e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59425 [5.942e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59427 [5.942e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59429 [5.942e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59431 [5.943e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59433 [5.943e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59435 [5.943e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59437 [5.943e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59439 [5.943e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59441 [5.944e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59443 [5.944e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59445 [5.944e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59447 [5.944e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59449 [5.944e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59451 [5.945e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59453 [5.945e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59455 [5.945e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59457 [5.945e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59459 [5.945e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59461 [5.946e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59463 [5.946e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59465 [5.946e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59467 [5.946e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59469 [5.946e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59471 [5.947e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59473 [5.947e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59475 [5.947e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59477 [5.947e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59479 [5.947e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59481 [5.948e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59483 [5.948e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59485 [5.948e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59487 [5.948e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59489 [5.948e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59491 [5.949e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59493 [5.949e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59495 [5.949e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59497 [5.949e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59499 [5.949e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59501 [5.95e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59503 [5.95e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59505 [5.95e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59507 [5.95e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59509 [5.95e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59511 [5.951e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59513 [5.951e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59515 [5.951e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59517 [5.951e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59519 [5.951e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59521 [5.952e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59523 [5.952e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59525 [5.952e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59527 [5.952e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59529 [5.952e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59531 [5.953e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59533 [5.953e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59535 [5.953e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59537 [5.953e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59539 [5.953e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59541 [5.954e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59543 [5.954e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59545 [5.954e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59547 [5.954e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59549 [5.954e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59551 [5.955e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59553 [5.955e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59555 [5.955e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59557 [5.955e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59559 [5.955e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59561 [5.956e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59563 [5.956e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59565 [5.956e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59567 [5.956e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59569 [5.956e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59571 [5.957e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59573 [5.957e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59575 [5.957e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59577 [5.957e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59579 [5.957e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59581 [5.958e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59583 [5.958e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59585 [5.958e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59587 [5.958e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59589 [5.958e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59591 [5.959e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59593 [5.959e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59595 [5.959e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59597 [5.959e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59599 [5.959e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59601 [5.96e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59603 [5.96e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59605 [5.96e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59607 [5.96e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59609 [5.96e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59611 [5.961e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59613 [5.961e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59615 [5.961e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59617 [5.961e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59619 [5.961e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59621 [5.962e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59623 [5.962e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59625 [5.962e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59627 [5.962e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59629 [5.962e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59631 [5.963e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59633 [5.963e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59635 [5.963e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59637 [5.963e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59639 [5.963e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59641 [5.964e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59643 [5.964e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59645 [5.964e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59647 [5.964e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59649 [5.964e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59651 [5.965e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59653 [5.965e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59655 [5.965e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59657 [5.965e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59659 [5.965e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59661 [5.966e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59663 [5.966e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59665 [5.966e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59667 [5.966e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59669 [5.966e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59671 [5.967e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59673 [5.967e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59675 [5.967e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59677 [5.967e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59679 [5.967e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59681 [5.968e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59683 [5.968e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59685 [5.968e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59687 [5.968e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59689 [5.968e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59691 [5.969e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59693 [5.969e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59695 [5.969e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59697 [5.969e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59699 [5.969e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59701 [5.97e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59703 [5.97e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59705 [5.97e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59707 [5.97e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59709 [5.97e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59711 [5.971e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59713 [5.971e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59715 [5.971e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59717 [5.971e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59719 [5.971e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59721 [5.972e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59723 [5.972e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59725 [5.972e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59727 [5.972e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59729 [5.972e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59731 [5.973e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59733 [5.973e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59735 [5.973e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59737 [5.973e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59739 [5.973e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59741 [5.974e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59743 [5.974e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59745 [5.974e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59747 [5.974e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59749 [5.974e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59751 [5.975e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59753 [5.975e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59755 [5.975e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59757 [5.975e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59759 [5.975e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59761 [5.976e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59763 [5.976e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59765 [5.976e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59767 [5.976e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59769 [5.976e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59771 [5.977e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59773 [5.977e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59775 [5.977e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59777 [5.977e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59779 [5.977e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59781 [5.978e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59783 [5.978e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59785 [5.978e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59787 [5.978e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59789 [5.978e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59791 [5.979e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59793 [5.979e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59795 [5.979e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59797 [5.979e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59799 [5.979e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59801 [5.98e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59803 [5.98e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59805 [5.98e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59807 [5.98e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59809 [5.98e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59811 [5.981e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59813 [5.981e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59815 [5.981e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59817 [5.981e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59819 [5.981e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59821 [5.982e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59823 [5.982e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59825 [5.982e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59827 [5.982e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59829 [5.982e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59831 [5.983e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59833 [5.983e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59835 [5.983e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59837 [5.983e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59839 [5.983e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59841 [5.984e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59843 [5.984e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59845 [5.984e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59847 [5.984e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59849 [5.984e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59851 [5.985e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59853 [5.985e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59855 [5.985e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59857 [5.985e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59859 [5.985e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59861 [5.986e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59863 [5.986e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59865 [5.986e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59867 [5.986e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59869 [5.986e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59871 [5.987e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59873 [5.987e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59875 [5.987e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59877 [5.987e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59879 [5.987e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59881 [5.988e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59883 [5.988e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59885 [5.988e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59887 [5.988e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59889 [5.988e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59891 [5.989e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59893 [5.989e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59895 [5.989e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59897 [5.989e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59899 [5.989e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59901 [5.99e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59903 [5.99e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59905 [5.99e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59907 [5.99e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59909 [5.99e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59911 [5.991e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59913 [5.991e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59915 [5.991e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59917 [5.991e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59919 [5.991e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59921 [5.992e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59923 [5.992e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59925 [5.992e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59927 [5.992e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59929 [5.992e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59931 [5.993e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59933 [5.993e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59935 [5.993e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59937 [5.993e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59939 [5.993e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59941 [5.994e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59943 [5.994e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59945 [5.994e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59947 [5.994e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59949 [5.994e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59951 [5.995e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59953 [5.995e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59955 [5.995e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59957 [5.995e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59959 [5.995e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59961 [5.996e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59963 [5.996e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59965 [5.996e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59967 [5.996e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59969 [5.996e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59971 [5.997e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59973 [5.997e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59975 [5.997e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59977 [5.997e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59979 [5.997e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59981 [5.998e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59983 [5.998e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59985 [5.998e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59987 [5.998e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59989 [5.998e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59991 [5.999e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59993 [5.999e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59995 [5.999e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59997 [5.999e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 59999 [5.999e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60001 [6e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60003 [6e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60005 [6e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60007 [6e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60009 [6e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60011 [6.001e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60013 [6.001e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60015 [6.001e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60017 [6.001e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60019 [6.001e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60021 [6.002e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60023 [6.002e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60025 [6.002e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60027 [6.002e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60029 [6.002e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60031 [6.003e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60033 [6.003e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60035 [6.003e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60037 [6.003e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60039 [6.003e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60041 [6.004e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60043 [6.004e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60045 [6.004e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60047 [6.004e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60049 [6.004e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60051 [6.005e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60053 [6.005e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60055 [6.005e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60057 [6.005e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60059 [6.005e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60061 [6.006e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60063 [6.006e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60065 [6.006e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60067 [6.006e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60069 [6.006e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60071 [6.007e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60073 [6.007e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60075 [6.007e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60077 [6.007e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60079 [6.007e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60081 [6.008e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60083 [6.008e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60085 [6.008e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60087 [6.008e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60089 [6.008e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60091 [6.009e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60093 [6.009e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60095 [6.009e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60097 [6.009e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60099 [6.009e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60101 [6.01e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60103 [6.01e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60105 [6.01e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60107 [6.01e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60109 [6.01e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60111 [6.011e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60113 [6.011e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60115 [6.011e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60117 [6.011e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60119 [6.011e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60121 [6.012e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60123 [6.012e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60125 [6.012e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60127 [6.012e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60129 [6.012e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60131 [6.013e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60133 [6.013e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60135 [6.013e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60137 [6.013e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60139 [6.013e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60141 [6.014e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60143 [6.014e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60145 [6.014e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60147 [6.014e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60149 [6.014e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60151 [6.015e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60153 [6.015e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60155 [6.015e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60157 [6.015e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60159 [6.015e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60161 [6.016e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60163 [6.016e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60165 [6.016e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60167 [6.016e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60169 [6.016e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60171 [6.017e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60173 [6.017e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60175 [6.017e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60177 [6.017e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60179 [6.017e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60181 [6.018e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60183 [6.018e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60185 [6.018e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60187 [6.018e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60189 [6.018e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60191 [6.019e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60193 [6.019e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60195 [6.019e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60197 [6.019e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60199 [6.019e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60201 [6.02e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60203 [6.02e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60205 [6.02e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60207 [6.02e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60209 [6.02e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60211 [6.021e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60213 [6.021e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60215 [6.021e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60217 [6.021e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60219 [6.021e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60221 [6.022e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60223 [6.022e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60225 [6.022e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60227 [6.022e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60229 [6.022e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60231 [6.023e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60233 [6.023e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60235 [6.023e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60237 [6.023e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60239 [6.023e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60241 [6.024e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60243 [6.024e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60245 [6.024e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60247 [6.024e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60249 [6.024e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60251 [6.025e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60253 [6.025e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60255 [6.025e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60257 [6.025e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60259 [6.025e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60261 [6.026e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60263 [6.026e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60265 [6.026e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60267 [6.026e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60269 [6.026e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60271 [6.027e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60273 [6.027e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60275 [6.027e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60277 [6.027e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60279 [6.027e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60281 [6.028e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60283 [6.028e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60285 [6.028e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60287 [6.028e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60289 [6.028e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60291 [6.029e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60293 [6.029e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60295 [6.029e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60297 [6.029e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60299 [6.029e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60301 [6.03e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60303 [6.03e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60305 [6.03e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60307 [6.03e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60309 [6.03e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60311 [6.031e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60313 [6.031e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60315 [6.031e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60317 [6.031e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60319 [6.031e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60321 [6.032e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60323 [6.032e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60325 [6.032e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60327 [6.032e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60329 [6.032e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60331 [6.033e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60333 [6.033e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60335 [6.033e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60337 [6.033e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60339 [6.033e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60341 [6.034e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60343 [6.034e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60345 [6.034e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60347 [6.034e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60349 [6.034e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60351 [6.035e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60353 [6.035e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60355 [6.035e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60357 [6.035e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60359 [6.035e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60361 [6.036e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60363 [6.036e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60365 [6.036e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60367 [6.036e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60369 [6.036e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60371 [6.037e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60373 [6.037e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60375 [6.037e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60377 [6.037e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60379 [6.037e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60381 [6.038e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60383 [6.038e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60385 [6.038e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60387 [6.038e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60389 [6.038e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60391 [6.039e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60393 [6.039e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60395 [6.039e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60397 [6.039e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60399 [6.039e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60401 [6.04e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60403 [6.04e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60405 [6.04e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60407 [6.04e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60409 [6.04e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60411 [6.041e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60413 [6.041e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60415 [6.041e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60417 [6.041e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60419 [6.041e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60421 [6.042e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60423 [6.042e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60425 [6.042e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60427 [6.042e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60429 [6.042e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60431 [6.043e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60433 [6.043e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60435 [6.043e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60437 [6.043e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60439 [6.043e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60441 [6.044e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60443 [6.044e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60445 [6.044e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60447 [6.044e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60449 [6.044e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60451 [6.045e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60453 [6.045e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60455 [6.045e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60457 [6.045e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60459 [6.045e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60461 [6.046e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60463 [6.046e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60465 [6.046e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60467 [6.046e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60469 [6.046e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60471 [6.047e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60473 [6.047e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60475 [6.047e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60477 [6.047e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60479 [6.047e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60481 [6.048e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60483 [6.048e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60485 [6.048e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60487 [6.048e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60489 [6.048e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60491 [6.049e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60493 [6.049e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60495 [6.049e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60497 [6.049e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60499 [6.049e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60501 [6.05e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60503 [6.05e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60505 [6.05e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60507 [6.05e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60509 [6.05e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60511 [6.051e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60513 [6.051e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60515 [6.051e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60517 [6.051e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60519 [6.051e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60521 [6.052e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60523 [6.052e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60525 [6.052e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60527 [6.052e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60529 [6.052e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60531 [6.053e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60533 [6.053e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60535 [6.053e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60537 [6.053e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60539 [6.053e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60541 [6.054e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60543 [6.054e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60545 [6.054e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60547 [6.054e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60549 [6.054e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60551 [6.055e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60553 [6.055e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60555 [6.055e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60557 [6.055e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60559 [6.055e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60561 [6.056e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60563 [6.056e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60565 [6.056e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60567 [6.056e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60569 [6.056e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60571 [6.057e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60573 [6.057e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60575 [6.057e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60577 [6.057e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60579 [6.057e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60581 [6.058e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60583 [6.058e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60585 [6.058e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60587 [6.058e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60589 [6.058e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60591 [6.059e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60593 [6.059e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60595 [6.059e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60597 [6.059e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60599 [6.059e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60601 [6.06e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60603 [6.06e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60605 [6.06e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60607 [6.06e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60609 [6.06e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60611 [6.061e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60613 [6.061e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60615 [6.061e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60617 [6.061e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60619 [6.061e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60621 [6.062e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60623 [6.062e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60625 [6.062e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60627 [6.062e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60629 [6.062e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60631 [6.063e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60633 [6.063e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60635 [6.063e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60637 [6.063e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60639 [6.063e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60641 [6.064e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60643 [6.064e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60645 [6.064e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60647 [6.064e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60649 [6.064e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60651 [6.065e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60653 [6.065e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60655 [6.065e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60657 [6.065e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60659 [6.065e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60661 [6.066e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60663 [6.066e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60665 [6.066e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60667 [6.066e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60669 [6.066e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60671 [6.067e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60673 [6.067e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60675 [6.067e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60677 [6.067e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60679 [6.067e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60681 [6.068e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60683 [6.068e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60685 [6.068e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60687 [6.068e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60689 [6.068e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60691 [6.069e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60693 [6.069e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60695 [6.069e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60697 [6.069e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60699 [6.069e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60701 [6.07e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60703 [6.07e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60705 [6.07e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60707 [6.07e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60709 [6.07e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60711 [6.071e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60713 [6.071e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60715 [6.071e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60717 [6.071e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60719 [6.071e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60721 [6.072e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60723 [6.072e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60725 [6.072e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60727 [6.072e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60729 [6.072e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60731 [6.073e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60733 [6.073e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60735 [6.073e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60737 [6.073e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60739 [6.073e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60741 [6.074e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60743 [6.074e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60745 [6.074e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60747 [6.074e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60749 [6.074e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60751 [6.075e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60753 [6.075e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60755 [6.075e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60757 [6.075e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60759 [6.075e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60761 [6.076e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60763 [6.076e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60765 [6.076e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60767 [6.076e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60769 [6.076e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60771 [6.077e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60773 [6.077e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60775 [6.077e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60777 [6.077e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60779 [6.077e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60781 [6.078e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60783 [6.078e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60785 [6.078e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60787 [6.078e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60789 [6.078e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60791 [6.079e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60793 [6.079e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60795 [6.079e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60797 [6.079e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60799 [6.079e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60801 [6.08e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60803 [6.08e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60805 [6.08e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60807 [6.08e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60809 [6.08e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60811 [6.081e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60813 [6.081e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60815 [6.081e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60817 [6.081e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60819 [6.081e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60821 [6.082e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60823 [6.082e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60825 [6.082e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60827 [6.082e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60829 [6.082e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60831 [6.083e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60833 [6.083e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60835 [6.083e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60837 [6.083e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60839 [6.083e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60841 [6.084e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60843 [6.084e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60845 [6.084e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60847 [6.084e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60849 [6.084e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60851 [6.085e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60853 [6.085e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60855 [6.085e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60857 [6.085e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60859 [6.085e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60861 [6.086e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60863 [6.086e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60865 [6.086e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60867 [6.086e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60869 [6.086e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60871 [6.087e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60873 [6.087e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60875 [6.087e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60877 [6.087e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60879 [6.087e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60881 [6.088e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60883 [6.088e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60885 [6.088e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60887 [6.088e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60889 [6.088e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60891 [6.089e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60893 [6.089e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60895 [6.089e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60897 [6.089e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60899 [6.089e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60901 [6.09e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60903 [6.09e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60905 [6.09e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60907 [6.09e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60909 [6.09e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60911 [6.091e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60913 [6.091e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60915 [6.091e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60917 [6.091e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60919 [6.091e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60921 [6.092e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60923 [6.092e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60925 [6.092e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60927 [6.092e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60929 [6.092e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60931 [6.093e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60933 [6.093e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60935 [6.093e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60937 [6.093e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60939 [6.093e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60941 [6.094e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60943 [6.094e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60945 [6.094e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60947 [6.094e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60949 [6.094e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60951 [6.095e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60953 [6.095e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60955 [6.095e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60957 [6.095e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60959 [6.095e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60961 [6.096e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60963 [6.096e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60965 [6.096e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60967 [6.096e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60969 [6.096e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60971 [6.097e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60973 [6.097e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60975 [6.097e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60977 [6.097e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60979 [6.097e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60981 [6.098e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60983 [6.098e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60985 [6.098e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60987 [6.098e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60989 [6.098e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60991 [6.099e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60993 [6.099e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60995 [6.099e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60997 [6.099e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 60999 [6.099e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61001 [6.1e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61003 [6.1e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61005 [6.1e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61007 [6.1e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61009 [6.1e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61011 [6.101e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61013 [6.101e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61015 [6.101e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61017 [6.101e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61019 [6.101e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61021 [6.102e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61023 [6.102e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61025 [6.102e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61027 [6.102e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61029 [6.102e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61031 [6.103e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61033 [6.103e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61035 [6.103e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61037 [6.103e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61039 [6.103e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61041 [6.104e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61043 [6.104e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61045 [6.104e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61047 [6.104e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61049 [6.104e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61051 [6.105e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61053 [6.105e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61055 [6.105e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61057 [6.105e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61059 [6.105e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61061 [6.106e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61063 [6.106e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61065 [6.106e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61067 [6.106e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61069 [6.106e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61071 [6.107e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61073 [6.107e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61075 [6.107e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61077 [6.107e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61079 [6.107e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61081 [6.108e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61083 [6.108e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61085 [6.108e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61087 [6.108e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61089 [6.108e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61091 [6.109e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61093 [6.109e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61095 [6.109e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61097 [6.109e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61099 [6.109e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61101 [6.11e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61103 [6.11e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61105 [6.11e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61107 [6.11e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61109 [6.11e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61111 [6.111e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61113 [6.111e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61115 [6.111e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61117 [6.111e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61119 [6.111e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61121 [6.112e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61123 [6.112e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61125 [6.112e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61127 [6.112e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61129 [6.112e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61131 [6.113e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61133 [6.113e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61135 [6.113e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61137 [6.113e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61139 [6.113e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61141 [6.114e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61143 [6.114e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61145 [6.114e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61147 [6.114e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61149 [6.114e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61151 [6.115e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61153 [6.115e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61155 [6.115e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61157 [6.115e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61159 [6.115e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61161 [6.116e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61163 [6.116e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61165 [6.116e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61167 [6.116e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61169 [6.116e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61171 [6.117e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61173 [6.117e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61175 [6.117e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61177 [6.117e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61179 [6.117e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61181 [6.118e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61183 [6.118e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61185 [6.118e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61187 [6.118e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61189 [6.118e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61191 [6.119e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61193 [6.119e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61195 [6.119e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61197 [6.119e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61199 [6.119e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61201 [6.12e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61203 [6.12e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61205 [6.12e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61207 [6.12e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61209 [6.12e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61211 [6.121e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61213 [6.121e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61215 [6.121e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61217 [6.121e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61219 [6.121e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61221 [6.122e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61223 [6.122e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61225 [6.122e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61227 [6.122e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61229 [6.122e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61231 [6.123e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61233 [6.123e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61235 [6.123e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61237 [6.123e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61239 [6.123e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61241 [6.124e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61243 [6.124e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61245 [6.124e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61247 [6.124e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61249 [6.124e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61251 [6.125e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61253 [6.125e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61255 [6.125e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61257 [6.125e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61259 [6.125e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61261 [6.126e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61263 [6.126e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61265 [6.126e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61267 [6.126e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61269 [6.126e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61271 [6.127e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61273 [6.127e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61275 [6.127e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61277 [6.127e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61279 [6.127e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61281 [6.128e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61283 [6.128e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61285 [6.128e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61287 [6.128e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61289 [6.128e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61291 [6.129e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61293 [6.129e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61295 [6.129e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61297 [6.129e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61299 [6.129e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61301 [6.13e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61303 [6.13e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61305 [6.13e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61307 [6.13e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61309 [6.13e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61311 [6.131e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61313 [6.131e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61315 [6.131e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61317 [6.131e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61319 [6.131e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61321 [6.132e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61323 [6.132e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61325 [6.132e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61327 [6.132e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61329 [6.132e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61331 [6.133e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61333 [6.133e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61335 [6.133e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61337 [6.133e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61339 [6.133e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61341 [6.134e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61343 [6.134e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61345 [6.134e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61347 [6.134e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61349 [6.134e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61351 [6.135e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61353 [6.135e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61355 [6.135e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61357 [6.135e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61359 [6.135e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61361 [6.136e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61363 [6.136e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61365 [6.136e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61367 [6.136e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61369 [6.136e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61371 [6.137e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61373 [6.137e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61375 [6.137e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61377 [6.137e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61379 [6.137e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61381 [6.138e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61383 [6.138e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61385 [6.138e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61387 [6.138e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61389 [6.138e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61391 [6.139e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61393 [6.139e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61395 [6.139e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61397 [6.139e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61399 [6.139e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61401 [6.14e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61403 [6.14e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61405 [6.14e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61407 [6.14e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61409 [6.14e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61411 [6.141e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61413 [6.141e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61415 [6.141e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61417 [6.141e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61419 [6.141e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61421 [6.142e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61423 [6.142e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61425 [6.142e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61427 [6.142e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61429 [6.142e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61431 [6.143e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61433 [6.143e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61435 [6.143e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61437 [6.143e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61439 [6.143e4])
    │   ├─ emit TracePC(pc: 61473 [6.147e4])
    │   ├─ emit TracePC(pc: 61441 [6.144e4])
    │   ├─ emit UnknownOpcode(pc: 61440 [6.144e4], opcode: 67)
    │   └─ ← [Revert] revert: OpcodeNotImplemented
    └─ ← [Revert] revert: OpcodeNotImplemented

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 170.08ms (144.31ms CPU time)

Ran 1 test suite in 629.36ms (170.08ms CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/HelloWorld.t.sol:HelloWorldTest
[FAIL: revert: OpcodeNotImplemented] test_HelloWorld() (gas: 235285263)

Encountered a total of 1 failing tests, 0 tests succeeded

================
File: .github/workflows/test.yml
================
name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  FOUNDRY_PROFILE: ci

jobs:
  check:
    strategy:
      fail-fast: true

    name: Foundry project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Show Forge version
        run: |
          forge --version

      - name: Run Forge fmt
        run: |
          forge fmt --check
        id: fmt

      - name: Run Forge build
        run: |
          forge build --sizes
        id: build

      - name: Run Forge tests
        run: |
          forge test -vvv
        id: test

================
File: rom/eh_hex_part1.txt
================


================
File: rom/eh_hex_part2.txt
================
1ac92cd0a92089d48a302ee001902aa50ff006e40ff002b0208664a50ff006c564b003856438e564b0fc65641865648510a50f38e5108510604c29cfa5b030f9a5acf0f420cad8a900857785768575857885af85ae85ada218a5b34ab00e06b626b526b4267726762675267806b626b526b4267726762675267806af26ae26ada5af2a855ba5ae2a855ca5ad2a855da9002a855ea577e55b855ba576e55c855ca575e55da8a578e55e900e85788475a55c8576a55b8577e6afcad0a238a5b3e9806a690085ac4c34d620bc0020aacd20efcba495a5964c59d0a9bba0e1207dd8c6ac60a9bba0e14c7dd86c05026c07026c09026c0b02000000a8dee6c3d002e6c4adffffc9acf00ec93ab00ac920f0eb38e93038e9d0604c00c0000000000000004c29cf000000f200030d0a4d656d6f72792073697a65200020427974657320667265650d0a0a456e68616e63656420424153494320322e32320a000280195662807622f38238aa40803504f3813504f3808000008031721891434ff8947423f7947424008138aa3b067463908c77230cab7a1e94007c6342807e75fed0803172158100000081490fdb04861ed7fb879926658723345886a55de183490fdb08783ac5377b83a25c7c2edd4d7d99b01e7d59ed247e9172007e4cb9737faaaa53810000008180000090800000007f00000084200000fe7960002710fffc18000064fffff60000011ac557c464ca8bc646c95ecd66c9b3c785c7eac5a9c5b9c641c5cdc564df70df76c61dc718c526c77fc588c788d5efe0f2e073d00dd529d576d5b3c51cc654c885c5a2c39fc34dc3e5df23c84ed581dd95dd13df16df64cc64cc64cce8caebcbebcb64cc64cc64cc64cc64cc64cc64cc64cc64cc64cc00005ecc64cc5ecc5ecc5ecc5ecc64cc8bcc8bcc00007cdf7cdf6acc6acc00006fcc6fcc6fccf6d880d913d94cdd44d063d03be09cdcfad6fedbd0dcd7dc20dd52dd02d516d554d46dd425d19ad478d432d411d483d322ded3ddabdd82df92dfd8e0e2e0c8e095d39ed3cdd379c0d579a5d57b3bd77b03d87fbadb50d4cc46bacc46c7cc5680cd5668cd7df3db5a16cc64f5cc2a2b2d2f3c3d3e3f4142434445464748494c4d4e4f505253545556575e0068e36ae36ce36ee370e374e376e37ae37ce38ce3a5e3bce3d5e3e4e3eee3fbe301e413e438e446e458e460e475e4a4e4cfe4e3e4f4e400e50fe5b800b600b700b9003cbfc200c1003ebec0009f00425328c54e44bb534328d7544e28d000494e2428dc4954434c52a84954534554a7495454535428dd00414c4c9c48522428da4c454152a24f4e54a04f5328cd004154418345438845454b28d2454699494d854f4b459b4f9d004c5345ac4e44804f52bc585028cc004eae4f5281524528c7004554a54f5355428d4f544f890045582428db00468b4e43954e505554844e5428c45251a900434153452428d94546542428e3454e28d4455487495354a14f4144974f4728cb4f4f509e00415828de49442428e5494e28df004557a3455854824d49aa4f54b1554c4c94004646b54e9352bd0045454b28d149e04f4b459a4f5328c852494e549f0045414486454d914553544f52458c45544952518e45544e4d498f455455524e90494748542428e44e4428ca554e8a0041444428d341564598474e28c3494e28ce504328af515228c9544550b2544f509254522428d5574150a600414228ab414e28cf48454eb04fad574f5049e100434153452428d84e54494cb3535228c600414c28d6415250545228e2004149549648494c45b449445448a400ba000345d9e30346e6e3044e49e40444bce3054906e40344cbe3045275e4034c24e40344c0e30447f6e30352a0e4024901e407527ce40547f1e3065283e4065289e406528fe4035279e40453c1e4024f5be4044e53e4034903e4045700e5044c2be40453a9e40344c8e3045067e40444cee30443a5e30244d2e3044c33e405506fe40443b3e3044c27e40543aee3034e46e4055709e50347eee30453cae4064297e3064291e303490fe4034e4de40454cfe40445d5e30254dbe40246e4e30453b5e40454d7e4034e50e40453bde40555eae4055704e5034f58e4012b0000012d0000012a0000012f0000015e0000034180e30345dce3024f5de4023e76e3023c70e3013e0000013d0000013c00000453ade404490be404417ce30455efe40446e9e304506be40453b9e404529ce4044c2fe40445dfe30443b7e30453b1e40454d3e4044187e3055060e40544c3e30553a4e4044c20e40553c5e40456f4e4044183e30755e3e4074c13e40543a9e30548fbe305428ce307429de3044d38e4044d41e4025065e40554dde40756f8e4064c1ae4075295e4054d3ce4cde6dee6e5e6fae606e714e71de72be73fe74ce75de76ce77be789e799e7ace7bbe7cee74e45585420776974686f757420464f520053796e7461780052455455524e20776974686f757420474f535542004f7574206f6620444154410046756e6374696f6e2063616c6c004f766572666c6f77004f7574206f66206d656d6f727900556e646566696e65642073746174656d656e7400417272617920626f756e647300446f75626c652064696d656e73696f6e00446976696465206279207a65726f00496c6c6567616c206469726563740054797065206d69736d6174636800537472696e6720746f6f206c6f6e6700537472696e6720746f6f20636f6d706c65780043616e277420636f6e74696e756500556e646566696e65642066756e6374696f6e004c4f4f5020776974686f757420444f000d0a427265616b00204572726f720020696e206c696e6520000d0a52656164790d0a002045787472612069676e6f7265640d0a00205265646f2066726f6d2073746172740d0a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d8a2ff9aa9008d0188a90b8d0288a91e8d0388a01cb962ff99040288d0f7b97ffff00620ede0c8d0f520eae090fb29dfc957f007c943d0c84c00c04c000048ad01882910f0f9688d008860ad01882908f00fad0088c9619006c97bb002295f386018604bff3eff62ff62ff48a5df4a05df85df684048a5dc4a05dc85dc68400d0a69363530322028632920323031342c20417269656a616e2064652056726f6f6d0d0a456e68616e636564203635303220424153494320322e323220286329204c65652044617669736f6e0d0a5b435d6f6c642f5b575d61726d203f000000000000000000000000000000000000000000000000000000000000170200ff0d02

================
File: rom/eh_hex.txt
================
a004b9f6e09900028810f7a2ff86889aa94c85a1a21cbdfae095bbcad0f8a212bd17e19500ca10f8a90085dc85df85b28567a90e8564a90385a0a26886652092c8a92aa0e120d3c82040c286c384c420c200d01fa000e611d008e612a512c9c0f01da9559111d111d0150a9111d111f0e5d00c20a6d9a5acc998b0a220f7d4a511a412c00190978585848685818482a000a2038479867a989179e6792092c82050c3a58538e579aaa586e57a2082daa939a0e120d3c8a95aa0c1850184026c0100200bc1857f848038a5a6e5aaa8a5a7e5abaae898f0243849ff65a685a6b003c6a7389849ff65a485a4b008c6a59004b1a691a488d0f9b1a691a4c6a7c6a5cad0f2608578bae478903060c482902ad004c581902448a2089848b5a3ca10fa20dfd1a2006895a4e8e00830f868a868c4829006d005c581b00160a20c2092c8bda9e6bcaae620d3c82089c3a9e6a0e720d3c8a488c8f0032077daa90085df85dca9f7a0e720d3c8204dc286c384c420c200f0f4a2ff86889006207ec24cf3c42055c7207ec2845d2024c39044a001b1aa8572a57b8571a5ab8574a5aa88f1aa18657b857b8573a57c69ff857ce5abaa38a5aae57ba8b003e8c6741865719003c67218b1719173c8d0f9e672e674cad0f2ad2102f03fa585a48685818482a57b85a6a47c84a7655d9001c885a484a520c1c0a57fa480857b847ca45d88b91d0291aa88c003d0f6a51291aa88a51191aa88a9ff91aa2065c3a679a57aa00186718572b171f018a004c8b171d0fb38986571aaa0009171986572c8917190e04c67c120ebc820e8c8d00520edc8ca2ca20020eae090fbf0f9c907f010c90df019e000d004c92190e9c908f0dee047b00c9d2102e820edc8d0d84c89c8a907d0f4a0ff38a5c3e921aa8660bd2102f051c95fb04dc93cb00ec930b045855cc922f061c92a903b24607037867884baa0108473a0e38474a000d173f0059021c8d0f7980aaabd2ee38573bd2fe38574a0ffa678c8b1733008e8dd2102f0f5d02ba4bae8c8992102c900f032e93af004c949d00285604957d093855cbd2102f0e2c55cf0dec8992102e8d0f0a678b17308c82810f9b173d0bebd210210c3c8c8992102c8c8c8c6c360a579a67aa00185aa86abb1aaf01aa003b1aa88c512d004b1aac511b00988b1aaaa88b1aa90def0011860d0fda900a89179c8917918a5796902857ba57a6900857c18a57969ff85c3a57a69ff85c4a585a48685818482a57ba47c857d847e857f84802044c5a268866568aa688efe018dff01a2fd9aa900858c856160f0d0609006f004c9b7d0f42055c72024c320c200f00cc9b7d09320bc002055c7d08ba5110512d006a9ff85118512a00184602092c8b1aaf03e2014c5c8b1aaaac8b1aac512d004e411f002b02a84972082daa920a497297f20edc8c922d006a56049ff8560c8b1aad00ea8b1aaaac8b1aa86aa85abd0b76010de246030daa2e50a0a9002e81869119001e8857386748497a000b173aac8b173caf0b820edc8c8b17348c8b173a0008574688573b173caf0a220edc8c8d0f5a980856120b4c76868a9102003c1209dc6189865c348a5c4690048a58848a58748a9ad20f1cb20d0ca20cdcaa5b0097f25ad85ada997a0c4857184724c84cba9e0a0e1207dd820c200c9b2d00620bc0020cdca20e9d885b02079cba59848a59748a981482014c5a5c3a4c4a688e8f004858b848ca000b1c3f007c93af01d4c02cca002b1c318f056c8b1c38587c8b1c385889865c385c39002e6c420bc0020fcc44cbcc4f0540ab0034cb4c7c956b0cea8b908e248b907e2484cbc006c0302c903b00118d067a5c44902f0104902a4c3848b858ca587a4888589848a68689007a9dea0e74c4fc14c5ac1d00f38a579e901a47ab00188858f8490602055c720a0c6a588c512b00b983865c3a6c49007e8b004a579a67a2028c3b0034c72c6a5aae901a4abb0d090cd208cd4860d60d0fda48cd005a21e4c3cc1a9932014dfa9932017df84c4a58b85c3a589a48a8587848860d0034c65c32072c3f02ea9052003c1a5c448a5c348a58848a58748a99d4820c2004cbcc4a9052003c1a5c448a5c348a58848a58748a98d4820c20020ebc54cbcc42055c720a0c6a588c512b00b983865c3a6c49007e8b004a579a67a2028c39067a5aae90185c3a5abe90085c460a2224c3cc1a8babd0301c99dd0f2e8e89a98f020c93af01ce9b3aaf004cad062ca869820bc0020e1caa5acf002a9ffba4598d01abd02018587bd03018588bd040185c3bd050185c420c2004cbcc4e8e8e8e8e89a4c8cc6a2042ca20e4c3cc1d09e686868c98dd0ef6885876885886885c36885c4209dc6981865c385c39002e6c4604c02cca23a2ca200a000845c8a455c855cb1c3f0eac55cf0e6c8c922d0f3f0ec20e1ca20c200c9b0f011c989d0d2a6c3a4c420bc00b0c986c384c4a5acf01b20bc00b0034cebc5c990d0034cfec420fcc4a000b1c3c9acf09960a000a201c8b1c3f00fc98bd003e8d0f4c9acd0f0cad0edc8981865c385c39002e6c420c20090c34cfcc420a0c64c8fc64c02ccc9a9d0034c38dfc9aad0034c3cdf208cd448c98df004c989d0e3c6afd004684cfec420bc002055c7c92cf0ee6860a20086118612b0f7e019a8b0dde92fa8a5110a26120a2612651185118a651206112aaa98651185119001e820bc004c59c7a9e42ca9e04820aacda65f301e85978498207dd86848a0e120bed520a3d820c200c92cd0a820bc004c8cc74cdcca20aacd85978498a9c120f1cba55f4820e1ca682a20d3cad0034ca3d8a002b1aec5829017d00788b1aec581900ea4afc47c9008d00da5aec57bb007a5aea4af4c0cc8a000b1ae2032d1a59ea49f85b884b92011d3a9aca000859e849f2073d3a000b19e9197c8b19e9197c8b19e91976020aacd859784982000dfa65f3007a82066d04ca3d848a901b00168203ad1f00568a00091ad2085d14cd0c720d6c820c200f03bc9abf056c9aff052c92cf038c93bf06620e1ca245f30e12095da2044d1a000a50ff00a38e50ef1aeb0032092c820d6c8f0c9a9009d2102a221a002a90d20edc8a90ad052a50ec51090052092c8d02738e564b0fc49ff6901d012482089d4c929d07b68c9abd0068ae50e900aaa8af00620e8c8cad0fa20bc00d085602044d1203ed3a000aaf049b17120edc8c8cad0f760a9202ca93fc920901948a50fd00aa50ee564d00b850ef007c50ed0032092c8e60e6820ede0c90dd0148678a60df00aa90020edc8cad0faa90d860ea67829ff60a562100ba58da48e858784884c02cca912a0e820d3c8a58ba48c85c384c460c922d00b20becba93b20f1cb20d6c8206ad02040c2a900cd2102d00a184c2cc5a68fa490a98085628691849220aacd85978498a5c3a4c485118412a691a49286c384c420c200d0112462306520ebc82040c286c384c420c200245f1024855bc922f007a93a855ba92c18855ca5c3a4c469009001c8204ad120cfd420d0c74ccec920a6d920a3d820c200f00ac92cf0034c28c920bc00a5c3a4c485918492a511a41285c384c420c200f02c20fecb4c73c9209dc6c8aad012a206c8b1c3f073c8b1c3858dc8b1c3c8858eb1c3c8aa208fc6e083f081d0daa591a492a66210034c4ec5a000b191d00160a901a0e84cd3c8bae8e8e8e8bd0101c981d021a598d00abd02018597bd03018598dd0301d007a597dd0201f0078a186910aad0d860d004a000f00320aacd859784982037caf004a200f0639a8a38e9f7857369fba001207dd8babd080185b0a597a49820bed520a3d8a0012019d9badd0801f017bd0d018587bd0e018588bd100185c3bd0f0185c44cbcc48a690faa9a20c200c92cd0f120bc00206bca20e1ca182438245f3003b00360b0fda2184c3cc1a6c3d002c6c4c6c3a90048a9022003c120cdcba900859b20c20038e9c09017c903b013c9012a4901459bc59b9067859b20bc004cfbcaa69bd02cb079690a9075d007245f10034cd4d285710a6571a868d9e9e2b06520d0ca482062cb68a4991019aaf076d05d265f8a855f2aa6c3d002c6c4c6c3a024859bd0d5d9e9e2b04490d7b9ebe248b9eae2482079cba59b48b9e9e24cebca4c02cc688571e671688572a5b04820d9d8a5af48a5ae48a5ad48a5ac486c7100a0ff68f020c964f00320d0ca8499684a85636885b36885b46885b56885b66885b745b085b8a5ac60a5c3a4c469009001c82044d14ccfd420bc00b0034ca6d9aa302fc924f0f6c925f0f2c92ef0eec922f0d6c928d04f20e9caa929a000d1c3d00b4cbc00a928d0f3a92cd0efa2024c3cc1c9b7f029c9b6f0bec9b1d013a021d01f20a6cea5af49ffa8a5ae49ff4c59d0c9aed0034cb4d0e9c3b0194c02cca01e68684c3acb20aacd85ae84afa65f30034c7dd8600aa8b9a4e248b9a3e248b95ee2f00548b95de2486020eccb4cd2ca20eccb4cd0ca465f4cbc0020e9ca20fecb20d2ca68aa68a8a5af48a5ae4898488a48208cd48a6020e9ca20d0caa5acc998b0202050d9a202b5ad9511ca10f920c200a200c929f00a20ded420c200c929d001604c29cf20e2cc455ba8a5ae455c4c59d020e2cc055ba8a5ae055c4c59d020e2cc255ba8a5ae255c4c59d020a6cea5ae855ca5af855b20c3d520a6cea5af6020d3cab013a5b7097f25b485b4a9b3a0002017d9aa4c3fcd465fc69b203ed385ac86ad84aea5b5a4b62042d386b584b6aa38e5acf008a9019004a6aca9ff85b0a0ffe8c8cad007a6b0300f18900cb1b5d1adf0efa2ffb002a201e88a2a2563f002a9ff4cfad820fecbaa20afcd20c200d0f460209fcda5aea678f022e010b02306af2acad0faa4af4c59d0209fcda5aea678f00ae010b00b4a66afcad0faa4af4c59d0a900a84c59d0208fd4867820c3d54ca6cea20020c200865e8593297f201eceb0034c02cca200865f20bc009005201ece900baa20bc0090fb201eceb0f6c924d00ba9ff855f8a0980aa20bc0086940561c928d0034cb8cea9008561a57ba67ca00086ab85aae47ed004c57df02ca593d1aad008a594c8d1aaf0698818a5aa690690e1e8d0dcc961b00ac9419005e95b38e9a560e97b38e985606848c93dd005a9e1a0e160a57da47e85aa84aba57fa48085a684a71869069001c885a484a520c1c0a5a4a4a5c8857d847ea000a59391aac8a59491aaa900c891aac891aac891aac891aaa5aa186902a4ab9001c88595849660a55d0a690565aaa4ab9001c885a484a56020bc0020cdcaa5b0300da5acc9909009a9e8a0e12017d9d0744c50d9a55e48a55f48a0009848a59448a59348209cce68859368859468a8babd020148bd010148a5ae9d0201a5af9d0101c820c200c92cf0d2845d20efcb68855f68855ea67da57e86aa85abc580d004e47ff039a000b1aac8c593d006a594d1aaf016c8b1aa1865aaaac8b1aa65ab90d7a2102ca2084c3cc1a212a55ed0f7208bcea55da004d1aad0e74cc5cf208bce200bc1a00084bba59391aac8a59491aaa55da00484ba91aa18a20ba900245e5007686901aa686900c891aac88a91aa2014d086ba85bba471c65dd0dd65a5b05d85a5a88a65a49003c8f052200bc1857f8480a900e6bba4baf0058891a4d0fbc6a5c6bbd0f5e6a538a002a57fe5aa91aac8a580e5ab91aaa55ed053c8b1aa855da90085ba85bbc868aa85ae6885afd1aa900ed006c88ad1aa90074c26cf4c3ac1c8a5bb05baf00a2014d08a65aeaa98a47165af86bac65dd0cb06ba2a06ba2aa8a5ba65a485959865a58596a8a595608471b1aa857688b1aa8577a91085a8a200a0008a0aaa982aa8b0b306ba26bb900b188a6576aa986577a8b0a2c6a8d0e360a55f1003203ed320dfd138a581e57fa8a582e580465f85ad84aea2904c02d9a40ea900f0efa688e8d0a4a2164c3cc120a5d0859c849d206ad020facba980856120aacd20d0ca20efcba9c120f1cba59648a59548a5c448a5c348208cc64c14d1a9ae20f1cb0980856120b1cd4cd0ca20a5d048984820facb20e1ca20efcb20d0ca68859d68859ca220a003b19cf09d859688b19c8595aac8b195488810faa49620a7d8a5c448a5c348b19c85c3c8b19c85c4a59648a5954820cdca68859c68859d20c200f0034c02cc6885c36885c4a00068919cc868919cc868919cc868919c6020d0ca2095daa9f0a000f012a6aea4af869e849f20add186ad84ae85ac60a222865b865c85b884b985ad84aea0ffc8b1b8f00cc55bf004c55cd0f3c922f0011884ac9865b885baa6b99001e886bba5b9c903b00b982032d1a6b8a4b9201fd3a665e071d005a21c4c3cc1a5ac9500a5ad9501a5ae9502a00086ae84af88845f8666e8e8e886656046604849ff386581a482b00188c4809011d004c57f900b8581848285838484aa6860a20ca56030b820dfd1a980856068d0d0a685a58686818582a000849da57fa68085aa86aba96885718472c565f0052063d2f0f706a0a57ba67c85718672e47ed004c57df005205dd2f0f385a486a5a90485a0a5a4a6a5e480d004c57ff07585718672a002b17165a485a4c8b17165a585a5a001b17110dba004b1710a69052095d2e4a5d004c5a4f0cd2063d2f0f3c8b1711030c8b171f02bc8b171aac8b171c5829006d01ee481b01ac5ab9017d004e4aa901186aa85aba571a672859c869d888884a218a5a0657185719002e672a672a00060c6a0a69df0f5a4a218b19c65aa85a6a5ab690085a7a581a68285a486a520c8c0a4a2c8a5a4919caae6a5a5a5c8919c4ce3d1a5af48a5ae4820cdcb20d2ca6885b86885b9a000b1b81871ae9005a21a4c3cc12032d12011d3a59ea49f2042d32023d3a5b8a4b92042d32085d14cf8caa000b1b848c8b1b8aac8b1b8a86886718472aaf014a000b1719183c8cad0f89818658385839002e6846020d2caa5aea4af857184722073d308a000b17148c8b171aac8b171a86828d013c482d00fe481d00b4818658185819002e682688671847260c467d00cc566d0088565e9038566a00060208fd48a48a901203ad168a00091ad4c85d14820f7d3d19e98f0094820f7d318f19e49ff9004b19eaa98488a48203ad1a59ea49f2042d368a86818657185719002e672982023d34c85d148a9ff85af20c200c929f00620fecb208cd420f7d3ca8a4818a200f19eb0c249ffc5af90bda5afb0b920efcb6885a26885a368aa68859e68859fa0008af079e6a26ca200203bd385aca8f038203ad186ad84aea888b1712022ce90020920918398d0f1f01f203bd385aca8f017203ad186ad84aea888b171201ece900229df918398d0f14c85d120bc0020aacd20efcb20d2caa002b195aa88b195a88a4c59d02074d44c66d0203bd3a8602074d4f008a000b171a84c66d04c29cf20bc0020cdca20a2cea4aed0f0a6af4cc2002074d4d0034c50d6a6c3a4c486ba84bba67186c31865718573a57285c469008574a000b1734898917320c20020a6d968a0009173a6baa4bb86c384c46020cdca20f1d420fecba51248a51148208cd468851168851260a5acc998b08f2050d9a5aea4af841185126020f1d4a200a111a84c66d020d8d48aa20081116020f1d4a200a111a8e611d002e612a1114c59d020cdca20f1d48497859820fecb20cdca20f1d498a2008197e697d002e698a51281974cc20020aacd85978498a55f4820fecb20aacd68455f1010a003b197aab19591978a91958810f3604cdcca20cdca20f1d4a9d548a985486c11004cc20020d8d48697a20020c200f00320ded48698b11145982597f0f860208bd7a5b049ff85b045b785b8a5ac4cc1d520dad6904da9e9a0e1208bd7d010a5b785b0a204b5b295abcad0f986b960a6b986a3a2b3a5b3a8f0c438e5acf024901284aca4b784b049ff6900a00084a3a2acd004a00084b9c9f930b6a8a5b9560120f1d624b8104ca0ace0b3f002a0b33849ff65a385b9b90300f50385afb90200f50285aeb90100f50185adb0032096d6a0009818a6add03ea6ae86ada6af86aea6b986af84b96908c918d0e8a90085ac85b06065a385b9a5af65b685afa5ae65b585aea5ad65b485adb01a60690106b926af26ae26ad10f438e5acb0cf49ff690185ac900ce6acf03666ad66ae66af66b960a5b049ff85b0a5ad49ff85ada5ae49ff85aea5af49ff85afa5b949ff85b9e6b9d00ae6afd006e6aed002e6ad60a20a4c3cc1a274b40384b9b4029403b4019402a4b29401690830ecf0eae908a8a5b9b01216019002f60176017601760276036ac8d0ee186020e9d8f00210034c29cfa5ace97f48a98085aca969a0e120bed5a96da0e12001d8a9e0a0e120a3d5a95ca0e12051dca971a0e120bed5682045daa975a0e1208bd7f04c20b1d7a900857585768577a5b92060d7a5af2060d7a5ae2060d7a5ad2065d74c6ed8d0034cc8d64a0980a8901318a57765b68577a57665b58576a57565b4857566756676667766b9984ad0de6085718472a003b17185b688b17185b588b17185b745b085b8a5b7098085b488b17185b3a5ac60a5b3f01d1865ac90043031182c1012698085acd0034c54d6a5b885b060a5b0101b68684c50d620cad8aaf0f0186902b00ba20086b820dbd5e6acd0e04cc3d620cad8a9f1a0e1a20086b8207dd84c04d8208bd7f06320d9d8a90038e5ac85ac20b1d7e6acf0d6a2ffa901a4b4c4add00aa4b5c4aed004a4b6c4af082a900ea001e8e0023004d028a040957598289014a8a5b6e5af85b6a5b5e5ae85b5a5b4e5ad85b49806b626b526b4b0cf30bd10cb4a6a6a85b9284c6ed8a2144c3cc1a57585ada57685aea57785af4c34d685718472a003b17185af88b17185ae88b17185b0098085ad88b17185ac84b960a2a4a000f004a697a49820d9d886718472a003a5af917188a5ae917188a5b0097f25ad917188a5ac917184b96020d9d8a205b5ab95b2cad0f986b960a5acf0fb06b990f720b8d6d0f24c89d6a5acf009a5b02aa9ffb002a9016020e9d885ada90085aea288a5ad49ff2aa90085af86ac85b985b04c2fd646b06085738474a000b173c8aaf0c6b17345b030c4e4acd01ab1730980c5add012c8b173c5aed00bc8a97fc5b9b173e5aff028a5b0900249ff4cefd8a5acf04a38e99824b01009aaa9ff85b2209cd68aa2acc9f9100620dad684b260a8a5b0298046ad05ad85ad20f1d684b260a5acc998b01e2050d984b9a5b084b049802aa99885aca5af855b4c2fd685ad85ae85afa860a000845fa20994a8ca10fb907fc92dd00486b1f004c92bd00520bc00906ec924d0034c6edec925d0084c9cde20bc00905bc92ef02ec945d03020bc009017c9b7f00ec92df00ac9b6f008c92bf004d00766ab20bc00905b24ab100ea90038e5a94c11da66aa24aa50c3a5a938e5a885a9f012100920f0d7e6a9d0f9f00720d7d7c6a9d0f9a5b13001604cf4db4824aa1002e6a820d7d768290f2045da4cd2d94820cad86820fad8a5b745b085b8a6ac4cc1d5a5a9c90a9009a96424ab300e4cc3d60a0a65a90aa00071c3e92f85a94cf8d9a9eda0e720d3c8a588a68785ad86aea290382007d9a0009820a2da4cd3c8a001a92024b01002a92d99ef0085b084bac8a6acd005a9304caedba900e081b009a981a0e12039d7a9fa85a8a97da0e12017d9f01e1012a979a0e12017d9f002100e20d7d7c6a8d0ee20f0d7e6a8d0dc20bad52050d9a201a5a81869073009c908b00669ffaaa90238e90285a986a88af0021013a4baa92ec899ef008af006a930c899ef0084baa000a280a5af1879f7e185afa5ae79f6e185aea5ad79f5e185ade8b00410e5300230e18a900449ff690a692fc8c8c88495a4bac8aa297f99ef00c6a8d006a92ec899ef0084baa4958a49ff2980aac012d0b2a4bab9ef0088c930f0f8c92ef001c8a92ba6a9f02e1008a90038e5a9aaa92d99f100a94599f0008aa22f38e8e90ab0fb693a99f3008a99f200a90099f400f00899ef00a90099f000a9f0a00060f042a5b3d0034c52d6a29ca00020a7d8a5b7100f2081d9a99ca0002017d9d00398a45b20c5d5984820fbd6a99ca0002039d720ffdb684a900aa5acf006a5b049ff85b060a985a0e12039d7a5b96950900320e1d885a320cdd8a5acc988900320ced72081d9a55b186981f0f338e90148a204b5b3b4ac95ac94b3ca10f5a5a385b920a6d520f4dba989a0e12067dca90085b8684cb3d785ba84bb209dd8a9a42039d7206bdca9a4a0004c39d785ba84bba2a8209fd8b1ba85b1a4bac898d002e6bb85baa4bb2039d7a5baa4bb1869049001c885ba84bb20bed5a9a8a000c6b1d0e460a5acf007a2d8a00020a7d8a2afa01306d926da26db26d890058a45d985d988d0eea202b5d995adca10f9a98085ac0a85b04c34d6a9a6a0e120bed520cad8a9bba0e1a6b720f9d720cad82081d9a90085b820a6d5a9eda0e120a3d5a5b048100d20bad5a5b03009a56349ff856320f4dba9eda0e120bed568100320f4dba9aaa0e14c51dc209dd8a900856320d8dca29ca00020a7d8a9a4a000207dd8a90085b0a5632049dda99ca0004c01d8484c0add200a004cefcba5b048100320f4dba5ac48c9819007a9e0a0e12001d8a9bfa0e12051dc68c9819007a9a6a0e120a3d56810164cf4db20d8d4e008b020a900382aca10fce8011181116020d8d4e008b00ca9ff2aca10fce821118111604c29cf20bc0020d8d4e008b0f320c200c929f0034c02cc20bc00a900382aca10fce82111f002a9ff4cfad8e019b0488678a918203ad1a017a2184611661266138a2a91ad8810f3a578f00aaa3849ff6918f01cd00fa8b1adc930d007caf003c810f4e8981865ad85ada90065ae85ae86ac20bc004c85d14c29cfe007b0f98678a906203ad1a005f8a5132051dea5122051dea5112051ded8a206a578f0b7aa3849ff6906f0c9d0bcaa290f205cde8a4a4a4a4ac90a693091ad886085aca90085b88a2045da20bc00900a0920e961c906b02a690a290faaa5acf0e4690490dc4cc3d6aaa5acf006e6acf0f4a90085b88a2045da20bc004930c90290e64c2adaad0002d01820eae0900b8d0102a2208e02024c17c5ae0202f003ce0202a2dc20d0dea2df20d0de60b50010fb0a2940f0f695008aa86868a9052003c1a5c448a5c348a58848a58748a98d48b9010085c3b9020085c44cbcc420eae0b009ad0202f009ad010238a2008e020260a2df2ca2dcc993f011c9b5f00749a2f00e4c02cca97f35001005b5000a150095004cbc0058a2df2ca2dc867820bc002055c7a579a67a2028c3b0034c72c6a678a5aae9019501a5abe9009502a9c0950060d0fda5df0a05df85df4c79c6d0f1a5dc0a05dc85dc4c79c620e9ca4cd0ca20b1df10fba5b4098085b420c3d5f0f020b1df30fbf0f9a5b4098085b420c3d5f0eec929d00568684cbc004c02cc20c200c92cd0ed20d9d8a5b0097f25ad48a5ae48a5af48a5ac4820bc0020cdca6885b36885b66885b56885b485b7a9b3a0004c17d9c92cf01b208cd48af00ae0109045e464b0028664860f20c200f01ac92cd0a92089d48a302ee001902aa50ff006e40ff002b0208664a50ff006c564b003856438e564b0fc65641865648510a50f38e5108510604c29cfa5b030f9a5acf0f420cad8a900857785768575857885af85ae85ada218a5b34ab00e06b626b526b4267726762675267806b626b526b4267726762675267806af26ae26ada5af2a855ba5ae2a855ca5ad2a855da9002a855ea577e55b855ba576e55c855ca575e55da8a578e55e900e85788475a55c8576a55b8577e6afcad0a238a5b3e9806a690085ac4c34d620bc0020aacd20efcba495a5964c59d0a9bba0e1207dd8c6ac60a9bba0e14c7dd86c05026c07026c09026c0b02000000a8dee6c3d002e6c4adffffc9acf00ec93ab00ac920f0eb38e93038e9d0604c00c0000000000000004c29cf000000f200030d0a4d656d6f72792073697a65200020427974657320667265650d0a0a456e68616e63656420424153494320322e32320a000280195662807622f38238aa40803504f3813504f3808000008031721891434ff8947423f7947424008138aa3b067463908c77230cab7a1e94007c6342807e75fed0803172158100000081490fdb04861ed7fb879926658723345886a55de183490fdb08783ac5377b83a25c7c2edd4d7d99b01e7d59ed247e9172007e4cb9737faaaa53810000008180000090800000007f00000084200000fe7960002710fffc18000064fffff60000011ac557c464ca8bc646c95ecd66c9b3c785c7eac5a9c5b9c641c5cdc564df70df76c61dc718c526c77fc588c788d5efe0f2e073d00dd529d576d5b3c51cc654c885c5a2c39fc34dc3e5df23c84ed581dd95dd13df16df64cc64cc64cce8caebcbebcb64cc64cc64cc64cc64cc64cc64cc64cc64cc64cc00005ecc64cc5ecc5ecc5ecc5ecc64cc8bcc8bcc00007cdf7cdf6acc6acc00006fcc6fcc6fccf6d880d913d94cdd44d063d03be09cdcfad6fedbd0dcd7dc20dd52dd02d516d554d46dd425d19ad478d432d411d483d322ded3ddabdd82df92dfd8e0e2e0c8e095d39ed3cdd379c0d579a5d57b3bd77b03d87fbadb50d4cc46bacc46c7cc5680cd5668cd7df3db5a16cc64f5cc2a2b2d2f3c3d3e3f4142434445464748494c4d4e4f505253545556575e0068e36ae36ce36ee370e374e376e37ae37ce38ce3a5e3bce3d5e3e4e3eee3fbe301e413e438e446e458e460e475e4a4e4cfe4e3e4f4e400e50fe5b800b600b700b9003cbfc200c1003ebec0009f00425328c54e44bb534328d7544e28d000494e2428dc4954434c52a84954534554a7495454535428dd00414c4c9c48522428da4c454152a24f4e54a04f5328cd004154418345438845454b28d2454699494d854f4b459b4f9d004c5345ac4e44804f52bc585028cc004eae4f5281524528c7004554a54f5355428d4f544f890045582428db00468b4e43954e505554844e5428c45251a900434153452428d94546542428e3454e28d4455487495354a14f4144974f4728cb4f4f509e00415828de49442428e5494e28df004557a3455854824d49aa4f54b1554c4c94004646b54e9352bd0045454b28d149e04f4b459a4f5328c852494e549f0045414486454d914553544f52458c45544952518e45544e4d498f455455524e90494748542428e44e4428ca554e8a0041444428d341564598474e28c3494e28ce504328af515228c9544550b2544f509254522428d5574150a600414228ab414e28cf48454eb04fad574f5049e100434153452428d84e54494cb3535228c600414c28d6415250545228e2004149549648494c45b449445448a400ba000345d9e30346e6e3044e49e40444bce3054906e40344cbe3045275e4034c24e40344c0e30447f6e30352a0e4024901e407527ce40547f1e3065283e4065289e406528fe4035279e40453c1e4024f5be4044e53e4034903e4045700e5044c2be40453a9e40344c8e3045067e40444cee30443a5e30244d2e3044c33e405506fe40443b3e3044c27e40543aee3034e46e4055709e50347eee30453cae4064297e3064291e303490fe4034e4de40454cfe40445d5e30254dbe40246e4e30453b5e40454d7e4034e50e40453bde40555eae4055704e5034f58e4012b0000012d0000012a0000012f0000015e0000034180e30345dce3024f5de4023e76e3023c70e3013e0000013d0000013c00000453ade404490be404417ce30455efe40446e9e304506be40453b9e404529ce4044c2fe40445dfe30443b7e30453b1e40454d3e4044187e3055060e40544c3e30553a4e4044c20e40553c5e40456f4e4044183e30755e3e4074c13e40543a9e30548fbe305428ce307429de3044d38e4044d41e4025065e40554dde40756f8e4064c1ae4075295e4054d3ce4cde6dee6e5e6fae606e714e71de72be73fe74ce75de76ce77be789e799e7ace7bbe7cee74e45585420776974686f757420464f520053796e7461780052455455524e20776974686f757420474f535542004f7574206f6620444154410046756e6374696f6e2063616c6c004f766572666c6f77004f7574206f66206d656d6f727900556e646566696e65642073746174656d656e7400417272617920626f756e647300446f75626c652064696d656e73696f6e00446976696465206279207a65726f00496c6c6567616c206469726563740054797065206d69736d6174636800537472696e6720746f6f206c6f6e6700537472696e6720746f6f20636f6d706c65780043616e277420636f6e74696e756500556e646566696e65642066756e6374696f6e004c4f4f5020776974686f757420444f000d0a427265616b00204572726f720020696e206c696e6520000d0a52656164790d0a002045787472612069676e6f7265640d0a00205265646f2066726f6d2073746172740d0ad8a2ff9aa9008d0188a90b8d0288a91e8d0388a01cb962ff99040288d0f7b97ffff00620ede0c8d0f520eae090fb29dfc957f007c943d0c84c00c04c000048ad01882910f0f9688d008860ad01882908f00fad0088c9619006c97bb002295f386018604bff3eff62ff62ff48a5df4a05df85df684048a5dc4a05dc85dc68400d0a69363530322028632920323031342c20417269656a616e2064652056726f6f6d0d0a456e68616e636564203635303220424153494320322e323220286329204c65652044617669736f6e0d0a5b435d6f6c642f5b575d61726d203f000000000000000000000000000000000000000000000000000000000000170200ff0d02

================
File: script/Counter.s.sol
================
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Script, console} from "forge-std/Script.sol";
import {Counter} from "../src/Counter.sol";

contract CounterScript is Script {
    Counter public counter;

    function setUp() public {}

    function run() public {
        vm.startBroadcast();

        counter = new Counter();

        vm.stopBroadcast();
    }
}

================
File: scripts/build_basic_rom.py
================
#!/usr/bin/env python3
"""Generate `src/BasicRom.sol` from the two EhBASIC ROM hex dumps.

This script:
1. Reads `rom/eh_hex_part1.txt` and `rom/eh_hex_part2.txt`.
2. Strips whitespace/newlines and validates each part is exactly 16,384 hex characters (8 KiB).
3. Concatenates the parts (total 32,768 hex characters → 16 KiB).
4. Emits `src/BasicRom.sol` with the ROM embedded as a series of concatenated `hex"…"` literals, each 512 bytes (1,024 hex chars) long for compiler friendliness.
5. The contract constructor loads the ROM into memory and immediately returns it, so the deployed bytecode *is* the ROM image.

Run this script whenever the ROM dumps change (they never should).
"""

from __future__ import annotations

import textwrap
from pathlib import Path

PART_FILES = [Path("rom/eh_hex_part1.txt"), Path("rom/eh_hex_part2.txt")]
OUTPUT_SOL = Path("src/BasicRom.sol")
CHUNK_HEX_LEN = 1024  # 512 bytes per literal


def read_and_validate(path: Path) -> str:
    data = path.read_text().strip().replace("\n", "")
    if len(data) != 16_384:
        raise ValueError(f"{path} is {len(data)} chars, expected 16384")
    # quick sanity: must be even length and valid hex
    if len(data) % 2 or any(c not in "0123456789abcdefABCDEF" for c in data):
        raise ValueError(f"{path} contains invalid hex")
    return data.lower()


def main() -> None:
    parts = [read_and_validate(p) for p in PART_FILES]
    combined = "".join(parts)

    if len(combined) != 32_768:
        raise AssertionError("Combined ROM hex should be 32768 chars (16 KiB)")

    # Split into fixed‑size chunks for readability & compiler limits.
    chunks = textwrap.wrap(combined, CHUNK_HEX_LEN)
    # Build Solidity hex literal series.
    hex_literals = " ".join(f'hex"{chunk}"' for chunk in chunks)

    sol_source = f"""// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title BasicRom — EhBASIC v2.22 ROM (16 KiB)
/// @notice Deployed bytecode *is* the ROM image. Auto‑generated — DO NOT EDIT MANUALLY.
///          Regenerate with `python scripts/build_basic_rom.py` if needed.
contract BasicRom {{
    constructor() {{
        bytes memory rom = {hex_literals};
        assembly {{
            return(add(rom, 0x20), mload(rom))
        }}
    }}
}}
"""

    OUTPUT_SOL.write_text(sol_source)
    print(f"Generated {{OUTPUT_SOL}} ({{len(combined) // 2}} bytes)")


if __name__ == "__main__":
    main()

================
File: src/Counter.sol
================
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

contract Counter {
    uint256 public number;

    function setNumber(uint256 newNumber) public {
        number = newNumber;
    }

    function increment() public {
        number++;
    }
}

================
File: src/OpcodeTable.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "./Emulator6502.sol";

library OpcodeTable {
    struct OpInfo {
        function(Emulator6502) internal handler;
        uint8 length;      // bytes in instruction (for future use)
    }

    // Forward declaration of unimplemented handler so we can reference it in TABLE constant
    function unimplemented(Emulator6502) internal pure {
        revert("OpcodeNotImplemented");
    }

    /// @notice Returns a dummy OpInfo that always reverts – placeholder until table implemented
    function info(uint8 /*opcode*/) internal pure returns (OpInfo memory) {
        return OpInfo({handler: unimplemented, length: 0});
    }
}

================
File: test/ArithmeticTest.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Emulator6502.sol";

contract ArithmeticTest is Test {
    Emulator6502 emu;

    function setUp() public {
        emu = new Emulator6502();
    }

    function _flag(uint8 mask) internal view returns (bool) {
        (, , , , , uint8 P, ) = emu.cpu();
        return (P & mask) != 0;
    }

    function test_ADC_NoCarry() public {
        // A=0x01, ADC #$01 => 0x02
        emu.testSetPC(0x9000);
        emu.testSetA(0x01);
        emu.testSetFlag(0, false); // Clear carry
        emu.poke8(0x9000, 0x69);
        emu.poke8(0x9001, 0x01);
        emu.step();
        (uint8 A, , , , , uint8 P, ) = emu.cpu();
        assertEq(A, 0x02);
        assertFalse(_flag(1 << 0)); // Carry
        assertFalse(_flag(1 << 1)); // Zero
        assertFalse(_flag(1 << 7)); // Negative
        assertFalse(_flag(1 << 6)); // Overflow
    }

    function test_ADC_CarryAndZero() public {
        // A=0x01, ADC #0xFF => 0x00 carry set, zero set
        emu.testSetPC(0x9100);
        emu.testSetA(0x01);
        emu.testSetFlag(0, false);
        emu.poke8(0x9100, 0x69);
        emu.poke8(0x9101, 0xFF);
        emu.step();
        (uint8 A, , , , , , ) = emu.cpu();
        assertEq(A, 0x00);
        assertTrue(_flag(1 << 0)); // Carry
        assertTrue(_flag(1 << 1)); // Zero
    }

    function test_ADC_Overflow() public {
        // A=0x01, ADC #0x7F => 0x80 overflow set, negative set
        emu.testSetPC(0x9200);
        emu.testSetA(0x01);
        emu.testSetFlag(0, false);
        emu.poke8(0x9200, 0x69);
        emu.poke8(0x9201, 0x7F);
        emu.step();
        (uint8 A, , , , , , ) = emu.cpu();
        assertEq(A, 0x80);
        assertFalse(_flag(1 << 0)); // Carry
        assertTrue(_flag(1 << 6)); // Overflow
        assertTrue(_flag(1 << 7)); // Negative
    }
}

================
File: test/BasicPrompt.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";

/// @title BasicPromptTest – placeholder to be filled once real BASIC ROM is embedded
contract BasicPromptTest is Test {
    function testSkipUntilRealRom() public {
        vm.skip(true, "Real BASIC ROM not yet embedded - enable once hex pasted");
    }
}

================
File: test/BranchTest.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Emulator6502.sol";

contract BranchTest is Test {
    Emulator6502 emu;

    function setUp() public { emu = new Emulator6502(); }

    function _runBranch(uint8 opcode, uint8 offset, bool flagSet, uint8 flagBit) internal returns (uint16 pc) {
        uint16 start = 0x8000;
        emu.testSetPC(start);
        emu.poke8(start, opcode);
        emu.poke8(start+1, offset);
        emu.testSetFlag(flagBit, flagSet);
        emu.step();
        (, , , , pc,,) = emu.cpu();
    }

    function test_BCC_taken() public {
        uint16 pc = _runBranch(0x90, 0x02, false, 0); // carry clear
        assertEq(pc, 0x8004);
    }

    function test_BCC_notTaken() public {
        uint16 pc = _runBranch(0x90, 0x02, true, 0);
        assertEq(pc, 0x8002);
    }

    function test_BEQ_taken() public {
        uint16 pc = _runBranch(0xF0, 0x05, true, 1); // Z set
        assertEq(pc, 0x8007);
    }

    function test_BEQ_notTaken() public {
        uint16 pc = _runBranch(0xF0, 0x05, false, 1);
        assertEq(pc, 0x8002);
    }

    function test_BMI_taken() public {
        uint16 pc = _runBranch(0x30, 0xFE, true, 7); // negative, offset -2
        assertEq(pc, 0x8000);
    }

    function test_BNE_taken() public {
        uint16 pc = _runBranch(0xD0, 0x01, false, 1); // Z clear
        assertEq(pc, 0x8003);
    }
}

================
File: test/CompareTest.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Emulator6502.sol";

contract CompareTest is Test {
    Emulator6502 emu;

    function setUp() public {
        emu = new Emulator6502();
    }

    function _flag(uint8 mask) internal view returns (bool) {
        (, , , , , uint8 P, ) = emu.cpu();
        return (P & mask) != 0;
    }

    function test_CMP_equal() public {
        emu.testSetPC(0xC000);
        emu.testSetA(0x42);
        emu.poke8(0xC000, 0xC9); // CMP #imm
        emu.poke8(0xC001, 0x42);
        emu.step();
        assertTrue(_flag(1<<1)); // Z
        assertTrue(_flag(1<<0)); // C
        assertFalse(_flag(1<<7)); // N
    }

    function test_CMP_less() public {
        emu.testSetPC(0xC100);
        emu.testSetA(0x01);
        emu.poke8(0xC100, 0xC9);
        emu.poke8(0xC101, 0x02);
        emu.step();
        assertFalse(_flag(1<<0)); // C
        assertFalse(_flag(1<<1)); // Z
        assertTrue(_flag(1<<7)); // N
    }

    function test_CMP_greater() public {
        emu.testSetPC(0xC200);
        emu.testSetA(0x03);
        emu.poke8(0xC200, 0xC9);
        emu.poke8(0xC201, 0x02);
        emu.step();
        assertTrue(_flag(1<<0)); // C
        assertFalse(_flag(1<<1)); // Z
        assertFalse(_flag(1<<7)); // N
    }

    function test_CPX_equal() public {
        emu.testSetPC(0xC300);
        emu.testSetX(0x10);
        emu.poke8(0xC300, 0xE0); // CPX #imm
        emu.poke8(0xC301, 0x10);
        emu.step();
        assertTrue(_flag(1<<1));
        assertTrue(_flag(1<<0));
    }

    function test_CPY_less() public {
        emu.testSetPC(0xC400);
        emu.testSetY(0x00);
        emu.poke8(0xC400, 0xC0); // CPY #imm
        emu.poke8(0xC401, 0x01);
        emu.step();
        assertFalse(_flag(1<<0));
        assertTrue(_flag(1<<7));
    }
}

================
File: test/Counter.t.sol
================
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {Counter} from "../src/Counter.sol";

contract CounterTest is Test {
    Counter public counter;

    function setUp() public {
        counter = new Counter();
        counter.setNumber(0);
    }

    function test_Increment() public {
        counter.increment();
        assertEq(counter.number(), 1);
    }

    function testFuzz_SetNumber(uint256 x) public {
        counter.setNumber(x);
        assertEq(counter.number(), x);
    }
}

================
File: test/EmulatorInit.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Emulator6502.sol";

/// @title EmulatorInitTest – validates power‑on reset state for Phase 0
contract EmulatorInitTest is Test {
    Emulator6502 private emu;

    function setUp() public {
        emu = new Emulator6502();
    }

    function test_PowerOnState() public {
        (uint8 A, uint8 X, uint8 Y, uint8 SP, uint16 PC, uint8 P, uint64 cycles) = emu.cpu();

        assertEq(uint256(A), 0, "A != 0");
        assertEq(uint256(X), 0, "X != 0");
        assertEq(uint256(Y), 0, "Y != 0");
        assertEq(uint256(SP), 0xfd, "SP != 0xfd");
        assertEq(uint256(PC), 0, "PC != 0");
        assertEq(uint256(P), 1 << 2, "P != I flag");
        assertEq(cycles, 0, "cycles != 0");
    }
}

================
File: test/IOTest.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import {Emulator6502} from "../src/Emulator6502.sol";

contract IOTest is Test {
    Emulator6502 emu;

    function setUp() public {
        emu = new Emulator6502();
    }

    function testKeyboardBuffer() public {
        bytes memory keys = "HI"; // 0x48 0x49
        emu.sendKeys(keys);

        // First read
        uint8 b1 = emu.testReadIO(0xF000);
        assertEq(b1, 0x48, "First key");

        // Second read
        uint8 b2 = emu.testReadIO(0xF000);
        assertEq(b2, 0x49, "Second key");

        // Buffer exhausted
        uint8 b3 = emu.testReadIO(0xF000);
        assertEq(b3, 0x00, "Empty returns 0");
    }

    function testCharOutEvent() public {
        vm.expectEmit(false, false, false, true);
        emit Emulator6502.CharOut(0x41); // 'A'
        emu.poke8(0xF001, 0x41);
    }
}

================
File: test/LogicTest.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Emulator6502.sol";

contract LogicTest is Test {
    Emulator6502 emu;

    function setUp() public {
        emu = new Emulator6502();
    }

    function _flag(uint8 mask) internal view returns (bool) {
        (, , , , , uint8 P, ) = emu.cpu();
        return (P & mask) != 0;
    }

    function test_ORA() public {
        // A = 0x10; ORA #0x01 -> 0x11 (N=0, Z=0)
        emu.testSetPC(0xB000);
        emu.testSetA(0x10);
        emu.poke8(0xB000, 0x09);
        emu.poke8(0xB001, 0x01);
        emu.step();
        (uint8 A,, , , , ,) = emu.cpu();
        assertEq(A, 0x11);
        assertFalse(_flag(1<<1));
        assertFalse(_flag(1<<7));
    }

    function test_EOR_ZeroNegative() public {
        // A=0xFF xor 0xFF => 0x00 sets Z, clears N
        emu.testSetPC(0xB100);
        emu.testSetA(0xFF);
        emu.poke8(0xB100, 0x49);
        emu.poke8(0xB101, 0xFF);
        emu.step();
        (uint8 A,, , , , ,) = emu.cpu();
        assertEq(A, 0x00);
        assertTrue(_flag(1<<1));
        assertFalse(_flag(1<<7));
    }

    function test_BIT() public {
        // A=0b01000000, operand 0b11000000 => Z=0, N=1, V=1
        emu.testSetPC(0xB200);
        emu.testSetA(0x40);
        emu.poke8(0x0044, 0xC0);
        emu.poke8(0xB200, 0x24); // BIT $44
        emu.poke8(0xB201, 0x44);
        emu.step();
        assertFalse(_flag(1<<1)); // Z
        assertTrue(_flag(1<<7)); // N
        assertTrue(_flag(1<<6)); // V
    }
}

================
File: test/Memory.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Emulator6502.sol";

contract MemoryTest is Test {
    Emulator6502 internal emu;

    function setUp() public {
        emu = new Emulator6502();
    }

    function test_ReadWriteMemory() public {
        uint16 addr = 0x1234;
        uint8 value = 0x42;

        emu.poke8(addr, value);
        uint8 readVal = emu.peek8(addr);

        assertEq(readVal, value, "Memory mismatch");
    }

    function test_ZeroPageAndStack() public {
        emu.poke8(0x00ff, 0xaa);
        assertEq(emu.peek8(0x00ff), 0xaa);

        emu.poke8(0x01fe, 0xbb);
        assertEq(emu.peek8(0x01fe), 0xbb);
    }
}

================
File: test/OpcodeMatrix.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Emulator6502.sol";

contract OpcodeMatrixTest is Test {
    Emulator6502 emu;

    function setUp() public {
        emu = new Emulator6502();
    }

    function _execute(uint8 opcode) internal returns (bool implemented) {
        uint16 pc = 0x8000;
        emu.testSetPC(pc);
        emu.poke8(pc, opcode);
        // Write dummy operand bytes (0x00) to avoid out‑of‑bounds for multi‑byte insns
        emu.poke8(pc + 1, 0x00);
        emu.poke8(pc + 2, 0x00);
        try emu.step() {
            implemented = true;
        } catch Error(string memory reason) {
            // Only treat explicit OpcodeNotImplemented as unimplemented
            if (keccak256(bytes(reason)) == keccak256("OpcodeNotImplemented")) {
                implemented = false;
            } else {
                // Any other revert propagate as test failure
                revert(reason);
            }
        }
    }

    function test_AllOpcodesHandledOrRevert() public {
        uint256 implementedCount;
        for (uint16 op = 0; op < 256; op++) {
            bool ok = _execute(uint8(op));
            if (ok) implementedCount++;
        }
        emit log_uint(implementedCount);
        // Sanity: we expect at least the set we coded ( >60 ).
        assertGt(implementedCount, 50);
    }
}

================
File: test/OpcodeTest.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Emulator6502.sol";

contract OpcodeTest is Test {
    Emulator6502 emu;

    function setUp() public {
        emu = new Emulator6502();
    }

    function test_LDAImmediate() public {
        // Program: LDA #$7F ; BRK (0x00) to stop (not implemented but okay)
        emu.testSetPC(0x8000);
        emu.poke8(0x8000, 0xA9); // LDA #imm
        emu.poke8(0x8001, 0x7F);

        emu.step();

        (uint8 A, uint8 _x, uint8 _y, uint8 _sp, uint16 _pc, uint8 P, uint64 _cycles) = emu.cpu();
        assertEq(A, 0x7F);
        // Zero flag cleared, Negative flag cleared
        bool Z = (P & (1 << 1)) != 0;
        bool N = (P & (1 << 7)) != 0;
        assertFalse(Z);
        assertFalse(N);
    }

    function test_LDAZeroPage() public {
        emu.testSetPC(0x8200);
        emu.poke8(0x8200, 0xA5); // LDA $44
        emu.poke8(0x8201, 0x44);
        emu.poke8(0x0044, 0x00); // value 0 sets Z flag

        emu.step();

        (, , , , , uint8 P, ) = emu.cpu();
        bool Z = (P & (1 << 1)) != 0;
        assertTrue(Z);
    }

    function test_LDAAbsoluteNegative() public {
        emu.testSetPC(0x8300);
        emu.poke8(0x8300, 0xAD); // LDA $1234
        emu.poke8(0x8301, 0x34);
        emu.poke8(0x8302, 0x12);
        emu.poke8(0x1234, 0x80); // Negative bit set

        emu.step();

        (, , , , , uint8 P, ) = emu.cpu();
        bool N = (P & (1 << 7)) != 0;
        assertTrue(N);
    }
}

================
File: test/RegisterAccess.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Emulator6502.sol";

contract RegisterAccessTest is Test {
    Emulator6502 internal emu;

    function setUp() public {
        emu = new Emulator6502();
    }

    function test_SetAndGetFlags() public {
        // Initially I flag set only
        assertTrue(emu.testGetFlag(2)); // I
        assertFalse(emu.testGetFlag(0)); // C

        // Set C and Z
        emu.testSetFlag(0, true);
        emu.testSetFlag(1, true);

        assertTrue(emu.testGetFlag(0));
        assertTrue(emu.testGetFlag(1));

        // Clear I flag
        emu.testSetFlag(2, false);
        assertFalse(emu.testGetFlag(2));
    }
}

================
File: test/RunLoop.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import {Emulator6502} from "../src/Emulator6502.sol";

/// @title RunLoopTest – verifies boot() and run() halt behaviour
contract RunLoopTest is Test {
    Emulator6502 emu;

    // Test program: single BRK instruction at $0800
    uint16 constant RESET_VECTOR = 0x0800;

    function setUp() public {
        emu = new Emulator6502();

        // Write BRK opcode ($00) at reset vector target
        emu.poke8(RESET_VECTOR, 0x00);

        // Point RESET vector ($FFFC/$FFFD) to 0x0800 little endian
        emu.poke8(0xFFFC, uint8(RESET_VECTOR & 0x00FF));
        emu.poke8(0xFFFD, uint8(RESET_VECTOR >> 8));

        // Boot CPU so it reads new RESET vector
        emu.boot();
    }

    function testRunHaltsOnBRK() public {
        vm.expectEmit(false, false, false, true);
        emit Emulator6502.ProgramHalted(1);

        emu.run(10);

        // Ensure halted flag is true
        assertTrue(emu.halted(), "CPU should halt after BRK");
    }
}

================
File: test/SBCTest.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Emulator6502.sol";

contract SBCTest is Test {
    Emulator6502 emu;

    function setUp() public {
        emu = new Emulator6502();
    }

    function _flag(uint8 mask) internal view returns (bool) {
        (, , , , , uint8 P, ) = emu.cpu();
        return (P & mask) != 0;
    }

    function test_SBC_NoBorrow() public {
        // A=0x03, carry set => subtract 0x01 => 0x02, carry stays 1
        emu.testSetPC(0xA000);
        emu.testSetA(0x03);
        emu.testSetFlag(0, true); // carry = 1 (no borrow)
        emu.poke8(0xA000, 0xE9); // SBC #imm
        emu.poke8(0xA001, 0x01);
        emu.step();
        (uint8 A,, , , , ,) = emu.cpu();
        assertEq(A, 0x02);
        assertTrue(_flag(1 << 0)); // Carry
        assertFalse(_flag(1 << 1)); // Zero
        assertFalse(_flag(1 << 7)); // Negative
        assertFalse(_flag(1 << 6)); // Overflow
    }

    function test_SBC_Borrow() public {
        // A=0x00, subtract 0x01 => 0xFF, carry clear
        emu.testSetPC(0xA100);
        emu.testSetA(0x00);
        emu.testSetFlag(0, true);
        emu.poke8(0xA100, 0xE9);
        emu.poke8(0xA101, 0x01);
        emu.step();
        (uint8 A,, , , , ,) = emu.cpu();
        assertEq(A, 0xFF);
        assertFalse(_flag(1 << 0)); // Carry cleared (borrow)
        assertFalse(_flag(1 << 1)); // Zero
        assertTrue(_flag(1 << 7)); // Negative
    }

    function test_SBC_Overflow() public {
        // A=0x80, subtract 0x7F => 0x01, overflow set
        emu.testSetPC(0xA200);
        emu.testSetA(0x80);
        emu.testSetFlag(0, true);
        emu.poke8(0xA200, 0xE9);
        emu.poke8(0xA201, 0x7F);
        emu.step();
        (uint8 A,, , , , ,) = emu.cpu();
        assertEq(A, 0x01);
        assertTrue(_flag(1 << 6)); // Overflow
        assertFalse(_flag(1 << 7)); // Negative
    }
}

================
File: test/ShiftRotateTest.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Emulator6502.sol";

contract ShiftRotateTest is Test {
    Emulator6502 emu;

    function setUp() public {
        emu = new Emulator6502();
    }

    function _flag(uint8 mask) internal view returns (bool) {
        (, , , , , uint8 P, ) = emu.cpu();
        return (P & mask) != 0;
    }

    function test_ASLAccumulator() public {
        // A=0x80 (1000 0000) after ASL => 0x00, C=1, Z=1, N=0
        emu.testSetPC(0xB300);
        emu.testSetA(0x80);
        emu.poke8(0xB300, 0x0A); // ASL A
        emu.step();
        (uint8 A,, , , , ,) = emu.cpu();
        assertEq(A, 0x00);
        assertTrue(_flag(1 << 0)); // Carry
        assertTrue(_flag(1 << 1)); // Zero
        assertFalse(_flag(1 << 7)); // Negative
    }

    function test_LSRAccumulator() public {
        // A=0x01 => 0x00, C=1, Z=1
        emu.testSetPC(0xB400);
        emu.testSetA(0x01);
        emu.poke8(0xB400, 0x4A); // LSR A
        emu.step();
        (uint8 A,, , , , ,) = emu.cpu();
        assertEq(A, 0x00);
        assertTrue(_flag(1 << 0)); // Carry
        assertTrue(_flag(1 << 1)); // Zero
    }

    function test_ROLAccumulator_WithCarryIn() public {
        // Set carry =1, A=0x01 (0000 0001) => result 0x03, C=0
        emu.testSetPC(0xB500);
        emu.testSetA(0x01);
        emu.testSetFlag(0, true); // carry in
        emu.poke8(0xB500, 0x2A); // ROL A
        emu.step();
        (uint8 A,, , , , ,) = emu.cpu();
        assertEq(A, 0x03);
        assertFalse(_flag(1 << 0)); // Carry cleared (bit7 was 0)
        assertFalse(_flag(1 << 7)); // Negative
    }

    function test_RORAccumulator_WithCarryIn() public {
        // Set carry=1, A=0x02 (0000 0010) => After ROR: 0x81, C=0x0 (bit0 of original)
        emu.testSetPC(0xB600);
        emu.testSetA(0x02);
        emu.testSetFlag(0, true); // carry in
        emu.poke8(0xB600, 0x6A); // ROR A
        emu.step();
        (uint8 A,, , , , ,) = emu.cpu();
        assertEq(A, 0x81);
        assertFalse(_flag(1 << 0)); // Carry cleared (original bit0 =0)
        assertTrue(_flag(1 << 7)); // Negative set
    }
}

================
File: test/StackJSRTest.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Emulator6502.sol";

contract StackJSRTest is Test {
    Emulator6502 emu;

    function setUp() public {
        emu = new Emulator6502();
    }

    function test_JSR_RTS() public {
        // Program: JSR $9000 ; (subroutine) RTS
        emu.testSetPC(0x8000);
        emu.poke8(0x8000, 0x20); // JSR
        emu.poke8(0x8001, 0x00);
        emu.poke8(0x8002, 0x90);
        emu.poke8(0x9000, 0x60); // RTS

        emu.step(); // Execute JSR
        (, , , uint8 spAfterJSR,, ,) = emu.cpu();
        // Stack pointer should be 0xFB (two pushes)
        assertEq(spAfterJSR, 0xFB);

        emu.step(); // Execute RTS
        (, , , uint8 spAfterRTS, uint16 pcAfterRTS,,) = emu.cpu();
        assertEq(spAfterRTS, 0xFD);
        assertEq(pcAfterRTS, 0x8003); // Return to after JSR
    }
}

================
File: test/StackPrimitives.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Emulator6502.sol";

contract StackPrimitivesTest is Test {
    Emulator6502 emu;

    function setUp() public {
        emu = new Emulator6502();
    }

    function test_PushPop8() public {
        // initial SP = 0xFD per reset state
        (, , , uint8 spInitial, , ,) = emu.cpu();
        assertEq(spInitial, 0xFD);

        emu.testPush8(0x42);
        (, , , uint8 spAfterPush, , ,) = emu.cpu();
        assertEq(spAfterPush, 0xFC, "SP should post-decrement");

        uint8 val = emu.testPop8();
        assertEq(val, 0x42, "popped value mismatch");

        (, , , uint8 spAfterPop, , ,) = emu.cpu();
        assertEq(spAfterPop, 0xFD, "SP should return to original");
    }

    function test_PushPop16() public {
        // Push 0xBEEF and pop
        (, , , uint8 spStart, , ,) = emu.cpu();
        emu.testPush16(0xBEEF);
        (, , , uint8 spAfterPush, , ,) = emu.cpu();
        assertEq(spAfterPush, spStart - 2);

        uint16 val = emu.testPop16();
        assertEq(val, 0xBEEF);
        (, , , uint8 spAfterPop, , ,) = emu.cpu();
        assertEq(spAfterPop, spStart);
    }

    function test_PHA_PLA() public {
        emu.testSetPC(0x8000);
        emu.testSetA(0x7F);
        emu.poke8(0x8000, 0x48); // PHA
        emu.poke8(0x8001, 0x68); // PLA

        emu.step(); // PHA
        emu.step(); // PLA

        (uint8 A, , , uint8 sp, , uint8 P,) = emu.cpu();
        assertEq(A, 0x7F);
        assertEq(sp, 0xFD); // stack pointer back
        // Z flag should be 0, N flag 0 since 0x7F positive
        bool Z = (P & 0x02)!=0;
        bool N = (P & 0x80)!=0;
        assertFalse(Z);
        assertFalse(N);
    }

    function test_PHP_PLP() public {
        // Set flags pattern, push and pull
        emu.testSetFlag(0, true); // C
        emu.testSetFlag(7, true); // N

        emu.testSetPC(0x9000);
        emu.poke8(0x9000, 0x08); // PHP
        emu.poke8(0x9001, 0x28); // PLP

        emu.step();
        // Modify flags to check PLP restoration
        emu.testSetFlag(0, false);
        emu.testSetFlag(7, false);
        emu.step();

        (, , , , , uint8 P,) = emu.cpu();
        assertTrue((P & 0x01)!=0); // C restored
        assertTrue((P & 0x80)!=0); // N restored
    }

    function _flag(uint8 mask) internal view returns (bool) {
        (, , , , , uint8 P,) = emu.cpu();
        return (P & mask)!=0;
    }

    function test_TXS_TSX() public {
        // X -> SP
        emu.testSetX(0x10);
        emu.testSetPC(0x9100);
        emu.poke8(0x9100, 0x9A); // TXS
        emu.poke8(0x9101, 0xBA); // TSX
        emu.step();
        (, , , uint8 spAfterTxs,, ,) = emu.cpu();
        assertEq(spAfterTxs, 0x10);

        emu.step();
        (, uint8 X,, , , uint8 P,) = emu.cpu();
        assertEq(X, 0x10);
        // Z and N clear
        assertFalse(_flag(1<<1));
        assertFalse(_flag(1<<7));

        // Now set SP to 0x80 negative test
        emu.testSetSP(0x80);
        emu.testSetPC(0x9200);
        emu.poke8(0x9200, 0xBA);
        emu.step();
        (, uint8 X2,, , , uint8 P2,) = emu.cpu();
        assertEq(X2, 0x80);
        assertTrue((P2 & 0x80)!=0); // N set
    }
}

================
File: utils/binary2hex.js
================
#!/usr/bin/env node
/*
 * binary2hex.js – CLI helper to convert a raw binary into a Solidity‑ready
 *                 hex literal suitable for `bytes memory rom = hex"…";`.
 *
 * Usage:
 *   node utils/binary2hex.js path/to/rom.bin > rom_hex.txt
 *
 * The output will be a single line without 0x‑prefix or newlines.
 * You can then paste that into BasicRom.sol:
 *   bytes memory rom = hex"<PASTE_HERE>";
 *
 * NOTE: Solidity literal size limit is 24 KiB source characters. For larger
 * ROMs (>12 KiB) you may need to split across multiple hex"…" concatenations
 * or embed via assembly extcodecopy of an external contract (our current
 * approach).  TinyBASIC/EhBASIC images of 8–12 KiB fit fine.
 */

const fs = require('fs');

if (process.argv.length !== 3) {
  console.error('Usage: binary2hex.js <binary file>');
  process.exit(1);
}

const filePath = process.argv[2];

try {
  const data = fs.readFileSync(filePath);
  const hex = data.toString('hex');
  process.stdout.write(hex + '\n');
} catch (e) {
  console.error('Error:', e.message);
  process.exit(1);
}

================
File: .gitmodules
================
[submodule "lib/forge-std"]
	path = lib/forge-std
	url = https://github.com/foundry-rs/forge-std

================
File: instructions.md
================
# MOS 6502 Emulator Reference ( distilled from Syntertek SY6500 / SY65C02 data‑sheet )

*Everything in this file comes from the user‑supplied PDF unless otherwise stated.*  citeturn0file0  
Use it verbatim as system‑or model‑prompt context when asking an LLM to implement a 6502 core.

---

## 1  Programming Model

| Register | Size | Purpose |
|----------|------|---------|
| **A** (Accumulator) | 8‑bit | ALU source/target for arithmetic & logic |
| **X** | 8‑bit | Index #1, loop counter, memory offset |
| **Y** | 8‑bit | Index #2 |
| **SP** (Stack Pointer) | 8‑bit | Post‑decrement push / pre‑increment pull; stack page **$0100–$01FF** |
| **PC** (Program Counter) | 16‑bit | Instruction fetch pointer |
| **P** (Status) | 8‑bit | *NV‑B D I Z C* – see below |

### Status‑flag bit positions
|7|6|5|4|3|2|1|0|
|--|--|--|--|--|--|--|--|
|N|V|–|B|D|I|Z|C|
* **N** Negative, **V** Overflow, **B** BRK/IRQ marker, **D** BCD mode, **I** IRQ disable, **Z** Zero, **C** Carry*

---

## 2  Memory Map & Vectors

* Total address space: **64 KiB** (16‑bit bus).
* **Zero‑page** $0000–00FF: supports single‑byte addressing.
* **Stack page** $0100–01FF.

| Address | Vector | Description |
|---------|--------|-------------|
| **$FFFA/FFFB** | NMI | Non‑maskable interrupt (low‑byte, high‑byte) |
| **$FFFC/FFFD** | RESET | Power‑on / reset vector |
| **$FFFE/FFFF** | IRQ/BRK | Maskable IRQ & BRK instruction |

Push order during interrupt/BRK: **PC‑hi, PC‑lo, P** (with B flag as noted below).

---

## 3  Addressing Modes (NMOS 6502 – 13 modes)

| Mode | Suffix | Example | Base cycles | Extra cycle notes |
|------|--------|---------|-------------|-------------------|
| Implied | – | CLC | 2 | – |
| Accumulator | A | ASL A | 2 | – |
| Immediate | # | LDA #$42 | 2 | – |
| Zero Page | zp | LDA $44 | 3 | – |
| Zero Page,X | zp,X | LDA $44,X | 4 | – |
| Indexed Indirect | (zp,X) | LDA ($20,X) | 6 | – |
| Indirect Indexed | (zp),Y | LDA ($20),Y | 5 | +1 cycle if page crossed |
| Absolute | abs | LDA $1234 | 4 | – |
| Absolute,X | abs,X | LDA $2000,X | 4 | +1 if page crossed |
| Absolute,Y | abs,Y | LDA $2000,Y | 4 | +1 if page crossed |
| Indirect (JMP only) | (abs) | JMP ($3000) | 5 | Page‑wrap bug on low‑byte overflow |
| Relative | rel | BEQ label | 2 | +1 if branch taken, +1 if branch crosses page |
| Implicit Stack | – | JSR/RTS/RTI/PHA… | see tables | varies |

Detailed per‑cycle bus sequences are listed in **Appendix A, pp 26‑37** and can be used for cycle‑exact emulation. citeturn0file0

---

## 4  Instruction Set Summary

* **56 legal opcodes**; each combines with a subset of addressing modes → **151 distinct instruction forms**.
* Complete opcode matrix with cycles and bytes is on **page 9**.
* Groups:
  * **Load/Store:** LDA, LDX, LDY, STA, STX, STY
  * **ALU:** ADC, SBC, AND, ORA, EOR, CMP, CPX, CPY, BIT
  * **Shift/Rotate:** ASL, LSR, ROL, ROR
  * **Branch:** BMI, BPL, BEQ, BNE, BCS, BCC, BVS, BVC
  * **Register moves:** TAX, TAY, TXA, TYA, TSX, TXS
  * **Stack:** PHA, PLA, PHP, PLP
  * **System:** JSR, RTS, JMP, BRK, RTI, NOP

> **Page‑cross penalty:** if an Absolute,X / Absolute,Y / (zp),Y access crosses a 256‑byte page boundary, add **1 extra cycle**. Branches that cross a page also add **1 extra cycle** after the branch‑taken penalty.

---

## 5  Interrupt & Reset Behaviour

| Event | Sequence |
|-------|----------|
| **RESET** | 1️⃣ Set `I=1`, 2️⃣ SP ← $FD, 3️⃣ read vector $FFFC/FFFD into PC |
| **NMI** | Push *PC‑hi*, *PC‑lo*, *P* (B=0), set `I`, fetch vector $FFFA/FFFB |
| **IRQ/BRK** | Same as NMI but vector $FFFE/FFFF`. **BRK** sets B=1 before push. |

On BRK/IRQ the pushed P has **bit 5 = 1** (unused) and **bit 4 = 1** (B flag). On NMI the B flag is cleared.

---

## 6  Decimal (BCD) Mode Caveats

* `D` flag enables BCD adjustment for **ADC** & **SBC** only.
* **V flag** after decimal SBC follows binary rules (counter‑intuitive but documented on p 19‑21).
* Some early masks have undefined behaviour if `D=1` during interrupts—safe emulators leave `D` unchanged except on RESET (where it is cleared).

---

## 7  Stack Details

* Address range: **$0100–$01FF** (256 bytes).
* `SP` holds **offset**; push: `WRITE $0100+SP`, then `SP–‐‑‑`; pull: `SP++`, then `READ $0100+SP`.
* On **JSR**: push **PC‑hi**, **PC‑lo‑1**, then load target address. (Therefore RTS must add 1.)

---

## 8  CMOS 65C02 Additions (optional)

Located on **pages 14‑24**.
* Decoded all 256 opcodes, eliminating “illegal” gaps.
* New instructions: `BRA` (relative branch), `PHX/PHY`, `PLX/PLY`, `STZ`, `TRB/TSB`, `BBS/BBR`, etc.
* Hardware changes: `RMW` instructions no longer perform a dummy read.

If targeting **NMOS 6502 only**, you may ignore this section.

---

## 9  Cycle‑Accurate Bus Timing (advanced)

Appendix A provides per‑instruction bus traces (`T0…Tn`) including address‑bus source and data‑bus R/W flags.  
Example (*single‑byte* `ASL A`, p 26):
```
T0  PC   ⇒ address bus   | Fetch OP‑CODE
T1  PC+1 ⇒ address bus   | (discarded)
T2  --- (internal)       | Execute & finish
```
Use these tables to drive callbacks for memory‑mapped peripherals (video scanlines, DMA stealing, etc.).

---

## 10  Quick Implementation Checklist

1. **Opcode table (256 entries)** – name, bytes, baseCycles, addrMode, pageCrossPenalty?  
   → scrape from page 9.
2. **Addressing‑mode helpers** implementing read/write semantics above.
3. **ALU & flag update helpers** (ADC/SBC share carry/overflow rules).  
   Decimal adjust tables optional.
4. **Interrupt controller** obeying push order & vector fetch.
5. **Stack helpers** as per §7.
6. Optional: decimal mode, undocumented opcodes, 65C02 extensions.

---

### Citations
All bullet‑point facts come directly from *Syntertek SY6500/SY65C02 data‑sheet* (37 pp). citeturn0file0

================
File: README.md
================
## Foundry

**Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust.**

Foundry consists of:

-   **Forge**: Ethereum testing framework (like Truffle, Hardhat and DappTools).
-   **Cast**: Swiss army knife for interacting with EVM smart contracts, sending transactions and getting chain data.
-   **Anvil**: Local Ethereum node, akin to Ganache, Hardhat Network.
-   **Chisel**: Fast, utilitarian, and verbose solidity REPL.

## Documentation

https://book.getfoundry.sh/

## Usage

### Build

```shell
$ forge build
```

### Test

```shell
$ forge test
```

### Format

```shell
$ forge fmt
```

### Gas Snapshots

```shell
$ forge snapshot
```

### Anvil

```shell
$ anvil
```

### Deploy

```shell
$ forge script script/Counter.s.sol:CounterScript --rpc-url <your_rpc_url> --private-key <your_private_key>
```

### Cast

```shell
$ cast <subcommand>
```

### Help

```shell
$ forge --help
$ anvil --help
$ cast --help
```

================
File: script/LoadRom.s.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Script.sol";
import {BasicRom} from "../src/BasicRom.sol";
import {Emulator6502} from "../src/Emulator6502.sol";

/// @dev Example script: deploys cartridge + emulator and loads ROM at $8000.
contract LoadRomScript is Script {
    function run() external {
        // 1. Resolve base address from env (defaults to 0x8000)
        uint256 baseAddr;
        try vm.envUint("BASE_ADDR") returns (uint256 v) {
            baseAddr = v;
        } catch {
            baseAddr = 0x8000;
        }

        // Optional: instruction budget after boot for quick smoke (default 0)
        uint256 initialSteps;
        try vm.envUint("RUN_STEPS") returns (uint256 s) {
            initialSteps = s;
        } catch {
            initialSteps = 0;
        }

        vm.startBroadcast();

        // Deploy cartridge contract (replace with real ROM bytes in BasicRom)
        BasicRom rom = new BasicRom();

        // Deploy emulator
        Emulator6502 emu = new Emulator6502();

        // Load ROM into emulator at specified base address
        emu.loadRomFrom(address(rom), uint16(baseAddr));

        // Patch vectors (RESET, IRQ, NMI) to point to baseAddr for convenience
        uint8 lo = uint8(baseAddr & 0xFF);
        uint8 hi = uint8((baseAddr >> 8) & 0xFF);
        emu.poke8(0xFFFC, lo);
        emu.poke8(0xFFFD, hi);
        emu.poke8(0xFFFA, lo); // NMI
        emu.poke8(0xFFFB, hi);
        emu.poke8(0xFFFE, lo); // IRQ/BRK
        emu.poke8(0xFFFF, hi);

        // Boot CPU
        emu.boot();

        // Optionally run some steps to reach prompt
        if (initialSteps > 0) {
            emu.run(uint64(initialSteps));
        }

        vm.stopBroadcast();
    }
}

================
File: src/BasicRom.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title BasicRom — EhBASIC v2.22 ROM (16 KiB)
/// @notice Deployed bytecode *is* the ROM image. Auto‑generated — DO NOT EDIT MANUALLY.
///          Regenerate with `python scripts/build_basic_rom.py` if needed.
contract BasicRom {
    constructor() {
        bytes memory rom = hex"a004b9f6e09900028810f7a2ff86889aa94c85a1a21cbdfae095bbcad0f8a212bd17e19500ca10f8a90085dc85df85b28567a90e8564a90385a0a26886652092c8a92aa0e120d3c82040c286c384c420c200d01fa000e611d008e612a512c9c0f01da9559111d111d0150a9111d111f0e5d00c20a6d9a5acc998b0a220f7d4a511a412c00190978585848685818482a000a2038479867a989179e6792092c82050c3a58538e579aaa586e57a2082daa939a0e120d3c8a95aa0c1850184026c0100200bc1857f848038a5a6e5aaa8a5a7e5abaae898f0243849ff65a685a6b003c6a7389849ff65a485a4b008c6a59004b1a691a488d0f9b1a691a4c6a7c6a5cad0f2608578bae478903060c482902ad004c581902448a2089848b5a3ca10fa20dfd1a2006895a4e8e00830f868a868c4829006d005c581b00160a20c2092c8bda9e6bcaae620d3c82089c3a9e6a0e720d3c8a488c8f0032077daa90085df85dca9f7a0e720d3c8204dc286c384c420c200f0f4a2ff86889006207ec24cf3c42055c7207ec2845d2024c39044a001b1aa8572a57b8571a5ab8574a5aa88f1aa18657b857b8573a57c69ff857ce5abaa38a5aae57ba8b003e8c6741865719003c67218b1719173c8d0f9e672e674cad0f2ad2102f03fa585a48685818482a57b85a6a47c84a7655d9001c885a484a520c1c0a57fa480857b847ca45d88b91d0291" hex"aa88c003d0f6a51291aa88a51191aa88a9ff91aa2065c3a679a57aa00186718572b171f018a004c8b171d0fb38986571aaa0009171986572c8917190e04c67c120ebc820e8c8d00520edc8ca2ca20020eae090fbf0f9c907f010c90df019e000d004c92190e9c908f0dee047b00c9d2102e820edc8d0d84c89c8a907d0f4a0ff38a5c3e921aa8660bd2102f051c95fb04dc93cb00ec930b045855cc922f061c92a903b24607037867884baa0108473a0e38474a000d173f0059021c8d0f7980aaabd2ee38573bd2fe38574a0ffa678c8b1733008e8dd2102f0f5d02ba4bae8c8992102c900f032e93af004c949d00285604957d093855cbd2102f0e2c55cf0dec8992102e8d0f0a678b17308c82810f9b173d0bebd210210c3c8c8992102c8c8c8c6c360a579a67aa00185aa86abb1aaf01aa003b1aa88c512d004b1aac511b00988b1aaaa88b1aa90def0011860d0fda900a89179c8917918a5796902857ba57a6900857c18a57969ff85c3a57a69ff85c4a585a48685818482a57ba47c857d847e857f84802044c5a268866568aa688efe018dff01a2fd9aa900858c856160f0d0609006f004c9b7d0f42055c72024c320c200f00cc9b7d09320bc002055c7d08ba5110512d006a9ff85118512a00184602092c8b1aaf03e2014c5c8b1aaaac8b1aac512d004e411f002b02a84972082daa920a497297f20edc8c922d006a5" hex"6049ff8560c8b1aad00ea8b1aaaac8b1aa86aa85abd0b76010de246030daa2e50a0a9002e81869119001e8857386748497a000b173aac8b173caf0b820edc8c8b17348c8b173a0008574688573b173caf0a220edc8c8d0f5a980856120b4c76868a9102003c1209dc6189865c348a5c4690048a58848a58748a9ad20f1cb20d0ca20cdcaa5b0097f25ad85ada997a0c4857184724c84cba9e0a0e1207dd820c200c9b2d00620bc0020cdca20e9d885b02079cba59848a59748a981482014c5a5c3a4c4a688e8f004858b848ca000b1c3f007c93af01d4c02cca002b1c318f056c8b1c38587c8b1c385889865c385c39002e6c420bc0020fcc44cbcc4f0540ab0034cb4c7c956b0cea8b908e248b907e2484cbc006c0302c903b00118d067a5c44902f0104902a4c3848b858ca587a4888589848a68689007a9dea0e74c4fc14c5ac1d00f38a579e901a47ab00188858f8490602055c720a0c6a588c512b00b983865c3a6c49007e8b004a579a67a2028c3b0034c72c6a5aae901a4abb0d090cd208cd4860d60d0fda48cd005a21e4c3cc1a9932014dfa9932017df84c4a58b85c3a589a48a8587848860d0034c65c32072c3f02ea9052003c1a5c448a5c348a58848a58748a99d4820c2004cbcc4a9052003c1a5c448a5c348a58848a58748a98d4820c20020ebc54cbcc42055c720a0c6a588c512b00b983865c3a6c49007e8" hex"b004a579a67a2028c39067a5aae90185c3a5abe90085c460a2224c3cc1a8babd0301c99dd0f2e8e89a98f020c93af01ce9b3aaf004cad062ca869820bc0020e1caa5acf002a9ffba4598d01abd02018587bd03018588bd040185c3bd050185c420c2004cbcc4e8e8e8e8e89a4c8cc6a2042ca20e4c3cc1d09e686868c98dd0ef6885876885886885c36885c4209dc6981865c385c39002e6c4604c02cca23a2ca200a000845c8a455c855cb1c3f0eac55cf0e6c8c922d0f3f0ec20e1ca20c200c9b0f011c989d0d2a6c3a4c420bc00b0c986c384c4a5acf01b20bc00b0034cebc5c990d0034cfec420fcc4a000b1c3c9acf09960a000a201c8b1c3f00fc98bd003e8d0f4c9acd0f0cad0edc8981865c385c39002e6c420c20090c34cfcc420a0c64c8fc64c02ccc9a9d0034c38dfc9aad0034c3cdf208cd448c98df004c989d0e3c6afd004684cfec420bc002055c7c92cf0ee6860a20086118612b0f7e019a8b0dde92fa8a5110a26120a2612651185118a651206112aaa98651185119001e820bc004c59c7a9e42ca9e04820aacda65f301e85978498207dd86848a0e120bed520a3d820c200c92cd0a820bc004c8cc74cdcca20aacd85978498a9c120f1cba55f4820e1ca682a20d3cad0034ca3d8a002b1aec5829017d00788b1aec581900ea4afc47c9008d00da5aec57bb007a5aea4af4c0cc8a000b1ae2032d1a59ea4" hex"9f85b884b92011d3a9aca000859e849f2073d3a000b19e9197c8b19e9197c8b19e91976020aacd859784982000dfa65f3007a82066d04ca3d848a901b00168203ad1f00568a00091ad2085d14cd0c720d6c820c200f03bc9abf056c9aff052c92cf038c93bf06620e1ca245f30e12095da2044d1a000a50ff00a38e50ef1aeb0032092c820d6c8f0c9a9009d2102a221a002a90d20edc8a90ad052a50ec51090052092c8d02738e564b0fc49ff6901d012482089d4c929d07b68c9abd0068ae50e900aaa8af00620e8c8cad0fa20bc00d085602044d1203ed3a000aaf049b17120edc8c8cad0f760a9202ca93fc920901948a50fd00aa50ee564d00b850ef007c50ed0032092c8e60e6820ede0c90dd0148678a60df00aa90020edc8cad0faa90d860ea67829ff60a562100ba58da48e858784884c02cca912a0e820d3c8a58ba48c85c384c460c922d00b20becba93b20f1cb20d6c8206ad02040c2a900cd2102d00a184c2cc5a68fa490a98085628691849220aacd85978498a5c3a4c485118412a691a49286c384c420c200d0112462306520ebc82040c286c384c420c200245f1024855bc922f007a93a855ba92c18855ca5c3a4c469009001c8204ad120cfd420d0c74ccec920a6d920a3d820c200f00ac92cf0034c28c920bc00a5c3a4c485918492a511a41285c384c420c200f02c20fecb4c73c9209dc6c8aad012a2" hex"06c8b1c3f073c8b1c3858dc8b1c3c8858eb1c3c8aa208fc6e083f081d0daa591a492a66210034c4ec5a000b191d00160a901a0e84cd3c8bae8e8e8e8bd0101c981d021a598d00abd02018597bd03018598dd0301d007a597dd0201f0078a186910aad0d860d004a000f00320aacd859784982037caf004a200f0639a8a38e9f7857369fba001207dd8babd080185b0a597a49820bed520a3d8a0012019d9badd0801f017bd0d018587bd0e018588bd100185c3bd0f0185c44cbcc48a690faa9a20c200c92cd0f120bc00206bca20e1ca182438245f3003b00360b0fda2184c3cc1a6c3d002c6c4c6c3a90048a9022003c120cdcba900859b20c20038e9c09017c903b013c9012a4901459bc59b9067859b20bc004cfbcaa69bd02cb079690a9075d007245f10034cd4d285710a6571a868d9e9e2b06520d0ca482062cb68a4991019aaf076d05d265f8a855f2aa6c3d002c6c4c6c3a024859bd0d5d9e9e2b04490d7b9ebe248b9eae2482079cba59b48b9e9e24cebca4c02cc688571e671688572a5b04820d9d8a5af48a5ae48a5ad48a5ac486c7100a0ff68f020c964f00320d0ca8499684a85636885b36885b46885b56885b66885b745b085b8a5ac60a5c3a4c469009001c82044d14ccfd420bc00b0034ca6d9aa302fc924f0f6c925f0f2c92ef0eec922f0d6c928d04f20e9caa929a000d1c3d00b4cbc00a928d0f3a92c" hex"d0efa2024c3cc1c9b7f029c9b6f0bec9b1d013a021d01f20a6cea5af49ffa8a5ae49ff4c59d0c9aed0034cb4d0e9c3b0194c02cca01e68684c3acb20aacd85ae84afa65f30034c7dd8600aa8b9a4e248b9a3e248b95ee2f00548b95de2486020eccb4cd2ca20eccb4cd0ca465f4cbc0020e9ca20fecb20d2ca68aa68a8a5af48a5ae4898488a48208cd48a6020e9ca20d0caa5acc998b0202050d9a202b5ad9511ca10f920c200a200c929f00a20ded420c200c929d001604c29cf20e2cc455ba8a5ae455c4c59d020e2cc055ba8a5ae055c4c59d020e2cc255ba8a5ae255c4c59d020a6cea5ae855ca5af855b20c3d520a6cea5af6020d3cab013a5b7097f25b485b4a9b3a0002017d9aa4c3fcd465fc69b203ed385ac86ad84aea5b5a4b62042d386b584b6aa38e5acf008a9019004a6aca9ff85b0a0ffe8c8cad007a6b0300f18900cb1b5d1adf0efa2ffb002a201e88a2a2563f002a9ff4cfad820fecbaa20afcd20c200d0f460209fcda5aea678f022e010b02306af2acad0faa4af4c59d0209fcda5aea678f00ae010b00b4a66afcad0faa4af4c59d0a900a84c59d0208fd4867820c3d54ca6cea20020c200865e8593297f201eceb0034c02cca200865f20bc009005201ece900baa20bc0090fb201eceb0f6c924d00ba9ff855f8a0980aa20bc0086940561c928d0034cb8cea9008561a57ba67ca00086ab85aae47e" hex"d004c57df02ca593d1aad008a594c8d1aaf0698818a5aa690690e1e8d0dcc961b00ac9419005e95b38e9a560e97b38e985606848c93dd005a9e1a0e160a57da47e85aa84aba57fa48085a684a71869069001c885a484a520c1c0a5a4a4a5c8857d847ea000a59391aac8a59491aaa900c891aac891aac891aac891aaa5aa186902a4ab9001c88595849660a55d0a690565aaa4ab9001c885a484a56020bc0020cdcaa5b0300da5acc9909009a9e8a0e12017d9d0744c50d9a55e48a55f48a0009848a59448a59348209cce68859368859468a8babd020148bd010148a5ae9d0201a5af9d0101c820c200c92cf0d2845d20efcb68855f68855ea67da57e86aa85abc580d004e47ff039a000b1aac8c593d006a594d1aaf016c8b1aa1865aaaac8b1aa65ab90d7a2102ca2084c3cc1a212a55ed0f7208bcea55da004d1aad0e74cc5cf208bce200bc1a00084bba59391aac8a59491aaa55da00484ba91aa18a20ba900245e5007686901aa686900c891aac88a91aa2014d086ba85bba471c65dd0dd65a5b05d85a5a88a65a49003c8f052200bc1857f8480a900e6bba4baf0058891a4d0fbc6a5c6bbd0f5e6a538a002a57fe5aa91aac8a580e5ab91aaa55ed053c8b1aa855da90085ba85bbc868aa85ae6885afd1aa900ed006c88ad1aa90074c26cf4c3ac1c8a5bb05baf00a2014d08a65aeaa98a47165af86bac65dd0cb06ba" hex"2a06ba2aa8a5ba65a485959865a58596a8a595608471b1aa857688b1aa8577a91085a8a200a0008a0aaa982aa8b0b306ba26bb900b188a6576aa986577a8b0a2c6a8d0e360a55f1003203ed320dfd138a581e57fa8a582e580465f85ad84aea2904c02d9a40ea900f0efa688e8d0a4a2164c3cc120a5d0859c849d206ad020facba980856120aacd20d0ca20efcba9c120f1cba59648a59548a5c448a5c348208cc64c14d1a9ae20f1cb0980856120b1cd4cd0ca20a5d048984820facb20e1ca20efcb20d0ca68859d68859ca220a003b19cf09d859688b19c8595aac8b195488810faa49620a7d8a5c448a5c348b19c85c3c8b19c85c4a59648a5954820cdca68859c68859d20c200f0034c02cc6885c36885c4a00068919cc868919cc868919cc868919c6020d0ca2095daa9f0a000f012a6aea4af869e849f20add186ad84ae85ac60a222865b865c85b884b985ad84aea0ffc8b1b8f00cc55bf004c55cd0f3c922f0011884ac9865b885baa6b99001e886bba5b9c903b00b982032d1a6b8a4b9201fd3a665e071d005a21c4c3cc1a5ac9500a5ad9501a5ae9502a00086ae84af88845f8666e8e8e886656046604849ff386581a482b00188c4809011d004c57f900b8581848285838484aa6860a20ca56030b820dfd1a980856068d0d0a685a58686818582a000849da57fa68085aa86aba96885718472c565f0052063d2" hex"f0f706a0a57ba67c85718672e47ed004c57df005205dd2f0f385a486a5a90485a0a5a4a6a5e480d004c57ff07585718672a002b17165a485a4c8b17165a585a5a001b17110dba004b1710a69052095d2e4a5d004c5a4f0cd2063d2f0f3c8b1711030c8b171f02bc8b171aac8b171c5829006d01ee481b01ac5ab9017d004e4aa901186aa85aba571a672859c869d888884a218a5a0657185719002e672a672a00060c6a0a69df0f5a4a218b19c65aa85a6a5ab690085a7a581a68285a486a520c8c0a4a2c8a5a4919caae6a5a5a5c8919c4ce3d1a5af48a5ae4820cdcb20d2ca6885b86885b9a000b1b81871ae9005a21a4c3cc12032d12011d3a59ea49f2042d32023d3a5b8a4b92042d32085d14cf8caa000b1b848c8b1b8aac8b1b8a86886718472aaf014a000b1719183c8cad0f89818658385839002e6846020d2caa5aea4af857184722073d308a000b17148c8b171aac8b171a86828d013c482d00fe481d00b4818658185819002e682688671847260c467d00cc566d0088565e9038566a00060208fd48a48a901203ad168a00091ad4c85d14820f7d3d19e98f0094820f7d318f19e49ff9004b19eaa98488a48203ad1a59ea49f2042d368a86818657185719002e672982023d34c85d148a9ff85af20c200c929f00620fecb208cd420f7d3ca8a4818a200f19eb0c249ffc5af90bda5afb0b920efcb6885a26885a3" hex"68aa68859e68859fa0008af079e6a26ca200203bd385aca8f038203ad186ad84aea888b1712022ce90020920918398d0f1f01f203bd385aca8f017203ad186ad84aea888b171201ece900229df918398d0f14c85d120bc0020aacd20efcb20d2caa002b195aa88b195a88a4c59d02074d44c66d0203bd3a8602074d4f008a000b171a84c66d04c29cf20bc0020cdca20a2cea4aed0f0a6af4cc2002074d4d0034c50d6a6c3a4c486ba84bba67186c31865718573a57285c469008574a000b1734898917320c20020a6d968a0009173a6baa4bb86c384c46020cdca20f1d420fecba51248a51148208cd468851168851260a5acc998b08f2050d9a5aea4af841185126020f1d4a200a111a84c66d020d8d48aa20081116020f1d4a200a111a8e611d002e612a1114c59d020cdca20f1d48497859820fecb20cdca20f1d498a2008197e697d002e698a51281974cc20020aacd85978498a55f4820fecb20aacd68455f1010a003b197aab19591978a91958810f3604cdcca20cdca20f1d4a9d548a985486c11004cc20020d8d48697a20020c200f00320ded48698b11145982597f0f860208bd7a5b049ff85b045b785b8a5ac4cc1d520dad6904da9e9a0e1208bd7d010a5b785b0a204b5b295abcad0f986b960a6b986a3a2b3a5b3a8f0c438e5acf024901284aca4b784b049ff6900a00084a3a2acd004a00084b9c9f930b6a8" hex"a5b9560120f1d624b8104ca0ace0b3f002a0b33849ff65a385b9b90300f50385afb90200f50285aeb90100f50185adb0032096d6a0009818a6add03ea6ae86ada6af86aea6b986af84b96908c918d0e8a90085ac85b06065a385b9a5af65b685afa5ae65b585aea5ad65b485adb01a60690106b926af26ae26ad10f438e5acb0cf49ff690185ac900ce6acf03666ad66ae66af66b960a5b049ff85b0a5ad49ff85ada5ae49ff85aea5af49ff85afa5b949ff85b9e6b9d00ae6afd006e6aed002e6ad60a20a4c3cc1a274b40384b9b4029403b4019402a4b29401690830ecf0eae908a8a5b9b01216019002f60176017601760276036ac8d0ee186020e9d8f00210034c29cfa5ace97f48a98085aca969a0e120bed5a96da0e12001d8a9e0a0e120a3d5a95ca0e12051dca971a0e120bed5682045daa975a0e1208bd7f04c20b1d7a900857585768577a5b92060d7a5af2060d7a5ae2060d7a5ad2065d74c6ed8d0034cc8d64a0980a8901318a57765b68577a57665b58576a57565b4857566756676667766b9984ad0de6085718472a003b17185b688b17185b588b17185b745b085b8a5b7098085b488b17185b3a5ac60a5b3f01d1865ac90043031182c1012698085acd0034c54d6a5b885b060a5b0101b68684c50d620cad8aaf0f0186902b00ba20086b820dbd5e6acd0e04cc3d620cad8a9f1a0e1a20086b8207dd84c04" hex"d8208bd7f06320d9d8a90038e5ac85ac20b1d7e6acf0d6a2ffa901a4b4c4add00aa4b5c4aed004a4b6c4af082a900ea001e8e0023004d028a040957598289014a8a5b6e5af85b6a5b5e5ae85b5a5b4e5ad85b49806b626b526b4b0cf30bd10cb4a6a6a85b9284c6ed8a2144c3cc1a57585ada57685aea57785af4c34d685718472a003b17185af88b17185ae88b17185b0098085ad88b17185ac84b960a2a4a000f004a697a49820d9d886718472a003a5af917188a5ae917188a5b0097f25ad917188a5ac917184b96020d9d8a205b5ab95b2cad0f986b960a5acf0fb06b990f720b8d6d0f24c89d6a5acf009a5b02aa9ffb002a9016020e9d885ada90085aea288a5ad49ff2aa90085af86ac85b985b04c2fd646b06085738474a000b173c8aaf0c6b17345b030c4e4acd01ab1730980c5add012c8b173c5aed00bc8a97fc5b9b173e5aff028a5b0900249ff4cefd8a5acf04a38e99824b01009aaa9ff85b2209cd68aa2acc9f9100620dad684b260a8a5b0298046ad05ad85ad20f1d684b260a5acc998b01e2050d984b9a5b084b049802aa99885aca5af855b4c2fd685ad85ae85afa860a000845fa20994a8ca10fb907fc92dd00486b1f004c92bd00520bc00906ec924d0034c6edec925d0084c9cde20bc00905bc92ef02ec945d03020bc009017c9b7f00ec92df00ac9b6f008c92bf004d00766ab20bc00905b24ab10" hex"0ea90038e5a94c11da66aa24aa50c3a5a938e5a885a9f012100920f0d7e6a9d0f9f00720d7d7c6a9d0f9a5b13001604cf4db4824aa1002e6a820d7d768290f2045da4cd2d94820cad86820fad8a5b745b085b8a6ac4cc1d5a5a9c90a9009a96424ab300e4cc3d60a0a65a90aa00071c3e92f85a94cf8d9a9eda0e720d3c8a588a68785ad86aea290382007d9a0009820a2da4cd3c8a001a92024b01002a92d99ef0085b084bac8a6acd005a9304caedba900e081b009a981a0e12039d7a9fa85a8a97da0e12017d9f01e1012a979a0e12017d9f002100e20d7d7c6a8d0ee20f0d7e6a8d0dc20bad52050d9a201a5a81869073009c908b00669ffaaa90238e90285a986a88af0021013a4baa92ec899ef008af006a930c899ef0084baa000a280a5af1879f7e185afa5ae79f6e185aea5ad79f5e185ade8b00410e5300230e18a900449ff690a692fc8c8c88495a4bac8aa297f99ef00c6a8d006a92ec899ef0084baa4958a49ff2980aac012d0b2a4bab9ef0088c930f0f8c92ef001c8a92ba6a9f02e1008a90038e5a9aaa92d99f100a94599f0008aa22f38e8e90ab0fb693a99f3008a99f200a90099f400f00899ef00a90099f000a9f0a00060f042a5b3d0034c52d6a29ca00020a7d8a5b7100f2081d9a99ca0002017d9d00398a45b20c5d5984820fbd6a99ca0002039d720ffdb684a900aa5acf006a5b049ff85b060a9" hex"85a0e12039d7a5b96950900320e1d885a320cdd8a5acc988900320ced72081d9a55b186981f0f338e90148a204b5b3b4ac95ac94b3ca10f5a5a385b920a6d520f4dba989a0e12067dca90085b8684cb3d785ba84bb209dd8a9a42039d7206bdca9a4a0004c39d785ba84bba2a8209fd8b1ba85b1a4bac898d002e6bb85baa4bb2039d7a5baa4bb1869049001c885ba84bb20bed5a9a8a000c6b1d0e460a5acf007a2d8a00020a7d8a2afa01306d926da26db26d890058a45d985d988d0eea202b5d995adca10f9a98085ac0a85b04c34d6a9a6a0e120bed520cad8a9bba0e1a6b720f9d720cad82081d9a90085b820a6d5a9eda0e120a3d5a5b048100d20bad5a5b03009a56349ff856320f4dba9eda0e120bed568100320f4dba9aaa0e14c51dc209dd8a900856320d8dca29ca00020a7d8a9a4a000207dd8a90085b0a5632049dda99ca0004c01d8484c0add200a004cefcba5b048100320f4dba5ac48c9819007a9e0a0e12001d8a9bfa0e12051dc68c9819007a9a6a0e120a3d56810164cf4db20d8d4e008b020a900382aca10fce8011181116020d8d4e008b00ca9ff2aca10fce821118111604c29cf20bc0020d8d4e008b0f320c200c929f0034c02cc20bc00a900382aca10fce82111f002a9ff4cfad8e019b0488678a918203ad1a017a2184611661266138a2a91ad8810f3a578f00aaa3849ff6918f01cd00fa8b1" hex"adc930d007caf003c810f4e8981865ad85ada90065ae85ae86ac20bc004c85d14c29cfe007b0f98678a906203ad1a005f8a5132051dea5122051dea5112051ded8a206a578f0b7aa3849ff6906f0c9d0bcaa290f205cde8a4a4a4a4ac90a693091ad886085aca90085b88a2045da20bc00900a0920e961c906b02a690a290faaa5acf0e4690490dc4cc3d6aaa5acf006e6acf0f4a90085b88a2045da20bc004930c90290e64c2adaad0002d01820eae0900b8d0102a2208e02024c17c5ae0202f003ce0202a2dc20d0dea2df20d0de60b50010fb0a2940f0f695008aa86868a9052003c1a5c448a5c348a58848a58748a98d48b9010085c3b9020085c44cbcc420eae0b009ad0202f009ad010238a2008e020260a2df2ca2dcc993f011c9b5f00749a2f00e4c02cca97f35001005b5000a150095004cbc0058a2df2ca2dc867820bc002055c7a579a67a2028c3b0034c72c6a678a5aae9019501a5abe9009502a9c0950060d0fda5df0a05df85df4c79c6d0f1a5dc0a05dc85dc4c79c620e9ca4cd0ca20b1df10fba5b4098085b420c3d5f0f020b1df30fbf0f9a5b4098085b420c3d5f0eec929d00568684cbc004c02cc20c200c92cd0ed20d9d8a5b0097f25ad48a5ae48a5af48a5ac4820bc0020cdca6885b36885b66885b56885b485b7a9b3a0004c17d9c92cf01b208cd48af00ae0109045e464b0028664860f20c200f0" hex"1ac92cd0a92089d48a302ee001902aa50ff006e40ff002b0208664a50ff006c564b003856438e564b0fc65641865648510a50f38e5108510604c29cfa5b030f9a5acf0f420cad8a900857785768575857885af85ae85ada218a5b34ab00e06b626b526b4267726762675267806b626b526b4267726762675267806af26ae26ada5af2a855ba5ae2a855ca5ad2a855da9002a855ea577e55b855ba576e55c855ca575e55da8a578e55e900e85788475a55c8576a55b8577e6afcad0a238a5b3e9806a690085ac4c34d620bc0020aacd20efcba495a5964c59d0a9bba0e1207dd8c6ac60a9bba0e14c7dd86c05026c07026c09026c0b02000000a8dee6c3d002e6c4adffffc9acf00ec93ab00ac920f0eb38e93038e9d0604c00c0000000000000004c29cf000000f200030d0a4d656d6f72792073697a65200020427974657320667265650d0a0a456e68616e63656420424153494320322e32320a000280195662807622f38238aa40803504f3813504f3808000008031721891434ff8947423f7947424008138aa3b067463908c77230cab7a1e94007c6342807e75fed0803172158100000081490fdb04861ed7fb879926658723345886a55de183490fdb08783ac5377b83a25c7c2edd4d7d99b01e7d59ed247e9172007e4cb9737faaaa53810000008180000090800000007f00000084200000fe7960002710fffc180000" hex"64fffff60000011ac557c464ca8bc646c95ecd66c9b3c785c7eac5a9c5b9c641c5cdc564df70df76c61dc718c526c77fc588c788d5efe0f2e073d00dd529d576d5b3c51cc654c885c5a2c39fc34dc3e5df23c84ed581dd95dd13df16df64cc64cc64cce8caebcbebcb64cc64cc64cc64cc64cc64cc64cc64cc64cc64cc00005ecc64cc5ecc5ecc5ecc5ecc64cc8bcc8bcc00007cdf7cdf6acc6acc00006fcc6fcc6fccf6d880d913d94cdd44d063d03be09cdcfad6fedbd0dcd7dc20dd52dd02d516d554d46dd425d19ad478d432d411d483d322ded3ddabdd82df92dfd8e0e2e0c8e095d39ed3cdd379c0d579a5d57b3bd77b03d87fbadb50d4cc46bacc46c7cc5680cd5668cd7df3db5a16cc64f5cc2a2b2d2f3c3d3e3f4142434445464748494c4d4e4f505253545556575e0068e36ae36ce36ee370e374e376e37ae37ce38ce3a5e3bce3d5e3e4e3eee3fbe301e413e438e446e458e460e475e4a4e4cfe4e3e4f4e400e50fe5b800b600b700b9003cbfc200c1003ebec0009f00425328c54e44bb534328d7544e28d000494e2428dc4954434c52a84954534554a7495454535428dd00414c4c9c48522428da4c454152a24f4e54a04f5328cd004154418345438845454b28d2454699494d854f4b459b4f9d004c5345ac4e44804f52bc585028cc004eae4f5281524528c7004554a54f5355428d4f544f890045582428db" hex"00468b4e43954e505554844e5428c45251a900434153452428d94546542428e3454e28d4455487495354a14f4144974f4728cb4f4f509e00415828de49442428e5494e28df004557a3455854824d49aa4f54b1554c4c94004646b54e9352bd0045454b28d149e04f4b459a4f5328c852494e549f0045414486454d914553544f52458c45544952518e45544e4d498f455455524e90494748542428e44e4428ca554e8a0041444428d341564598474e28c3494e28ce504328af515228c9544550b2544f509254522428d5574150a600414228ab414e28cf48454eb04fad574f5049e100434153452428d84e54494cb3535228c600414c28d6415250545228e2004149549648494c45b449445448a400ba000345d9e30346e6e3044e49e40444bce3054906e40344cbe3045275e4034c24e40344c0e30447f6e30352a0e4024901e407527ce40547f1e3065283e4065289e406528fe4035279e40453c1e4024f5be4044e53e4034903e4045700e5044c2be40453a9e40344c8e3045067e40444cee30443a5e30244d2e3044c33e405506fe40443b3e3044c27e40543aee3034e46e4055709e50347eee30453cae4064297e3064291e303490fe4034e4de40454cfe40445d5e30254dbe40246e4e30453b5e40454d7e4034e50e40453bde40555eae4055704e5034f58e4012b0000012d0000012a0000012f0000015e0000034180" hex"e30345dce3024f5de4023e76e3023c70e3013e0000013d0000013c00000453ade404490be404417ce30455efe40446e9e304506be40453b9e404529ce4044c2fe40445dfe30443b7e30453b1e40454d3e4044187e3055060e40544c3e30553a4e4044c20e40553c5e40456f4e4044183e30755e3e4074c13e40543a9e30548fbe305428ce307429de3044d38e4044d41e4025065e40554dde40756f8e4064c1ae4075295e4054d3ce4cde6dee6e5e6fae606e714e71de72be73fe74ce75de76ce77be789e799e7ace7bbe7cee74e45585420776974686f757420464f520053796e7461780052455455524e20776974686f757420474f535542004f7574206f6620444154410046756e6374696f6e2063616c6c004f766572666c6f77004f7574206f66206d656d6f727900556e646566696e65642073746174656d656e7400417272617920626f756e647300446f75626c652064696d656e73696f6e00446976696465206279207a65726f00496c6c6567616c206469726563740054797065206d69736d6174636800537472696e6720746f6f206c6f6e6700537472696e6720746f6f20636f6d706c65780043616e277420636f6e74696e756500556e646566696e65642066756e6374696f6e004c4f4f5020776974686f757420444f000d0a427265616b00204572726f720020696e206c696e6520000d0a52656164790d0a" hex"002045787472612069676e6f7265640d0a00205265646f2066726f6d2073746172740d0ahexhexhexhexhexhexhexhexhexhexhexd8a2ff9aa9008d0188a90b8d0288a91e8d0388a01cb962ff99040288d0f7b97ffff00620ede0c8d0f520eae090fb29dfc957f007c943d0c84c00c04c000048ad01882910f0f9688d008860ad01882908f00fad0088c9619006c97bb002295f386018604bff3eff62ff62ff48a5df4a05df85df684048a5dc4a05dc85dc68400d0a69363530322028632920323031342c20417269656a616e2064652056726f6f6d0d0a456e68616e636564203635303220424153494320322e323220286329204c65652044617669736f6e0d0a5b435d6f6c642f5b575d61726d203f000000000000000000000000000000000000000000000000000000000000170200ff0d02";
        assembly {
            return(add(rom, 0x20), mload(rom))
        }
    }
}

================
File: test/AddressingModes.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Emulator6502.sol";

contract AddressingModesTest is Test {
    Emulator6502 internal emu;

    function setUp() public {
        emu = new Emulator6502();
    }

    function test_Immediate() public {
        // Write literal 0x99 at PC=0x8000
        emu.testSetPC(0x8000);
        emu.poke8(0x8000, 0x99);

        uint16 addr = emu.addrImmediate();
        assertEq(addr, 0x8000);
        assertEq(emu.peek8(addr), 0x99);
    }

    function test_ZeroPageXWrap() public {
        emu.testSetPC(0x9000);
        emu.testSetX(0x0f);
        emu.poke8(0x9000, 0xf8); // base addr 0xf8
        uint16 addr = emu.addrZeroPageX();
        // expect wrap: 0xf8 + 0x0f = 0x07
        assertEq(addr, 0x0007);
    }

    function test_AbsoluteXPageCross() public {
        emu.testSetPC(0xA000);
        emu.testSetX(0x10);
        // write low byte 0xFF, high 0x20 → base 0x20FF, +0x10 -> 0x210F crossing
        emu.poke8(0xA000, 0xFF);
        emu.poke8(0xA001, 0x20);
        (uint16 addr, bool crossed) = emu.addrAbsoluteX();
        assertEq(addr, 0x210F);
        assertTrue(crossed);
    }

    function test_ZeroPageYWrap() public {
        emu.testSetPC(0xB000);
        emu.testSetY(0x0d);
        emu.poke8(0xB000, 0xF6); // base 0xF6
        uint16 addr = emu.addrZeroPageY();
        // 0xF6 + 0x0d = 0x03 with wrap
        assertEq(addr, 0x0003);
    }

    function test_RelativeForward() public {
        emu.testSetPC(0xB100);
        emu.poke8(0xB100, 0x05); // +5
        (uint16 target, bool crossed) = emu.addrRelative();
        assertEq(target, 0xB106); // PC after fetch 0xB101 +5 =0xB106
        assertFalse(crossed);
    }

    function test_RelativeBackwardNoPageCross() public {
        emu.testSetPC(0xB1F0);
        emu.poke8(0xB1F0, 0xF0); // -16 (0xF0 signed)
        (uint16 target, bool crossed) = emu.addrRelative();
        assertEq(target, 0xB1F1 - 0x10); // 0xB1F1 (after fetch) -16 = 0xB1E1
        assertFalse(crossed);
    }

    function test_RelativeBackwardPageCross() public {
        emu.testSetPC(0xC000);
        emu.poke8(0xC000, 0x80); // -128 (0x80 signed)
        (uint16 target, bool crossed) = emu.addrRelative();
        assertEq(target, 0xBF81); // 0xC001 - 128 = 0xBF81
        assertTrue(crossed);
    }

    function test_IndirectPageBug() public {
        // Pointer = 0x12FF (low FF, high 12)
        emu.testSetPC(0xD000);
        emu.poke8(0xD000, 0xFF); // low byte ptr
        emu.poke8(0xD001, 0x12); // high byte ptr
        // Write target low/high obeying wrap bug
        emu.poke8(0x12FF, 0x34); // low target byte
        emu.poke8(0x1200, 0x12); // high target byte (wrap within page)
        uint16 addr = emu.addrIndirect();
        assertEq(addr, 0x1234);
    }
}

================
File: test/BasicIntegration.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import {BasicRom} from "../src/BasicRom.sol";
import {Emulator6502} from "../src/Emulator6502.sol";

/// @title BasicIntegrationTest – runs the tiny ROM that prints '4'
contract BasicIntegrationTest is Test {
    Emulator6502 emu;
    BasicRom rom;

    function setUp() public {
        rom = new BasicRom();
        // BasicRom bytecode already contains the full 16 KiB EhBASIC image, so no
        // need to read from disk or use `vm.etch`.

        emu = new Emulator6502();

        // Load ROM at $A000 (native EhBASIC base)
        emu.loadRomFrom(address(rom), 0xA000);

        // Patch reset vector to $8000 (start of our stub)
        emu.poke8(0xFFFC, 0x00);
        emu.poke8(0xFFFD, 0x80);

        // Overwrite reset vector entry ($8000..) with stub:
        // LDA #$34 ; STA $F001 ; BRK
        emu.poke8(0x8000, 0xA9); // LDA immediate
        emu.poke8(0x8001, 0x34); // value '4'
        emu.poke8(0x8002, 0x8D); // STA abs
        emu.poke8(0x8003, 0x01);
        emu.poke8(0x8004, 0xF0); // $F001
        emu.poke8(0x8005, 0x00); // BRK – halts CPU

        emu.boot();
    }

    function testRomPrintsFour() public {
        vm.recordLogs();

        // Run enough steps: LDA (2) + STA (4) + BRK (7) cycles – use generous budget
        emu.run(50);

        Vm.Log[] memory logs = vm.getRecordedLogs();

        // Expect at least one CharOut event with ASCII '4'
        bool found;
        bytes32 topic0 = keccak256("CharOut(uint8)");
        for (uint i; i < logs.length; ++i) {
            if (logs[i].topics[0] == topic0) {
                uint8 val = abi.decode(logs[i].data, (uint8));
                if (val == 0x34) {
                    found = true;
                    break;
                }
            }
        }

        assertTrue(found, "CharOut '4' not emitted");
        assertTrue(emu.halted(), "CPU did not halt on BRK");
    }
}

================
File: .gitignore
================
# Compiler files
cache/
out/

# Ignores development broadcast logs
!/broadcast
/broadcast/*/31337/
/broadcast/**/dry-run/

# Docs
docs/

# Dotenv file
.env

# Repomix output file
repomix-output.txt

================
File: foundry.toml
================
[profile.default]
src = "src"
out = "out"
libs = ["lib"]

# See more config options https://github.com/foundry-rs/foundry/blob/master/crates/config/README.md#all-options

# Filesystem access rules
fs_permissions = [
  # allow tests to read the EhBASIC image and any other ROM assets
  { access = "read", path = "./rom" },
]

================
File: instructions/implementation.md
================
Below is a high‑level, yet concrete, implementation roadmap that takes you from a blank contract to an on‑chain 6502 capable of running BASIC programs.  
At each stage I call out (1) scope, (2) key assumptions, (3) deliverables, (4) recommended tests, and (5) branch / CI hygiene so the work fits cleanly with your house rules.

------------------------------------------------
PHASE 0 – Foundation & Project‑level Plumbing
------------------------------------------------
1. Create a new feature branch `feat/6502-core‑scaffolding`.
2. Add `forge‑std` test helpers and a basic Foundry project layout (`src/`, `test/`, `script/`).
3. Enforce linting (`solhint`, `slither‑json`) via `pre‑commit` or CI.  
4. Add a minimal `Emulator6502.sol` shell that merely stores registers and exposes a `step()` stub.
5. Write a smoke test `test/EmulatorInit.t.sol` that:
   • deploys the contract  
   • asserts all registers & flags power‑on values (per §5 of instructions).

------------------------------------------------
PHASE 1 – Core Data Structures
------------------------------------------------
Scope  
• Registers: A, X, Y, SP, PC, P (flags).  
• Memory array: fixed `bytes` of size 64 K.  
• Helpers to get/set flags.

Assumptions  
• Store memory in a `bytes` array inside the contract; later we may map it to storage pages for gas efficiency.  
• Contract can be initialised with a `bytes` ROM image.

Deliverables  
• `struct CPU` holding the 6 registers + cycle counter.  
• `mapping(uint16 => uint8) mem;` or `bytes memory mem` plus helpers `read8`, `write8`.

Tests  
• `test/RegisterAccess.t.sol` – unit tests for flag helpers (set/clear/toggle/serialize).  
• `test/Memory.t.sol` – reads & writes, zero‑page and stack page boundaries.

------------------------------------------------
PHASE 2 – Addressing‑mode Helpers
------------------------------------------------
Scope  
Implement 13 NMOS addressing modes (§3).

Deliverables  
• Pure/constant internal functions that, given `CPU` & `bytes mem`, compute the effective address plus flags about page‑cross penalties.

Tests  
• Table‑driven test `test/AddressingModes.t.sol` using vectors from real 6502 docs.  
• Cross‑check page‑cross cycle penalty flag.

------------------------------------------------
PHASE 3 – Opcode Table & Dispatcher
------------------------------------------------
Scope  
• A `struct OpInfo { function(CPU storage, bytes storage) internal returns (uint cycles) handler; uint8 bytes; uint8 baseCycles; bool pagePenalty; }`.  
• Populate a 256‑entry constant array at deployment.

Assumptions  
• Illegal opcodes revert for v1.

Deliverables  
• `executeNext()` that:  
  1. fetches opcode at `PC`,  
  2. looks up `OpInfo`,  
  3. calls handler,  
  4. updates cycle counter.

Tests  
• `test/OpcodeMatrix.t.sol` that loops all 256 entries and ensures non‑implemented opcodes revert with an `IllegalOpcode()` error.

------------------------------------------------
PHASE 4 – ALU & Flag Logic
------------------------------------------------
Scope  
ADC, SBC, AND, ORA, EOR, CMP, CPX, CPY, BIT + shifts/rotates.  
Decimal mode optional but recommended (see §6 caveats).

Deliverables  
• Internal pure functions `adc`, `sbc` etc. returning result + updated flags.  
• Unit opcode handlers that glue addressing‑mode helpers with ALU helpers.

Tests  
• Property‑based tests for ADC/SBC overflow & carry.  
• Exhaustive tables for BIT, CMP etc.  
• Decimal mode golden vectors from real hardware trace.

------------------------------------------------
PHASE 5 – Control‑flow & Stack Ops
------------------------------------------------
Scope  
JSR, RTS, BRK, RTI, all branches, PHA/PLA/PHP/PLP, TXS/TSX.

Assumptions  
• Stack page is `$0100–$01FF` with post‑decrement semantics (see §7).

Deliverables  
• Helpers `push8`, `push16`, `pop8`, `pop16` that manipulate `SP` and `mem`.  
• Complete implementation of control‑flow opcodes.

Tests  
• `test/StackOps.t.sol` – push/pop round‑trips, RTS returning to correct `PC+1`.  
• Branch tests that cover page‑cross penalties.

Sub‑phases (incremental PR plan)  
• 5.0 Stack byte helpers – implement `_push8`, `_pop8`; unit test push/pop round‑trip.  
• 5.1 16‑bit helpers – `_push16`, `_pop16`; test 16‑bit round‑trip.  
• 5.2 Accumulator stack ops – opcodes PHA (0x48), PLA (0x68) with flag updates and tests.  
• 5.3 Processor status ops – PHP (0x08), PLP (0x28). Ensure B and unused bits handling; tests.  
• 5.4 Stack‑pointer transfer – TXS (0x9A) and TSX (0xBA); tests for Z/N flags.  
• 5.5 Sub‑routine flow – JSR (0x20) and RTS (0x60); tests that verify return address.  
• 5.6 Relative branch helper – finalize `addrRelative` and `_branch` function.  
• 5.7 Branch opcodes – implement BPL, BMI, BVC, BVS, BCC, BCS, BEQ, BNE with tests for taken/untaken and page‑crossing.

Each sub‑phase should compile and pass its new tests before proceeding to the next.

------------------------------------------------
PHASE 6 – Interrupt Controller
------------------------------------------------
Scope  
RESET, IRQ, NMI logic; vector fetch; BRK behaviour with B flag.

Deliverables  
• `triggerIRQ()` and `triggerNMI()` external calls.  
• Internal `_serviceInterrupt(vectorAddr, setBFlag)`.

Tests  
• `test/Interrupts.t.sol` – simulate BRK, IRQ, NMI and assert pushed stack bytes & `PC` after handler jump.

------------------------------------------------
PHASE 7 – Cycle‑Counting & Timing Accuracy (optional v1)
------------------------------------------------
If you need cycle‑exact behaviour (for raster demos etc.), wire page‑cross flags and branch penalties into `CPU.cycles`.  
Test with known instruction traces.

------------------------------------------------
PHASE 8 – BASIC ROM Integration (updated)
------------------------------------------------
Scope
•  Treat the BASIC ROM as a separate immutable "cartridge" contract (`BasicRom.sol`), whose bytecode is the raw ROM image.
•  Extend the emulator with `loadRomFrom(address rom, uint16 baseAddr)` that uses `extcodecopy` to copy the cartridge bytes into RAM.
•  Map simple UART‑style IO: `$F000` CPU read = keyboard buffer, `$F001` CPU write = emits `CharOut(uint8)`.
•  Provide external `sendKeys(bytes ascii)` to queue keystrokes.
•  Add `boot()` and gas‑capped `run(uint64 maxSteps)` execution loop.

Sub‑phases
8.0  ROM contract + `loadRomFrom` helper & Foundry script to deploy + load.
8.1  Memory‑mapped IO overrides in `_read8` / `_write8` and `CharOut` event.
8.2  Keystroke ring‑buffer + `sendKeys` + `boot()` wiring.
8.3  `run()` instruction loop with BRK/step‑budget halt.
8.4  End‑to‑end test that loads TinyBASIC, types `PRINT 2+2` (newline) and asserts `CharOut` contains `"4"`.

Assumptions
•  TinyBASIC (~4–8 KiB) fits comfortably in contract bytecode and RAM.
•  Exact cycle accuracy not required; functional correctness only.
•  USART addresses chosen above may be tweaked to match ROM expectations.

Deliverables
•  `BasicRom.sol` (immutable library/contract).
•  Updated `Emulator6502.sol` with ROM loading & IO hooks.
•  Script `script/LoadRom.s.sol`.
•  Tests `test/BasicIntegration.t.sol`.

------------------------------------------------
PHASE 9 – High‑level BASIC Program Runner
------------------------------------------------
Scope  
• Convenience function `run(bytes program)` that:  
  – resets CPU,  
  – pastes BASIC program into RAM buffer,  
  – triggers `SYS` token (if ROM requires),  
  – executes until `BRK` or cycle budget reached.

Deliverables  
• Gas‑metered loop with safety break after N cycles to avoid DoS.  
• Event `ProgramHalted(uint cyclesUsed)`.

Tests  
• Multiple sample BASIC listings (loops, branching, string ops).  
• Gas profiling to ensure per‑instruction cost is bounded.

------------------------------------------------
Branch & CI Workflow (applies to every phase)
------------------------------------------------
1. Start a short‑lived feature branch per phase (`feat/6502‑phase‑N`).  
2. After lint + build + tests pass locally:  
   – `git add . && git commit -m "Phase N: …"`  
   – Open PR → get review (remember: ask reviewer to keep us focused).  
3. Merge **into the parent integration branch, never main**.  
4. Delete feature branch.

------------------------------------------------
Future Nice‑to‑Haves
------------------------------------------------
• CMOS 65C02 opcodes (§8).  
• Cycle‑exact bus timing (Appendix A) for peripheral emulation.  
• Verifier contract to replay traces off‑chain for cheaper on‑chain verification.

This roadmap should let us grow functionality incrementally, keep tests fast, and respect your branching/linting conventions.

================
File: test/Interrupts.t.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Emulator6502.sol";

contract InterruptsTest is Test {
    Emulator6502 emu;

    // Helper to decode CPU struct
    function _cpu() internal view returns (
        uint8 A,
        uint8 X,
        uint8 Y,
        uint8 SP,
        uint16 PC,
        uint8 P,
        uint64 cycles
    ) {
        return emu.cpu();
    }

    function setUp() public {
        emu = new Emulator6502();

        // Set reset vector to 0x8000 for convenience (little‑endian)
        emu.poke8(0xFFFC, 0x00);
        emu.poke8(0xFFFD, 0x80);
        // Manually place PC there for tests (constructor already fetched 0 earlier)
        emu.testSetPC(0x8000);
    }

    function testBRKAndRTIFlow() public {
        // IRQ/BRK vector -> 0x9000
        emu.poke8(0xFFFE, 0x00);
        emu.poke8(0xFFFF, 0x90);

        // Instruction bytes
        emu.poke8(0x8000, 0x00); // BRK
        emu.poke8(0x9000, 0x40); // RTI at ISR start

        // Step BRK
        emu.step();

        // After BRK, PC should be 0x9000, SP = 0xFA
        (, , , uint8 spAfterBRK, uint16 pcAfterBRK, uint8 pAfterBRK,) = _cpu();
        assertEq(pcAfterBRK, 0x9000, "PC not loaded from IRQ vector");
        assertEq(spAfterBRK, 0xFA, "SP decrement incorrect after BRK push");
        // Stack checks
        assertEq(emu.peek8(0x01FD), 0x80, "High byte incorrect");
        assertEq(emu.peek8(0x01FC), 0x02, "Low byte incorrect");
        assertEq(emu.peek8(0x01FB), 0x34, "Status byte incorrect");

        // Step RTI
        emu.step();
        (, , , uint8 spAfterRTI, uint16 pcAfterRTI, uint8 pAfterRTI,) = _cpu();
        assertEq(spAfterRTI, 0xFD, "SP not restored by RTI");
        assertEq(pcAfterRTI, 0x8002, "PC not restored by RTI");
        assertEq(pAfterRTI, 0x24, "Processor status restore incorrect");
    }

    function testIRQServicedWhenEnabled() public {
        // Clear I flag so IRQs are allowed
        emu.testSetFlag(2, false);
        // Set IRQ vector
        emu.poke8(0xFFFE, 0x00);
        emu.poke8(0xFFFF, 0x90);
        // Place RTI
        emu.poke8(0x9000, 0x40);
        // trigger
        emu.triggerIRQ();
        // Step once -> should service IRQ then execute RTI
        emu.step();
        (, , , uint8 spAfter, uint16 pcAfter,,) = _cpu();
        assertEq(pcAfter, 0x8000, "RTI should return to original PC");
        assertEq(spAfter, 0xFD, "Stack pointer should be restored");
    }

    function testNMIOverridesIRQ() public {
        // Clear I flag to allow IRQ, but NMI should still override even if set
        emu.testSetFlag(2, false);
        // Set vectors
        emu.poke8(0xFFFE, 0x00); emu.poke8(0xFFFF, 0x90); // IRQ -> 0x9000
        emu.poke8(0xFFFA, 0x00); emu.poke8(0xFFFB, 0x91); // NMI -> 0x9100
        emu.poke8(0x9000, 0x40); // RTI at 0x9000
        emu.poke8(0x9100, 0x40); // RTI at 0x9100

        emu.triggerIRQ();
        emu.triggerNMI();
        emu.step();
        (, , , uint8 spAfter, uint16 pcAfter,,) = _cpu();
        // After servicing NMI and executing RTI, PC should return to original 0x8000
        assertEq(pcAfter, 0x8000, "NMI RTI should return to original PC");
        assertEq(spAfter, 0xFD, "Stack pointer restore after NMI");
    }

    function testIRQMasksWhenIFlagSet() public {
        // Ensure I flag is set (default after reset), IRQ should be ignored
        // Set IRQ vector
        emu.poke8(0xFFFE, 0x00);
        emu.poke8(0xFFFF, 0x90);

        // Program at 0x8000: LDA #$01 (0xA9 0x01)
        emu.poke8(0x8000, 0xA9);
        emu.poke8(0x8001, 0x01);

        // Trigger IRQ while I flag set
        emu.triggerIRQ();

        // Step executes LDA, IRQ should not be serviced
        emu.step();

        (, , , uint8 spAfter, uint16 pcAfter,,) = _cpu();
        assertEq(pcAfter, 0x8002, "PC should advance normally when IRQ masked");
        assertEq(spAfter, 0xFD, "Stack pointer unchanged when IRQ masked");
    }
}

================
File: src/Emulator6502.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "./OpcodeTable.sol";

/// @title Emulator6502 – Minimal 6502 CPU skeleton
/// @notice Phase 0 shell that only initialises registers to power‑on state
/// @dev Further opcodes and memory will be added in later phases
contract Emulator6502 {
    /*//////////////////////////////////////////////////////////////////////////
                                   CPU MODEL
    //////////////////////////////////////////////////////////////////////////*/

    struct CPU {
        uint8 A; // Accumulator
        uint8 X; // Index register X
        uint8 Y; // Index register Y
        uint8 SP; // Stack pointer ($0100 page offset)
        uint16 PC; // Program counter
        uint8 P; // Processor status flags
        uint64 cycles; // Cycle counter (optional)
    }

    CPU public cpu;

    // Pending interrupt lines
    bool private irqPending;
    bool private nmiPending;
    bool public romLoaded;

    // Keyboard buffer
    bytes internal keyBuffer;
    uint256 internal keyPos;

    /*//////////////////////////////////////////////////////////////////////////
                                   FLAGS
    //////////////////////////////////////////////////////////////////////////*/

    uint8 private constant FLAG_NEGATIVE = 7;
    uint8 private constant FLAG_OVERFLOW = 6;
    uint8 private constant FLAG_UNUSED = 5; // Always 1 on pushes, 0 otherwise (not enforced yet)
    uint8 private constant FLAG_BREAK = 4;
    uint8 private constant FLAG_DECIMAL = 3;
    uint8 private constant FLAG_INTERRUPT = 2;
    uint8 private constant FLAG_ZERO = 1;
    uint8 private constant FLAG_CARRY = 0;

    /*//////////////////////////////////////////////////////////////////////////
                                   INTERRUPT VECTORS
    //////////////////////////////////////////////////////////////////////////*/

    uint16 private constant VECTOR_NMI = 0xFFFA;
    uint16 private constant VECTOR_RESET = 0xFFFC;
    uint16 private constant VECTOR_IRQ = 0xFFFE;

    // Memory‑mapped IO addresses
    uint16 private constant IO_KBD = 0xF000; // Keyboard input register (read)
    uint16 private constant IO_TTY = 0xF001; // Terminal output register (write)

    /*//////////////////////////////////////////////////////////////////////////
                                   EVENTS
    //////////////////////////////////////////////////////////////////////////*/

    event CharOut(uint8 ascii);
    /// @notice Emitted when `run()` halts because a BRK was executed or the step budget expired
    event ProgramHalted(uint64 stepsExecuted);
    /// @notice Emitted whenever the guest executes a JSR that targets the high‑RAM / I/O window ($F000–$FFFF).
    event TraceJSR(uint16 target);
    /// @notice Emits current PC each time an instruction in ROM page $A000–$AFFF is executed when tracing is enabled.
    event TracePC(uint16 pc);
    /// @notice Emitted right before revert when an opcode is not yet implemented.
    event UnknownOpcode(uint16 pc, uint8 opcode);

    // Indicates the CPU has encountered a BRK instruction and execution should stop
    bool public halted;
    bool public pcTraceEnabled;

    /*//////////////////////////////////////////////////////////////////////////
                                   CONSTRUCTOR
    //////////////////////////////////////////////////////////////////////////*/

    constructor() {
        _initMemory();
        _powerOnReset();
    }

    /*//////////////////////////////////////////////////////////////////////////
                                   PUBLIC API
    //////////////////////////////////////////////////////////////////////////*/

    /// @notice Executes one 6502 instruction and services pending IRQs
    function step() public {
        // Service IRQ if pending and interrupts are enabled
        _handleInterrupts();

        uint8 opcode = _fetch8();
        _legacyDispatch(opcode);

        lastOpcode = opcode;
    }

    /// @notice Assert the IRQ line (level sensitive). Will be handled on next step if I flag is clear.
    function triggerIRQ() external {
        irqPending = true;
    }

    /// @notice Trigger a Non‑Maskable Interrupt (edge‑trigger). Always serviced on next step regardless of I flag.
    function triggerNMI() external {
        nmiPending = true;
    }

    /// @notice Queue ASCII keystrokes for the ROM to consume.
    function sendKeys(bytes calldata ascii) external {
        require(ascii.length > 0, "empty");
        keyBuffer = bytes.concat(keyBuffer, ascii);
    }

    /*//////////////////////////////////////////////////////////////////////////
                                   BOOT & RUN LOOP
    //////////////////////////////////////////////////////////////////////////*/

    /// @notice Reset CPU state to the power‑on values and clear runtime flags/buffers.
    /// Should be called after the ROM has been loaded but before `run()`.
    function boot() external {
        _powerOnReset();
        keyPos = 0;
        halted = false;
    }

    /// @notice Execute up to `maxSteps` instructions or until a BRK halts execution.
    /// @dev This is a very naïve loop and will consume gas roughly proportional to
    ///      `maxSteps`.  Callers should supply a sensible upper bound to avoid
    ///      hitting the block gas limit.
    /// @param maxSteps Maximum number of instructions to execute in this call.
    function run(uint64 maxSteps) external {
        require(maxSteps > 0, "zero budget");
        uint64 executed;
        while (executed < maxSteps && !halted) {
            step();
            unchecked {
                executed += 1;
            }
        }

        // Emit a signal so tests/front‑ends can observe loop exit conditions
        emit ProgramHalted(executed);
    }

    /*//////////////////////////////////////////////////////////////////////////
                                   INTERNALS
    //////////////////////////////////////////////////////////////////////////*/

    /// @dev Set registers to the documented power‑on/reset state
    function _powerOnReset() internal {
        cpu.A = 0;
        cpu.X = 0;
        cpu.Y = 0;
        cpu.SP = 0xfd; // Stack pointer after reset (§5)
        cpu.P = uint8(1 << FLAG_INTERRUPT); // I flag set, others cleared

        // Fetch reset vector (little‑endian) from memory
        uint8 lo = _read8(VECTOR_RESET);
        uint8 hi = _read8(VECTOR_RESET + 1);
        cpu.PC = uint16(lo) | (uint16(hi) << 8);

        // Clear pending interrupts
        irqPending = false;
        nmiPending = false;

        cpu.cycles = 0;
    }

    // --- ADC helpers ---

    function _adc(uint8 value) internal {
        uint8 a = cpu.A;
        uint8 carryIn = _getFlag(FLAG_CARRY) ? 1 : 0;
        uint16 sum = uint16(a) + uint16(value) + uint16(carryIn);
        uint8 result = uint8(sum);

        // Carry flag
        _setFlag(FLAG_CARRY, sum > 0xFF);
        // Overflow flag: set if (~(A ^ V) & (A ^ R)) bit 7 set
        bool overflow = ((~(a ^ value) & (a ^ result)) & 0x80) != 0;
        _setFlag(FLAG_OVERFLOW, overflow);

        cpu.A = result;
        _updateZN(result);
    }

    function _opADCImmediate() internal {
        _adc(_fetch8());
    }

    function _opADCZeroPage() internal {
        uint8 addr = _fetch8();
        _adc(_read8(uint16(addr)));
    }

    function _opADCZeroPageX() internal {
        uint8 base = _fetch8();
        unchecked {
            base += cpu.X;
        }
        _adc(_read8(uint16(base)));
    }

    function _opADCAbsolute() internal {
        uint16 addr = _fetch16();
        _adc(_read8(addr));
    }

    function _opADCAbsoluteX() internal {
        uint16 base = _fetch16();
        uint16 addr = base + cpu.X;
        _adc(_read8(addr));
    }

    function _opADCAbsoluteY() internal {
        uint16 base = _fetch16();
        uint16 addr = base + cpu.Y;
        _adc(_read8(addr));
    }

    function _opADCIndexedIndirect() internal {
        uint8 ptr = _fetch8();
        unchecked { ptr += cpu.X; }
        uint8 lo = _read8(uint16(ptr));
        uint8 hi = _read8(uint16(_zpNext(ptr)));
        uint16 addr = uint16(lo) | (uint16(hi) << 8);
        _adc(_read8(addr));
    }

    function _opADCIndirectIndexed() internal {
        uint8 ptr = _fetch8();
        uint8 lo = _read8(uint16(ptr));
        uint8 hi = _read8(uint16(uint8(ptr + 1)));
        uint16 base = uint16(lo) | (uint16(hi) << 8);
        uint16 addr = base + cpu.Y;
        _adc(_read8(addr));
    }

    // --- SBC helpers (uses ADC with value ^ 0xFF) ---

    function _sbc(uint8 value) internal {
        _adc(value ^ 0xFF);
    }

    function _opSBCImmediate() internal {
        _sbc(_fetch8());
    }

    function _opSBCZeroPage() internal {
        uint8 addr = _fetch8();
        _sbc(_read8(uint16(addr)));
    }

    function _opSBCZeroPageX() internal {
        uint8 base = _fetch8();
        unchecked {
            base += cpu.X;
        }
        _sbc(_read8(uint16(base)));
    }

    function _opSBCAbsolute() internal {
        uint16 addr = _fetch16();
        _sbc(_read8(addr));
    }

    function _opSBCAbsoluteX() internal {
        uint16 base = _fetch16();
        uint16 addr = base + cpu.X;
        _sbc(_read8(addr));
    }

    function _opSBCAbsoluteY() internal {
        uint16 base = _fetch16();
        uint16 addr = base + cpu.Y;
        _sbc(_read8(addr));
    }

    function _opSBCIndexedIndirect() internal {
        uint8 ptr = _fetch8();
        unchecked { ptr += cpu.X; }
        uint8 lo = _read8(uint16(ptr));
        uint8 hi = _read8(uint16(_zpNext(ptr)));
        uint16 addr = uint16(lo) | (uint16(hi) << 8);
        _sbc(_read8(addr));
    }

    function _opSBCIndirectIndexed() internal {
        uint8 ptr = _fetch8();
        uint8 lo = _read8(uint16(ptr));
        uint8 hi = _read8(uint16(uint8(ptr + 1)));
        uint16 base = uint16(lo) | (uint16(hi) << 8);
        uint16 addr = base + cpu.Y;
        _sbc(_read8(addr));
    }

    // --- LDA helpers ---

    function _lda(uint8 value) internal {
        cpu.A = value;
        _updateZN(value);
    }

    function _opLDAImmediate() internal {
        _lda(_fetch8());
    }

    function _opLDAZeroPage() internal {
        uint8 addr = _fetch8();
        _lda(_read8(uint16(addr)));
    }

    function _opLDAZeroPageX() internal {
        uint8 base = _fetch8();
        unchecked {
            base += cpu.X;
        }
        _lda(_read8(uint16(base)));
    }

    function _opLDAAbsolute() internal {
        uint16 addr = _fetch16();
        _lda(_read8(addr));
    }

    function _opLDAAbsoluteX() internal {
        uint16 base = _fetch16();
        uint16 addr = base + cpu.X;
        _lda(_read8(addr));
    }

    function _opLDAAbsoluteY() internal {
        uint16 base = _fetch16();
        uint16 addr = base + cpu.Y;
        _lda(_read8(addr));
    }

    function _opLDAIndexedIndirect() internal {
        uint8 ptr = _fetch8();
        unchecked { ptr += cpu.X; }
        uint8 lo = _read8(uint16(ptr));
        uint8 hi = _read8(uint16(_zpNext(ptr)));
        uint16 addr = uint16(lo) | (uint16(hi) << 8);
        cpu.A = _read8(addr);
        _updateZN(cpu.A);
    }

    function _opLDAIndirectIndexed() internal {
        uint8 ptr = _fetch8();
        uint8 lo = _read8(uint16(ptr));
        uint8 hi = _read8(uint16(uint8(ptr + 1)));
        uint16 base = uint16(lo) | (uint16(hi) << 8);
        uint16 addr = base + cpu.Y;
        _lda(_read8(addr));
    }

    function _updateZN(uint8 value) internal {
        // Zero flag
        _setFlag(FLAG_ZERO, value == 0);
        // Negative flag mirrors bit 7
        _setFlag(FLAG_NEGATIVE, (value & 0x80) != 0);
    }

    /*//////////////////////////////////////////////////////////////////////////
                                   MEMORY
    //////////////////////////////////////////////////////////////////////////*/

    bytes internal RAM; // 64 KiB main memory

    /// @dev Allocate full 64 KiB RAM on deployment
    function _initMemory() internal {
        RAM = new bytes(65536);
    }

    /// @dev Read an 8‑bit value from RAM
    function _read8(uint16 addr) internal view returns (uint8) {
        if (addr == IO_KBD) {
            // read from keyboard register – handled in non‑view wrapper
            return 0;
        }
        return uint8(RAM[addr]);
    }

    /// @dev Write an 8‑bit value to RAM
    function _write8(uint16 addr, uint8 value) internal {
        // Terminal output – emit event
        if (addr == IO_TTY) {
            emit CharOut(value);
        }
        RAM[addr] = bytes1(value);
    }

    // Non‑view wrapper to allow mutating keyPos
    function _read8(uint16 addr, bool mutate) internal returns (uint8) {
        if (addr == IO_KBD) {
            uint8 val;
            if (keyPos < keyBuffer.length) {
                val = uint8(keyBuffer[keyPos]);
                keyPos += 1;
            } else {
                val = 0;
            }
            return val;
        }
        return uint8(RAM[addr]);
    }

    /*//////////////////////////////////////////////////////////////////////////
                                   FLAG HELPERS
    //////////////////////////////////////////////////////////////////////////*/

    function _getFlag(uint8 flag) internal view returns (bool) {
        return (cpu.P & uint8(1 << flag)) != 0;
    }

    function _setFlag(uint8 flag, bool value) internal {
        if (value) {
            cpu.P |= uint8(1 << flag);
        } else {
            cpu.P &= ~uint8(1 << flag);
        }
    }

    /*//////////////////////////////////////////////////////////////////////////
                            WRAPPERS (TESTING ONLY)
    //////////////////////////////////////////////////////////////////////////*/

    /// @notice Expose RAM peek for tests
    function peek8(uint16 addr) external view returns (uint8) {
        return _read8(addr);
    }

    /// @notice Expose RAM poke for tests
    function poke8(uint16 addr, uint8 value) external {
        _write8(addr, value);
    }

    /// @notice Expose flag helpers for tests
    function testSetFlag(uint8 flag, bool value) external {
        _setFlag(flag, value);
    }

    function testGetFlag(uint8 flag) external view returns (bool) {
        return _getFlag(flag);
    }

    // Direct register setters (testing only)
    function testSetPC(uint16 newPC) external {
        cpu.PC = newPC;
    }

    function testSetX(uint8 newX) external {
        cpu.X = newX;
    }

    function testSetY(uint8 newY) external {
        cpu.Y = newY;
    }

    function testSetA(uint8 newA) external {
        cpu.A = newA;
    }

    // Stack helper wrappers for tests
    function testPush8(uint8 val) external {
        _push8(val);
    }

    function testPop8() external returns (uint8) {
        return _pop8();
    }

    function testPush16(uint16 val) external {
        _push16(val);
    }

    function testPop16() external returns (uint16) {
        return _pop16();
    }

    function testSetSP(uint8 newSP) external {
        cpu.SP = newSP;
    }

    // Read IO for testing (mutates key buffer)
    function testReadIO(uint16 addr) external returns (uint8) {
        return _read8(addr, true);
    }

    /*//////////////////////////////////////////////////////////////////////////
                          FETCH & ADDRESSING HELPERS
    //////////////////////////////////////////////////////////////////////////*/

    /// @dev Fetch next byte at PC and increment PC
    function _fetch8() internal returns (uint8 val) {
        val = _read8(cpu.PC, false);
        unchecked {
            cpu.PC += 1;
        }
    }

    /// @dev Fetch next two bytes little‑endian and increment PC by 2
    function _fetch16() internal returns (uint16 val) {
        uint8 lo = _fetch8();
        uint8 hi = _fetch8();
        val = uint16(lo) | (uint16(hi) << 8);
    }

    /// @notice Immediate addressing – returns address of literal byte (current PC prior fetch)
    function addrImmediate() external returns (uint16 addr) {
        addr = cpu.PC;
        _fetch8();
    }

    /// @notice Zero‑page addressing
    function addrZeroPage() external returns (uint16 addr) {
        addr = uint16(_fetch8());
    }

    /// @notice Zero‑page,X addressing
    function addrZeroPageX() external returns (uint16 addr) {
        uint8 base = _fetch8();
        unchecked {
            base += cpu.X;
        }
        addr = uint16(base);
    }

    /// @notice Absolute addressing
    function addrAbsolute() external returns (uint16 addr) {
        addr = _fetch16();
    }

    /// @notice Absolute,X addressing – returns addr and whether page was crossed
    function addrAbsoluteX() external returns (uint16 addr, bool pageCrossed) {
        uint16 base = _fetch16();
        addr = base + cpu.X;
        pageCrossed = (base & 0xff00) != (addr & 0xff00);
    }

    /// @notice Absolute,Y addressing
    function addrAbsoluteY() external returns (uint16 addr, bool pageCrossed) {
        uint16 base = _fetch16();
        addr = base + cpu.Y;
        pageCrossed = (base & 0xff00) != (addr & 0xff00);
    }

    /// @notice Indexed Indirect (zp,X)
    function addrIndexedIndirect() external returns (uint16 addr) {
        uint8 ptr = _fetch8();
        uint8 lo = _read8(uint16(ptr));
        uint8 hi;
        unchecked {
            hi = _read8(uint16(uint8(ptr + 1)));
        }
        addr = uint16(lo) | (uint16(hi) << 8);
    }

    /// @notice Indirect Indexed (zp),Y
    function addrIndirectIndexed()
        external
        returns (uint16 addr, bool pageCrossed)
    {
        uint8 ptr = _fetch8();
        uint8 lo = _read8(uint16(ptr));
        uint8 hi = _read8(uint16(uint8(ptr + 1)));
        uint16 base = uint16(lo) | (uint16(hi) << 8);
        addr = base + cpu.Y;
        pageCrossed = (base & 0xff00) != (addr & 0xff00);
    }

    /// @notice Zero‑page,Y addressing
    function addrZeroPageY() external returns (uint16 addr) {
        uint8 base = _fetch8();
        unchecked {
            base += cpu.Y;
        }
        addr = uint16(base);
    }

    /// @notice Relative addressing – returns branch target and pageCross flag
    function addrRelative() external returns (uint16 target, bool pageCrossed) {
        int8 offset = int8(uint8(_fetch8()));
        uint16 pc = cpu.PC;
        int32 calc = int32(uint32(pc)) + int32(offset);
        target = uint16(uint32(calc) & 0xFFFF);
        pageCrossed = (pc & 0xFF00) != (target & 0xFF00);
    }

    /// @notice Absolute Indirect addressing (JMP ($addr)) with 6502 page bug
    function addrIndirect() external returns (uint16 addr) {
        uint16 ptr = _fetch16();
        uint16 loAddr = ptr;
        uint16 hiAddr = (ptr & 0xFF00) | uint16(uint8(ptr + 1));
        uint8 lo = _read8(loAddr);
        uint8 hi = _read8(hiAddr);
        addr = uint16(lo) | (uint16(hi) << 8);
    }

    // --- AND helpers ---

    function _and(uint8 value) internal {
        uint8 res = cpu.A & value;
        cpu.A = res;
        _updateZN(res);
    }

    function _opANDImmediate() internal {
        _and(_fetch8());
    }
    function _opANDZeroPage() internal {
        _and(_read8(uint16(_fetch8()), false));
    }
    function _opANDZeroPageX() internal {
        uint8 b = _fetch8();
        unchecked {
            b += cpu.X;
        }
        _and(_read8(uint16(b), false));
    }
    function _opANDAbsolute() internal {
        _and(_read8(_fetch16(), false));
    }
    function _opANDAbsoluteX() internal {
        uint16 base = _fetch16();
        _and(_read8(base + cpu.X, false));
    }
    function _opANDAbsoluteY() internal {
        uint16 base = _fetch16();
        _and(_read8(base + cpu.Y, false));
    }
    function _opANDIndexedIndirect() internal {
        uint8 p = _fetch8();
        unchecked {
            p += cpu.X;
        }
        uint16 addr = uint16(_read8(uint16(p), false)) |
            (uint16(_read8(uint16(_zpNext(p)), false)) << 8);
        _and(_read8(addr, false));
    }
    function _opANDIndirectIndexed() internal {
        uint8 p = _fetch8();
        uint16 base = uint16(_read8(uint16(p), false)) |
            (uint16(_read8(uint16(uint8(p + 1)), false)) << 8);
        _and(_read8(base + cpu.Y, false));
    }

    // --- ORA helpers ---
    function _ora(uint8 value) internal {
        uint8 res = cpu.A | value;
        cpu.A = res;
        _updateZN(res);
    }
    function _opORAImmediate() internal {
        _ora(_fetch8());
    }
    function _opORAZeroPage() internal {
        _ora(_read8(uint16(_fetch8()), false));
    }
    function _opORAZeroPageX() internal {
        uint8 b = _fetch8();
        unchecked {
            b += cpu.X;
        }
        _ora(_read8(uint16(b), false));
    }
    function _opORAAbsolute() internal {
        _ora(_read8(_fetch16(), false));
    }
    function _opORAAbsoluteX() internal {
        uint16 base = _fetch16();
        _ora(_read8(base + cpu.X, false));
    }
    function _opORAAbsoluteY() internal {
        uint16 base = _fetch16();
        _ora(_read8(base + cpu.Y, false));
    }
    function _opORAIndexedIndirect() internal {
        uint8 p = _fetch8();
        unchecked {
            p += cpu.X;
        }
        uint16 a = uint16(_read8(uint16(p), false)) |
            (uint16(_read8(uint16(_zpNext(p)), false)) << 8);
        _ora(_read8(a, false));
    }
    function _opORAIndirectIndexed() internal {
        uint8 p = _fetch8();
        uint16 base = uint16(_read8(uint16(p), false)) |
            (uint16(_read8(uint16(uint8(p + 1)), false)) << 8);
        _ora(_read8(base + cpu.Y, false));
    }

    // --- EOR helpers ---
    function _eor(uint8 value) internal {
        uint8 res = cpu.A ^ value;
        cpu.A = res;
        _updateZN(res);
    }
    function _opEORImmediate() internal {
        _eor(_fetch8());
    }
    function _opEORZeroPage() internal {
        _eor(_read8(uint16(_fetch8()), false));
    }
    function _opEORZeroPageX() internal {
        uint8 b = _fetch8();
        unchecked {
            b += cpu.X;
        }
        _eor(_read8(uint16(b), false));
    }
    function _opEORAbsolute() internal {
        _eor(_read8(_fetch16(), false));
    }
    function _opEORAbsoluteX() internal {
        uint16 base = _fetch16();
        _eor(_read8(base + cpu.X, false));
    }
    function _opEORAbsoluteY() internal {
        uint16 base = _fetch16();
        _eor(_read8(base + cpu.Y, false));
    }
    function _opEORIndexedIndirect() internal {
        uint8 p = _fetch8();
        unchecked {
            p += cpu.X;
        }
        uint16 a = uint16(_read8(uint16(p), false)) |
            (uint16(_read8(uint16(_zpNext(p)), false)) << 8);
        _eor(_read8(a, false));
    }
    function _opEORIndirectIndexed() internal {
        uint8 p = _fetch8();
        uint16 base = uint16(_read8(uint16(p), false)) |
            (uint16(_read8(uint16(uint8(p + 1)), false)) << 8);
        _eor(_read8(base + cpu.Y, false));
    }

    // --- BIT helper --- (affects Z = A & val ==0, N,V from val bits 7/6)
    function _bit(uint8 val) internal {
        _setFlag(FLAG_ZERO, (cpu.A & val) == 0);
        _setFlag(FLAG_NEGATIVE, (val & 0x80) != 0);
        _setFlag(FLAG_OVERFLOW, (val & 0x40) != 0);
    }
    function _opBITZeroPage() internal {
        _bit(_read8(uint16(_fetch8()), false));
    }
    function _opBITAbsolute() internal {
        _bit(_read8(_fetch16(), false));
    }

    // --- Compare helpers ---
    function _cmp(uint8 reg, uint8 value) internal {
        uint8 diff;
        unchecked {
            diff = reg - value;
        }
        _setFlag(FLAG_CARRY, reg >= value);
        _updateZN(diff);
    }

    // CMP (with A)
    function _opCMPImmediate() internal {
        _cmp(cpu.A, _fetch8());
    }
    function _opCMPZeroPage() internal {
        _cmp(cpu.A, _read8(uint16(_fetch8()), false));
    }
    function _opCMPZeroPageX() internal {
        uint8 b = _fetch8();
        unchecked {
            b += cpu.X;
        }
        _cmp(cpu.A, _read8(uint16(b), false));
    }
    function _opCMPAbsolute() internal {
        _cmp(cpu.A, _read8(_fetch16(), false));
    }
    function _opCMPAbsoluteX() internal {
        uint16 base = _fetch16();
        _cmp(cpu.A, _read8(base + cpu.X, false));
    }
    function _opCMPAbsoluteY() internal {
        uint16 base = _fetch16();
        _cmp(cpu.A, _read8(base + cpu.Y, false));
    }
    function _opCMPIndexedIndirect() internal {
        uint8 p = _fetch8();
        unchecked {
            p += cpu.X;
        }
        uint16 a = uint16(_read8(uint16(p), false)) |
            (uint16(_read8(uint16(_zpNext(p)), false)) << 8);
        _cmp(cpu.A, _read8(a, false));
    }
    function _opCMPIndirectIndexed() internal {
        uint8 p = _fetch8();
        uint16 base = uint16(_read8(uint16(p), false)) |
            (uint16(_read8(uint16(uint8(p + 1)), false)) << 8);
        _cmp(cpu.A, _read8(base + cpu.Y, false));
    }

    // CPX
    function _opCPXImmediate() internal {
        _cmp(cpu.X, _fetch8());
    }
    function _opCPXZeroPage() internal {
        _cmp(cpu.X, _read8(uint16(_fetch8()), false));
    }
    function _opCPXAbsolute() internal {
        _cmp(cpu.X, _read8(_fetch16(), false));
    }

    // CPY
    function _opCPYImmediate() internal {
        _cmp(cpu.Y, _fetch8());
    }
    function _opCPYZeroPage() internal {
        _cmp(cpu.Y, _read8(uint16(_fetch8()), false));
    }
    function _opCPYAbsolute() internal {
        _cmp(cpu.Y, _read8(_fetch16(), false));
    }

    // --- Shift / Rotate helpers ---
    function _asl(uint8 value) internal returns (uint8 res) {
        _setFlag(FLAG_CARRY, (value & 0x80) != 0);
        res = value << 1;
        _updateZN(res);
    }

    function _lsr(uint8 value) internal returns (uint8 res) {
        _setFlag(FLAG_CARRY, (value & 0x01) != 0);
        res = value >> 1;
        _updateZN(res);
    }

    function _rol(uint8 value) internal returns (uint8 res) {
        uint8 carryIn = _getFlag(FLAG_CARRY) ? 1 : 0;
        _setFlag(FLAG_CARRY, (value & 0x80) != 0);
        res = (value << 1) | carryIn;
        _updateZN(res);
    }

    function _ror(uint8 value) internal returns (uint8 res) {
        uint8 carryIn = _getFlag(FLAG_CARRY) ? 0x80 : 0;
        _setFlag(FLAG_CARRY, (value & 0x01) != 0);
        res = (value >> 1) | carryIn;
        _updateZN(res);
    }

    // ASL
    function _opASLAccumulator() internal {
        cpu.A = _asl(cpu.A);
    }
    function _opASLZeroPage() internal {
        uint16 addr = uint16(_fetch8());
        uint8 v = _read8(addr, false);
        uint8 r = _asl(v);
        _write8(addr, r);
    }
    function _opASLZeroPageX() internal {
        uint8 b = _fetch8();
        unchecked {
            b += cpu.X;
        }
        uint16 addr = uint16(b);
        uint8 v = _read8(addr, false);
        uint8 r = _asl(v);
        _write8(addr, r);
    }
    function _opASLAbsolute() internal {
        uint16 addr = _fetch16();
        uint8 v = _read8(addr, false);
        uint8 r = _asl(v);
        _write8(addr, r);
    }
    function _opASLAbsoluteX() internal {
        uint16 base = _fetch16();
        uint16 addr = base + cpu.X;
        uint8 v = _read8(addr, false);
        uint8 r = _asl(v);
        _write8(addr, r);
    }

    // LSR
    function _opLSRAccumulator() internal {
        cpu.A = _lsr(cpu.A);
    }
    function _opLSRZeroPage() internal {
        uint16 addr = uint16(_fetch8());
        uint8 v = _read8(addr, false);
        uint8 r = _lsr(v);
        _write8(addr, r);
    }
    function _opLSRZeroPageX() internal {
        uint8 b = _fetch8();
        unchecked {
            b += cpu.X;
        }
        uint16 addr = uint16(b);
        uint8 v = _read8(addr, false);
        uint8 r = _lsr(v);
        _write8(addr, r);
    }
    function _opLSRAbsolute() internal {
        uint16 addr = _fetch16();
        uint8 v = _read8(addr, false);
        uint8 r = _lsr(v);
        _write8(addr, r);
    }
    function _opLSRAbsoluteX() internal {
        uint16 base = _fetch16();
        uint16 addr = base + cpu.X;
        uint8 v = _read8(addr, false);
        uint8 r = _lsr(v);
        _write8(addr, r);
    }

    // ROL
    function _opROLAccumulator() internal {
        cpu.A = _rol(cpu.A);
    }
    function _opROLZeroPage() internal {
        uint16 addr = uint16(_fetch8());
        uint8 v = _read8(addr, false);
        uint8 r = _rol(v);
        _write8(addr, r);
    }
    function _opROLZeroPageX() internal {
        uint8 b = _fetch8();
        unchecked {
            b += cpu.X;
        }
        uint16 addr = uint16(b);
        uint8 v = _read8(addr, false);
        uint8 r = _rol(v);
        _write8(addr, r);
    }
    function _opROLAbsolute() internal {
        uint16 addr = _fetch16();
        uint8 v = _read8(addr, false);
        uint8 r = _rol(v);
        _write8(addr, r);
    }
    function _opROLAbsoluteX() internal {
        uint16 base = _fetch16();
        uint16 addr = base + cpu.X;
        uint8 v = _read8(addr, false);
        uint8 r = _rol(v);
        _write8(addr, r);
    }

    // ROR
    function _opRORAccumulator() internal {
        cpu.A = _ror(cpu.A);
    }
    function _opRORZeroPage() internal {
        uint16 addr = uint16(_fetch8());
        uint8 v = _read8(addr, false);
        uint8 r = _ror(v);
        _write8(addr, r);
    }
    function _opRORZeroPageX() internal {
        uint8 b = _fetch8();
        unchecked {
            b += cpu.X;
        }
        uint16 addr = uint16(b);
        uint8 v = _read8(addr, false);
        uint8 r = _ror(v);
        _write8(addr, r);
    }
    function _opRORAbsolute() internal {
        uint16 addr = _fetch16();
        uint8 v = _read8(addr, false);
        uint8 r = _ror(v);
        _write8(addr, r);
    }
    function _opRORAbsoluteX() internal {
        uint16 base = _fetch16();
        uint16 addr = base + cpu.X;
        uint8 v = _read8(addr, false);
        uint8 r = _ror(v);
        _write8(addr, r);
    }

    /// @dev Legacy if/else opcode dispatcher – will be removed once table is complete
    function _legacyDispatch(uint8 opcode) internal {
        if (pcTraceEnabled) {
            uint16 pc = cpu.PC;
            if (pc >= 0xA000) {
                _recordPC(pc);
                emit TracePC(pc);
            }
        }
        if (opcode == 0xA9) {
            _opLDAImmediate();
        } else if (opcode == 0xA5) {
            _opLDAZeroPage();
        } else if (opcode == 0xB5) {
            _opLDAZeroPageX();
        } else if (opcode == 0xAD) {
            _opLDAAbsolute();
        } else if (opcode == 0xBD) {
            _opLDAAbsoluteX();
        } else if (opcode == 0xB9) {
            _opLDAAbsoluteY();
        } else if (opcode == 0xA1) {
            _opLDAIndexedIndirect();
        } else if (opcode == 0xB1) {
            _opLDAIndirectIndexed();
        } else if (opcode == 0x69) {
            _opADCImmediate();
        } else if (opcode == 0x65) {
            _opADCZeroPage();
        } else if (opcode == 0x75) {
            _opADCZeroPageX();
        } else if (opcode == 0x6D) {
            _opADCAbsolute();
        } else if (opcode == 0x7D) {
            _opADCAbsoluteX();
        } else if (opcode == 0x79) {
            _opADCAbsoluteY();
        } else if (opcode == 0x61) {
            _opADCIndexedIndirect();
        } else if (opcode == 0x71) {
            _opADCIndirectIndexed();
        } else if (opcode == 0xE9) {
            _opSBCImmediate();
        } else if (opcode == 0xE5) {
            _opSBCZeroPage();
        } else if (opcode == 0xF5) {
            _opSBCZeroPageX();
        } else if (opcode == 0xED) {
            _opSBCAbsolute();
        } else if (opcode == 0xFD) {
            _opSBCAbsoluteX();
        } else if (opcode == 0xF9) {
            _opSBCAbsoluteY();
        } else if (opcode == 0xE1) {
            _opSBCIndexedIndirect();
        } else if (opcode == 0xF1) {
            _opSBCIndirectIndexed();
        } else if (opcode == 0x29) {
            _opANDImmediate();
        } else if (opcode == 0x25) {
            _opANDZeroPage();
        } else if (opcode == 0x35) {
            _opANDZeroPageX();
        } else if (opcode == 0x2D) {
            _opANDAbsolute();
        } else if (opcode == 0x3D) {
            _opANDAbsoluteX();
        } else if (opcode == 0x39) {
            _opANDAbsoluteY();
        } else if (opcode == 0x21) {
            _opANDIndexedIndirect();
        } else if (opcode == 0x31) {
            _opANDIndirectIndexed();
        } else if (opcode == 0x09) {
            _opORAImmediate();
        } else if (opcode == 0x05) {
            _opORAZeroPage();
        } else if (opcode == 0x15) {
            _opORAZeroPageX();
        } else if (opcode == 0x0D) {
            _opORAAbsolute();
        } else if (opcode == 0x1D) {
            _opORAAbsoluteX();
        } else if (opcode == 0x19) {
            _opORAAbsoluteY();
        } else if (opcode == 0x01) {
            _opORAIndexedIndirect();
        } else if (opcode == 0x11) {
            _opORAIndirectIndexed();
        } else if (opcode == 0x49) {
            _opEORImmediate();
        } else if (opcode == 0x45) {
            _opEORZeroPage();
        } else if (opcode == 0x55) {
            _opEORZeroPageX();
        } else if (opcode == 0x4D) {
            _opEORAbsolute();
        } else if (opcode == 0x5D) {
            _opEORAbsoluteX();
        } else if (opcode == 0x59) {
            _opEORAbsoluteY();
        } else if (opcode == 0x41) {
            _opEORIndexedIndirect();
        } else if (opcode == 0x51) {
            _opEORIndirectIndexed();
        } else if (opcode == 0x24) {
            _opBITZeroPage();
        } else if (opcode == 0x2C) {
            _opBITAbsolute();
        } else if (opcode == 0x08) {
            _opPHP();
        } else if (opcode == 0x28) {
            _opPLP();
        } else if (opcode == 0x48) {
            _opPHA();
        } else if (opcode == 0x68) {
            _opPLA();
        } else if (opcode == 0x9A) {
            _opTXS();
        } else if (opcode == 0xBA) {
            _opTSX();
        } else if (opcode == 0xC9) {
            _opCMPImmediate();
        } else if (opcode == 0xC5) {
            _opCMPZeroPage();
        } else if (opcode == 0xD5) {
            _opCMPZeroPageX();
        } else if (opcode == 0xCD) {
            _opCMPAbsolute();
        } else if (opcode == 0xDD) {
            _opCMPAbsoluteX();
        } else if (opcode == 0xD9) {
            _opCMPAbsoluteY();
        } else if (opcode == 0xC1) {
            _opCMPIndexedIndirect();
        } else if (opcode == 0xD1) {
            _opCMPIndirectIndexed();
        } else if (opcode == 0xE0) {
            _opCPXImmediate();
        } else if (opcode == 0xE4) {
            _opCPXZeroPage();
        } else if (opcode == 0xEC) {
            _opCPXAbsolute();
        } else if (opcode == 0xC0) {
            _opCPYImmediate();
        } else if (opcode == 0xC4) {
            _opCPYZeroPage();
        } else if (opcode == 0xCC) {
            _opCPYAbsolute();
        } else if (opcode == 0xA0) {
            _opLDYImmediate();
        } else if (opcode == 0xA4) {
            _opLDYZeroPage();
        } else if (opcode == 0xB4) {
            _opLDYZeroPageX();
        } else if (opcode == 0xAC) {
            _opLDYAbsolute();
        } else if (opcode == 0xBC) {
            _opLDYAbsoluteX();
        } else if (opcode == 0xA2) {
            _opLDXImmediate();
        } else if (opcode == 0xA6) {
            _opLDXZeroPage();
        } else if (opcode == 0xB6) {
            _opLDXZeroPageY();
        } else if (opcode == 0xAE) {
            _opLDXAbsolute();
        } else if (opcode == 0xBE) {
            _opLDXAbsoluteY();
        } else if (opcode == 0xE8) {
            _opINX();
        } else if (opcode == 0xC8) {
            _opINY();
        } else if (opcode == 0xCA) {
            _opDEX();
        } else if (opcode == 0x88) {
            _opDEY();
        } else if (opcode == 0x18) {
            _opCLC();
        } else if (opcode == 0x38) {
            _opSEC();
        } else if (opcode == 0x58) {
            _opCLI();
        } else if (opcode == 0x78) {
            _opSEI();
        } else if (opcode == 0x06) {
            _opASLZeroPage();
        } else if (opcode == 0x16) {
            _opASLZeroPageX();
        } else if (opcode == 0x0E) {
            _opASLAbsolute();
        } else if (opcode == 0x1E) {
            _opASLAbsoluteX();
        } else if (opcode == 0x0A) {
            _opASLAccumulator();
        } else if (opcode == 0x46) {
            _opLSRZeroPage();
        } else if (opcode == 0x56) {
            _opLSRZeroPageX();
        } else if (opcode == 0x4E) {
            _opLSRAbsolute();
        } else if (opcode == 0x5E) {
            _opLSRAbsoluteX();
        } else if (opcode == 0x4A) {
            _opLSRAccumulator();
        } else if (opcode == 0x26) {
            _opROLZeroPage();
        } else if (opcode == 0x36) {
            _opROLZeroPageX();
        } else if (opcode == 0x2E) {
            _opROLAbsolute();
        } else if (opcode == 0x3E) {
            _opROLAbsoluteX();
        } else if (opcode == 0x2A) {
            _opROLAccumulator();
        } else if (opcode == 0x66) {
            _opRORZeroPage();
        } else if (opcode == 0x76) {
            _opRORZeroPageX();
        } else if (opcode == 0x6E) {
            _opRORAbsolute();
        } else if (opcode == 0x7E) {
            _opRORAbsoluteX();
        } else if (opcode == 0x6A) {
            _opRORAccumulator();
        } else if (opcode == 0x20) {
            _opJSR();
        } else if (opcode == 0x60) {
            _opRTS();
        } else if (opcode == 0x90) {
            _opBCC();
        } else if (opcode == 0xB0) {
            _opBCS();
        } else if (opcode == 0xF0) {
            _opBEQ();
        } else if (opcode == 0x30) {
            _opBMI();
        } else if (opcode == 0xD0) {
            _opBNE();
        } else if (opcode == 0x10) {
            _opBPL();
        } else if (opcode == 0x50) {
            _opBVC();
        } else if (opcode == 0x70) {
            _opBVS();
        } else if (opcode == 0x00) {
            _opBRK();
        } else if (opcode == 0x40) {
            _opRTI();
        } else if (opcode == 0x85) {
            _opSTAZeroPage();
        } else if (opcode == 0x95) {
            _opSTAZeroPageX();
        } else if (opcode == 0x8D) {
            _opSTAAbsolute();
        } else if (opcode == 0x9D) {
            _opSTAAbsoluteX();
        } else if (opcode == 0x99) {
            _opSTAAbsoluteY();
        } else if (opcode == 0x81) {
            _opSTAIndexedIndirect();
        } else if (opcode == 0x91) {
            _opSTAIndirectIndexed();
        } else if (opcode == 0x86) {
            _opSTXZeroPage();
        } else if (opcode == 0x96) {
            _opSTXZeroPageY();
        } else if (opcode == 0x8E) {
            _opSTXAbsolute();
        } else if (opcode == 0x84) {
            _opSTYZeroPage();
        } else if (opcode == 0x94) {
            _opSTYZeroPageX();
        } else if (opcode == 0x8C) {
            _opSTYAbsolute();
        } else if (opcode == 0x4C) {
            _opJMPAbsolute();
        } else if (opcode == 0x6C) {
            _opJMPIndirect();
        }
        // JMP (indirect)
        else if (opcode == 0xEA) {
            _opNOP();
        }
        // NOP
        /* INC */
        else if (opcode == 0xE6) {
            _opINCZeroPage();
        } else if (opcode == 0xF6) {
            _opINCZeroPageX();
        } else if (opcode == 0xEE) {
            _opINCAbsolute();
        } else if (opcode == 0xFE) {
            _opINCAbsoluteX();
        }
        /* DEC */
        else if (opcode == 0xC6) {
            _opDECZeroPage();
        } else if (opcode == 0xD6) {
            _opDECZeroPageX();
        } else if (opcode == 0xCE) {
            _opDECAbsolute();
        } else if (opcode == 0xDE) {
            _opDECAbsoluteX();
        }
        /* Register transfers */
        else if (opcode == 0xAA) {
            _opTAX();
        } else if (opcode == 0xA8) {
            _opTAY();
        } else if (opcode == 0x8A) {
            _opTXA();
        } else if (opcode == 0x98) {
            _opTYA();
        }
        /* Flag operations */
        else if (opcode == 0xB8) {
            _opCLV();
        } else if (opcode == 0xD8) {
            _opCLD();
        } else if (opcode == 0xF8) {
            _opSED();
        } else {
            emit UnknownOpcode(cpu.PC - 1, opcode);
            revert("OpcodeNotImplemented");
        }
    }

    /*//////////////////////////////////////////////////////////////////////////
                                  STACK OPS
    //////////////////////////////////////////////////////////////////////////*/

    function _push8(uint8 value) internal {
        _write8(0x0100 | uint16(cpu.SP), value);
        unchecked {
            cpu.SP -= 1;
        }
    }

    function _pop8() internal returns (uint8 value) {
        unchecked {
            cpu.SP += 1;
        }
        value = _read8(0x0100 | uint16(cpu.SP));
    }

    function _push16(uint16 value) internal {
        _push8(uint8(value >> 8));
        _push8(uint8(value));
    }

    function _pop16() internal returns (uint16 value) {
        uint8 lo = _pop8();
        uint8 hi = _pop8();
        value = uint16(lo) | (uint16(hi) << 8);
    }

    // --- Stack related opcodes ---
    function _opPHA() internal {
        _push8(cpu.A);
    }
    function _opPLA() internal {
        cpu.A = _pop8();
        _updateZN(cpu.A);
    }
    function _opPHP() internal {
        _push8(cpu.P | 0x10);
    } // B flag set when pushed
    function _opPLP() internal {
        cpu.P = (_pop8() & 0xEF) | 0x20;
    }
    function _opTXS() internal {
        cpu.SP = cpu.X;
    }
    function _opTSX() internal {
        cpu.X = cpu.SP;
        _updateZN(cpu.X);
    }

    // --- Branch helper ---
    function _branch(bool condition) internal {
        int8 offset = int8(uint8(_fetch8()));
        uint16 pc = cpu.PC;
        uint16 target = uint16(
            uint32(int32(uint32(pc)) + int32(offset)) & 0xFFFF
        );
        if (condition) {
            cpu.PC = target;
        }
    }

    // Branch opcodes
    function _opBCC() internal {
        _branch(!_getFlag(FLAG_CARRY));
    }
    function _opBCS() internal {
        _branch(_getFlag(FLAG_CARRY));
    }
    function _opBEQ() internal {
        _branch(_getFlag(FLAG_ZERO));
    }
    function _opBMI() internal {
        _branch(_getFlag(FLAG_NEGATIVE));
    }
    function _opBNE() internal {
        _branch(!_getFlag(FLAG_ZERO));
    }
    function _opBPL() internal {
        _branch(!_getFlag(FLAG_NEGATIVE));
    }
    function _opBVC() internal {
        _branch(!_getFlag(FLAG_OVERFLOW));
    }
    function _opBVS() internal {
        _branch(_getFlag(FLAG_OVERFLOW));
    }

    // JSR / RTS
    function _opJSR() internal {
        uint16 addr = _fetch16();
        // push (PC-1) high then low (PC already points to next after operand)
        uint16 returnAddr = cpu.PC - 1;
        _push16(returnAddr);
        cpu.PC = addr;

        // Log JSRs into the high-RAM / I/O region so tests can observe BASIC's output path
        if (addr >= 0xF000) {
            emit TraceJSR(addr);
        }
    }

    function _opRTS() internal {
        uint16 addr = _pop16();
        cpu.PC = addr + 1;
    }

    /*//////////////////////////////////////////////////////////////////////////
                                  INTERRUPT HELPER
    //////////////////////////////////////////////////////////////////////////*/

    function _serviceInterrupt(uint16 vectorAddr, bool setBreakFlag) internal {
        // Push current PC onto the stack (high byte first, then low byte)
        uint16 pc = cpu.PC;
        _push8(uint8(pc >> 8));
        _push8(uint8(pc & 0xFF));

        // Prepare processor status byte to push
        uint8 status = cpu.P;
        // Bit 5 is always set when pushed to the stack
        status |= uint8(1 << FLAG_UNUSED);

        // Set or clear the Break flag (bit 4) according to the interrupt source
        if (setBreakFlag) {
            status |= uint8(1 << FLAG_BREAK);
        } else {
            status &= ~uint8(1 << FLAG_BREAK);
        }

        _push8(status);

        // Set Interrupt Disable flag to prevent nested IRQs
        _setFlag(FLAG_INTERRUPT, true);

        // Load new PC from the interrupt vector
        uint8 lo = _read8(vectorAddr);
        uint8 hi = _read8(vectorAddr + 1);
        cpu.PC = uint16(lo) | (uint16(hi) << 8);
    }

    // --- Interrupt opcodes ---
    function _opBRK() internal {
        // BRK is a 2‑byte instruction; consume the padding byte
        _fetch8();
        // Service interrupt using the IRQ/BRK vector with Break flag set.
        // Unlike earlier version we no longer halt the CPU here – many
        // 6502 programs (including EhBASIC) repurpose BRK as a software
        // interrupt.  Execution continues from the handler pointed to by
        // the IRQ/BRK vector at `$FFFE/$FFFF`.
        _serviceInterrupt(VECTOR_IRQ, true);
    }

    // --- Interrupt return opcode ---
    function _opRTI() internal {
        // Pull status byte and restore, ensuring unused bit 5 stays set and B cleared
        uint8 status = _pop8();
        cpu.P = (status & 0xEF) | 0x20;

        // Pull PC low then high bytes
        uint8 lo = _pop8();
        uint8 hi = _pop8();
        cpu.PC = uint16(lo) | (uint16(hi) << 8);
    }

    /// @dev Check and service IRQ if appropriate
    function _handleInterrupts() internal {
        // NMI has higher priority and is not maskable
        if (nmiPending) {
            nmiPending = false;
            _serviceInterrupt(VECTOR_NMI, false);
        } else if (irqPending && !_getFlag(FLAG_INTERRUPT)) {
            irqPending = false; // clear pending
            _serviceInterrupt(VECTOR_IRQ, false);
        }
    }

    /*//////////////////////////////////////////////////////////////////////////
                                 ROM LOADING
    //////////////////////////////////////////////////////////////////////////*/

    /// @notice Copy the bytecode of a "cartridge" contract into RAM at `baseAddr`.
    /// Can only be called once to prevent accidental overwrite.
    /// @param rom Address of the deployed ROM cartridge contract (its runtime code is the ROM bytes).
    /// @param baseAddr 16‑bit address where the first byte should be written.
    function loadRomFrom(address rom, uint16 baseAddr) external {
        require(!romLoaded, "ROM already loaded");

        uint256 size;
        assembly {
            size := extcodesize(rom)
        }
        require(size > 0 && size <= 65536, "Invalid ROM size");
        require(uint256(baseAddr) + size <= 65536, "ROM overflows RAM");

        bytes memory data = new bytes(size);
        assembly {
            extcodecopy(rom, add(data, 0x20), 0, size)
        }

        for (uint256 i = 0; i < size; ++i) {
            _write8(baseAddr + uint16(i), uint8(data[i]));
        }

        romLoaded = true;
    }

    // --- STX helper ---
    function _stx(uint16 addr) internal {
        _write8(addr, cpu.X);
    }
    function _opSTXZeroPage() internal {
        _stx(uint16(_fetch8()));
    }
    function _opSTXZeroPageY() internal {
        uint8 b = _fetch8();
        unchecked {
            b += cpu.Y;
        }
        _stx(uint16(b));
    }
    function _opSTXAbsolute() internal {
        _stx(_fetch16());
    }

    // --- STY helper ---
    function _sty(uint16 addr) internal {
        _write8(addr, cpu.Y);
    }
    function _opSTYZeroPage() internal {
        _sty(uint16(_fetch8()));
    }
    function _opSTYZeroPageX() internal {
        uint8 b = _fetch8();
        unchecked {
            b += cpu.X;
        }
        _sty(uint16(b));
    }
    function _opSTYAbsolute() internal {
        _sty(_fetch16());
    }

    // --- STA helper ---
    function _sta(uint16 addr) internal {
        _write8(addr, cpu.A);
    }
    function _opSTAZeroPage() internal {
        _sta(uint16(_fetch8()));
    }
    function _opSTAZeroPageX() internal {
        uint8 b = _fetch8();
        unchecked {
            b += cpu.X;
        }
        _sta(uint16(b));
    }
    function _opSTAAbsolute() internal {
        _sta(_fetch16());
    }
    function _opSTAAbsoluteX() internal {
        uint16 base = _fetch16();
        _sta(base + cpu.X);
    }
    function _opSTAAbsoluteY() internal {
        uint16 base = _fetch16();
        _sta(base + cpu.Y);
    }
    function _opSTAIndexedIndirect() internal {
        uint8 p = _fetch8();
        unchecked { p += cpu.X; }
        uint16 addr = uint16(_read8(uint16(p))) | (uint16(_read8(uint16(_zpNext(p)))) << 8);
        _sta(addr);
    }
    function _opSTAIndirectIndexed() internal {
        uint8 p = _fetch8();
        uint16 base = uint16(_read8(uint16(p))) | (uint16(_read8(uint16(uint8(p + 1)))) << 8);
        _sta(base + cpu.Y);
    }

    // --- JMP helper ---
    function _opJMPAbsolute() internal {
        uint16 addr = _fetch16();
        cpu.PC = addr;
    }

    /*//////////////////////////////////////////////////////////////////////////
                                MISSING CORE OPCODES
    //////////////////////////////////////////////////////////////////////////*/

    // --- Flag / NOP opcodes ---
    function _opCLC() internal {
        _setFlag(FLAG_CARRY, false);
    }
    function _opSEC() internal {
        _setFlag(FLAG_CARRY, true);
    }
    function _opCLI() internal {
        _setFlag(FLAG_INTERRUPT, false);
    }
    function _opSEI() internal {
        _setFlag(FLAG_INTERRUPT, true);
    }
    function _opCLV() internal {
        _setFlag(FLAG_OVERFLOW, false);
    }
    function _opCLD() internal {
        _setFlag(FLAG_DECIMAL, false);
    }
    function _opSED() internal {
        _setFlag(FLAG_DECIMAL, true);
    }
    function _opNOP() internal {
        /* nothing */
    }

    // --- Register transfers ---
    function _opTAX() internal {
        cpu.X = cpu.A;
        _updateZN(cpu.X);
    }
    function _opTAY() internal {
        cpu.Y = cpu.A;
        _updateZN(cpu.Y);
    }
    function _opTXA() internal {
        cpu.A = cpu.X;
        _updateZN(cpu.A);
    }
    function _opTYA() internal {
        cpu.A = cpu.Y;
        _updateZN(cpu.A);
    }

    // --- Increment / Decrement register ---
    function _opINX() internal {
        unchecked {
            cpu.X += 1;
        }
        _updateZN(cpu.X);
    }
    function _opINY() internal {
        unchecked {
            cpu.Y += 1;
        }
        _updateZN(cpu.Y);
    }
    function _opDEX() internal {
        unchecked {
            cpu.X -= 1;
        }
        _updateZN(cpu.X);
    }
    function _opDEY() internal {
        unchecked {
            cpu.Y -= 1;
        }
        _updateZN(cpu.Y);
    }

    // --- INC / DEC memory helpers ---
    function _incMem(uint16 addr) internal {
        uint8 v = _read8(addr, false);
        unchecked {
            v += 1;
        }
        _write8(addr, v);
        _updateZN(v);
    }
    function _decMem(uint16 addr) internal {
        uint8 v = _read8(addr, false);
        unchecked {
            v -= 1;
        }
        _write8(addr, v);
        _updateZN(v);
    }

    function _opINCZeroPage() internal {
        _incMem(uint16(_fetch8()));
    }
    function _opINCZeroPageX() internal {
        uint8 b = _fetch8();
        unchecked {
            b += cpu.X;
        }
        _incMem(uint16(b));
    }
    function _opINCAbsolute() internal {
        _incMem(_fetch16());
    }
    function _opINCAbsoluteX() internal {
        uint16 base = _fetch16();
        _incMem(base + cpu.X);
    }

    function _opDECZeroPage() internal {
        _decMem(uint16(_fetch8()));
    }
    function _opDECZeroPageX() internal {
        uint8 b = _fetch8();
        unchecked {
            b += cpu.X;
        }
        _decMem(uint16(b));
    }
    function _opDECAbsolute() internal {
        _decMem(_fetch16());
    }
    function _opDECAbsoluteX() internal {
        uint16 base = _fetch16();
        _decMem(base + cpu.X);
    }

    // --- LDX / LDY ---
    function _ldx(uint8 v) internal {
        cpu.X = v;
        _updateZN(v);
    }
    function _ldy(uint8 v) internal {
        cpu.Y = v;
        _updateZN(v);
    }

    // LDX addressing modes
    function _opLDXImmediate() internal {
        _ldx(_fetch8());
    }
    function _opLDXZeroPage() internal {
        _ldx(_read8(uint16(_fetch8()), false));
    }
    function _opLDXZeroPageY() internal {
        uint8 b = _fetch8();
        unchecked {
            b += cpu.Y;
        }
        _ldx(_read8(uint16(b), false));
    }
    function _opLDXAbsolute() internal {
        _ldx(_read8(_fetch16(), false));
    }
    function _opLDXAbsoluteY() internal {
        uint16 base = _fetch16();
        _ldx(_read8(base + cpu.Y, false));
    }

    // LDY addressing modes
    function _opLDYImmediate() internal {
        _ldy(_fetch8());
    }
    function _opLDYZeroPage() internal {
        _ldy(_read8(uint16(_fetch8()), false));
    }
    function _opLDYZeroPageX() internal {
        uint8 b = _fetch8();
        unchecked {
            b += cpu.X;
        }
        _ldy(_read8(uint16(b), false));
    }
    function _opLDYAbsolute() internal {
        _ldy(_read8(_fetch16(), false));
    }
    function _opLDYAbsoluteX() internal {
        uint16 base = _fetch16();
        _ldy(_read8(base + cpu.X, false));
    }

    // --- JMP (indirect) ---
    function _opJMPIndirect() internal {
        uint16 ptr = _fetch16();
        uint16 loAddr = ptr;
        uint16 hiAddr = (ptr & 0xFF00) | uint16(uint8(ptr + 1));
        uint8 lo = _read8(loAddr);
        uint8 hi = _read8(hiAddr);
        cpu.PC = uint16(lo) | (uint16(hi) << 8);
    }

    uint8 public lastOpcode;

    // Helper: wraparound pointer increment within zero‑page (0x00‑0xFF)
    function _zpNext(uint8 p) internal pure returns (uint8) {
        unchecked {
            return uint8(p + 1);
        }
    }

    /// Enable or disable PC tracing (tests/dev only)
    function setPCTrace(bool enable) external {
        pcTraceEnabled = enable;
    }

    // ----------------------------------------------------------------
    // PC tracing buffer (testing aid) – captures every PC >= $A000 when
    // pcTraceEnabled is true.  Accessible via the public array getter.
    // ----------------------------------------------------------------
    uint16[] public pcTraceBuf;

    function _recordPC(uint16 pc) internal {
        pcTraceBuf.push(pc);
    }

    /// @notice Clear the stored PC trace (testing helper)
    function clearTrace() external {
        delete pcTraceBuf;
    }

    /// @notice Current number of PCs stored in trace buffer
    function pcTraceCount() external view returns (uint256) {
        return pcTraceBuf.length;
    }
}



================================================================
End of Codebase
================================================================
